
MateusPereiraSprint4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  000011d8  0000126c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000228  0080013e  0080013e  000012aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00001320  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016ea  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a05  00000000  00000000  00002b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b69  00000000  00000000  0000350f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000300  00000000  00000000  00004078  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065b  00000000  00000000  00004378  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a78  00000000  00000000  000049d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000544b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 24 01 	jmp	0x248	; 0x248 <__ctors_end>
       4:	0c 94 43 01 	jmp	0x286	; 0x286 <__vector_1>
       8:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__vector_2>
       c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      10:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      14:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__vector_5>
      18:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      1c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      20:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      24:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      28:	0c 94 9c 02 	jmp	0x538	; 0x538 <__vector_10>
      2c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      30:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      34:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      38:	0c 94 a3 01 	jmp	0x346	; 0x346 <__vector_14>
      3c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      40:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      44:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      48:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      4c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      50:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      54:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__vector_21>
      58:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      5c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      60:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      64:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>

00000068 <CHARSET>:
      68:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      78:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      88:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      98:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      a8:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      b8:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      c8:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      d8:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      e8:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
      f8:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     108:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     118:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     128:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     138:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     148:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     158:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     168:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     178:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     188:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     198:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1a8:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1b8:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1c8:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     1d8:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     1e8:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     1f8:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     208:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     218:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     228:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     238:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

00000248 <__ctors_end>:
     248:	11 24       	eor	r1, r1
     24a:	1f be       	out	0x3f, r1	; 63
     24c:	cf ef       	ldi	r28, 0xFF	; 255
     24e:	d8 e0       	ldi	r29, 0x08	; 8
     250:	de bf       	out	0x3e, r29	; 62
     252:	cd bf       	out	0x3d, r28	; 61

00000254 <__do_copy_data>:
     254:	11 e0       	ldi	r17, 0x01	; 1
     256:	a0 e0       	ldi	r26, 0x00	; 0
     258:	b1 e0       	ldi	r27, 0x01	; 1
     25a:	e8 ed       	ldi	r30, 0xD8	; 216
     25c:	f1 e1       	ldi	r31, 0x11	; 17
     25e:	02 c0       	rjmp	.+4      	; 0x264 <__do_copy_data+0x10>
     260:	05 90       	lpm	r0, Z+
     262:	0d 92       	st	X+, r0
     264:	ae 33       	cpi	r26, 0x3E	; 62
     266:	b1 07       	cpc	r27, r17
     268:	d9 f7       	brne	.-10     	; 0x260 <__do_copy_data+0xc>

0000026a <__do_clear_bss>:
     26a:	23 e0       	ldi	r18, 0x03	; 3
     26c:	ae e3       	ldi	r26, 0x3E	; 62
     26e:	b1 e0       	ldi	r27, 0x01	; 1
     270:	01 c0       	rjmp	.+2      	; 0x274 <.do_clear_bss_start>

00000272 <.do_clear_bss_loop>:
     272:	1d 92       	st	X+, r1

00000274 <.do_clear_bss_start>:
     274:	a6 36       	cpi	r26, 0x66	; 102
     276:	b2 07       	cpc	r27, r18
     278:	e1 f7       	brne	.-8      	; 0x272 <.do_clear_bss_loop>
     27a:	0e 94 1b 03 	call	0x636	; 0x636 <main>
     27e:	0c 94 ea 08 	jmp	0x11d4	; 0x11d4 <_exit>

00000282 <__bad_interrupt>:
     282:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000286 <__vector_1>:
uint16_t zerar_eeprom = 0;
uint32_t tempo_borda_subida = 0, distancia_delta_sonar = 0;
unsigned char display_string[tamanho_vetor];

ISR(INT0_vect) //Se Pressionar D2 (+1)
{
     286:	1f 92       	push	r1
     288:	0f 92       	push	r0
     28a:	0f b6       	in	r0, 0x3f	; 63
     28c:	0f 92       	push	r0
     28e:	11 24       	eor	r1, r1
     290:	2f 93       	push	r18
     292:	3f 93       	push	r19
     294:	4f 93       	push	r20
     296:	5f 93       	push	r21
     298:	6f 93       	push	r22
     29a:	7f 93       	push	r23
     29c:	8f 93       	push	r24
     29e:	9f 93       	push	r25
     2a0:	af 93       	push	r26
     2a2:	bf 93       	push	r27
     2a4:	ef 93       	push	r30
     2a6:	ff 93       	push	r31
	tamroda++;
     2a8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     2ac:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     2b0:	6f 5f       	subi	r22, 0xFF	; 255
     2b2:	7f 4f       	sbci	r23, 0xFF	; 255
     2b4:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     2b8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
	eeprom_write_byte(0,tamroda); //Salvo o tamanho da Roda na posição 0
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <eeprom_write_byte>
}
     2c4:	ff 91       	pop	r31
     2c6:	ef 91       	pop	r30
     2c8:	bf 91       	pop	r27
     2ca:	af 91       	pop	r26
     2cc:	9f 91       	pop	r25
     2ce:	8f 91       	pop	r24
     2d0:	7f 91       	pop	r23
     2d2:	6f 91       	pop	r22
     2d4:	5f 91       	pop	r21
     2d6:	4f 91       	pop	r20
     2d8:	3f 91       	pop	r19
     2da:	2f 91       	pop	r18
     2dc:	0f 90       	pop	r0
     2de:	0f be       	out	0x3f, r0	; 63
     2e0:	0f 90       	pop	r0
     2e2:	1f 90       	pop	r1
     2e4:	18 95       	reti

000002e6 <__vector_2>:

ISR(INT1_vect) //Se Pressionar D3 (-1)
{
     2e6:	1f 92       	push	r1
     2e8:	0f 92       	push	r0
     2ea:	0f b6       	in	r0, 0x3f	; 63
     2ec:	0f 92       	push	r0
     2ee:	11 24       	eor	r1, r1
     2f0:	2f 93       	push	r18
     2f2:	3f 93       	push	r19
     2f4:	4f 93       	push	r20
     2f6:	5f 93       	push	r21
     2f8:	6f 93       	push	r22
     2fa:	7f 93       	push	r23
     2fc:	8f 93       	push	r24
     2fe:	9f 93       	push	r25
     300:	af 93       	push	r26
     302:	bf 93       	push	r27
     304:	ef 93       	push	r30
     306:	ff 93       	push	r31
	tamroda--;
     308:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     30c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     310:	61 50       	subi	r22, 0x01	; 1
     312:	71 09       	sbc	r23, r1
     314:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     318:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
	eeprom_write_byte(0,tamroda); //Salvo o tamanho da Roda na posição 0
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <eeprom_write_byte>
}
     324:	ff 91       	pop	r31
     326:	ef 91       	pop	r30
     328:	bf 91       	pop	r27
     32a:	af 91       	pop	r26
     32c:	9f 91       	pop	r25
     32e:	8f 91       	pop	r24
     330:	7f 91       	pop	r23
     332:	6f 91       	pop	r22
     334:	5f 91       	pop	r21
     336:	4f 91       	pop	r20
     338:	3f 91       	pop	r19
     33a:	2f 91       	pop	r18
     33c:	0f 90       	pop	r0
     33e:	0f be       	out	0x3f, r0	; 63
     340:	0f 90       	pop	r0
     342:	1f 90       	pop	r1
     344:	18 95       	reti

00000346 <__vector_14>:

ISR(TIMER0_COMPA_vect) // Interrupção do TC0 a  cada 1ms
{
     346:	1f 92       	push	r1
     348:	0f 92       	push	r0
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	0f 92       	push	r0
     34e:	11 24       	eor	r1, r1
     350:	2f 93       	push	r18
     352:	3f 93       	push	r19
     354:	4f 93       	push	r20
     356:	5f 93       	push	r21
     358:	6f 93       	push	r22
     35a:	7f 93       	push	r23
     35c:	8f 93       	push	r24
     35e:	9f 93       	push	r25
     360:	af 93       	push	r26
     362:	bf 93       	push	r27
     364:	ef 93       	push	r30
     366:	ff 93       	push	r31
	static float aux;
	tempo_ms++;
     368:	40 91 54 01 	lds	r20, 0x0154	; 0x800154 <tempo_ms>
     36c:	50 91 55 01 	lds	r21, 0x0155	; 0x800155 <tempo_ms+0x1>
     370:	4f 5f       	subi	r20, 0xFF	; 255
     372:	5f 4f       	sbci	r21, 0xFF	; 255
     374:	50 93 55 01 	sts	0x0155, r21	; 0x800155 <tempo_ms+0x1>
     378:	40 93 54 01 	sts	0x0154, r20	; 0x800154 <tempo_ms>
	if((tempo_ms % 1000) == 0) // Entra a cada 1 segundo
     37c:	9a 01       	movw	r18, r20
     37e:	36 95       	lsr	r19
     380:	27 95       	ror	r18
     382:	36 95       	lsr	r19
     384:	27 95       	ror	r18
     386:	36 95       	lsr	r19
     388:	27 95       	ror	r18
     38a:	a5 ec       	ldi	r26, 0xC5	; 197
     38c:	b0 e2       	ldi	r27, 0x20	; 32
     38e:	0e 94 90 08 	call	0x1120	; 0x1120 <__umulhisi3>
     392:	92 95       	swap	r25
     394:	82 95       	swap	r24
     396:	8f 70       	andi	r24, 0x0F	; 15
     398:	89 27       	eor	r24, r25
     39a:	9f 70       	andi	r25, 0x0F	; 15
     39c:	89 27       	eor	r24, r25
     39e:	68 ee       	ldi	r22, 0xE8	; 232
     3a0:	73 e0       	ldi	r23, 0x03	; 3
     3a2:	86 9f       	mul	r24, r22
     3a4:	90 01       	movw	r18, r0
     3a6:	87 9f       	mul	r24, r23
     3a8:	30 0d       	add	r19, r0
     3aa:	96 9f       	mul	r25, r22
     3ac:	30 0d       	add	r19, r0
     3ae:	11 24       	eor	r1, r1
     3b0:	42 17       	cp	r20, r18
     3b2:	53 07       	cpc	r21, r19
     3b4:	09 f5       	brne	.+66     	; 0x3f8 <__vector_14+0xb2>
	{
		aux = mudanca; // Vamos ter rotações por segundo
     3b6:	60 91 52 01 	lds	r22, 0x0152	; 0x800152 <mudanca>
     3ba:	70 91 53 01 	lds	r23, 0x0153	; 0x800153 <mudanca+0x1>
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	0e 94 53 07 	call	0xea6	; 0xea6 <__floatunsisf>
		rpm = (aux*60);
     3c6:	20 e0       	ldi	r18, 0x00	; 0
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	40 e7       	ldi	r20, 0x70	; 112
     3cc:	52 e4       	ldi	r21, 0x42	; 66
     3ce:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__mulsf3>
     3d2:	0e 94 24 07 	call	0xe48	; 0xe48 <__fixunssfsi>
     3d6:	70 93 5b 01 	sts	0x015B, r23	; 0x80015b <rpm+0x1>
     3da:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <rpm>
		mudanca = 0;
     3de:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <mudanca+0x1>
     3e2:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <mudanca>
		aux_dist++;	// Conta de 1 em 1 Segundo
     3e6:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <aux_dist>
     3ea:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <aux_dist+0x1>
     3ee:	01 96       	adiw	r24, 0x01	; 1
     3f0:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <aux_dist+0x1>
     3f4:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <aux_dist>
	}
}
     3f8:	ff 91       	pop	r31
     3fa:	ef 91       	pop	r30
     3fc:	bf 91       	pop	r27
     3fe:	af 91       	pop	r26
     400:	9f 91       	pop	r25
     402:	8f 91       	pop	r24
     404:	7f 91       	pop	r23
     406:	6f 91       	pop	r22
     408:	5f 91       	pop	r21
     40a:	4f 91       	pop	r20
     40c:	3f 91       	pop	r19
     40e:	2f 91       	pop	r18
     410:	0f 90       	pop	r0
     412:	0f be       	out	0x3f, r0	; 63
     414:	0f 90       	pop	r0
     416:	1f 90       	pop	r1
     418:	18 95       	reti

0000041a <__vector_5>:

ISR(PCINT2_vect) // Interrupção 2 por mudança de pino
{
     41a:	1f 92       	push	r1
     41c:	0f 92       	push	r0
     41e:	0f b6       	in	r0, 0x3f	; 63
     420:	0f 92       	push	r0
     422:	11 24       	eor	r1, r1
     424:	8f 93       	push	r24
     426:	9f 93       	push	r25
	if (!teste_porta (PIND, PD1)) // Pega a variação em PD1
     428:	49 99       	sbic	0x09, 1	; 9
     42a:	09 c0       	rjmp	.+18     	; 0x43e <__vector_5+0x24>
	{
		mudanca++; // Conta descida e subida
     42c:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <mudanca>
     430:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <mudanca+0x1>
     434:	01 96       	adiw	r24, 0x01	; 1
     436:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <mudanca+0x1>
     43a:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <mudanca>
	}
	
	if (teste_porta(PIND,PD5)==0) // SE APERTAR O BOTÃO D/R CAI AQUI
     43e:	4d 99       	sbic	0x09, 5	; 9
     440:	07 c0       	rjmp	.+14     	; 0x450 <__vector_5+0x36>
	{
		pqp = 11; // Motor sentido horário - D
     442:	8b e0       	ldi	r24, 0x0B	; 11
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <pqp+0x1>
     44a:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <pqp>
     44e:	06 c0       	rjmp	.+12     	; 0x45c <__vector_5+0x42>
	}
	else
	{
		pqp = 13; // Motor sentido anti-horário - R
     450:	8d e0       	ldi	r24, 0x0D	; 13
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <pqp+0x1>
     458:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <pqp>
	}
	
	if (teste_porta(PIND,PD4)==0) // SE APERTAR O BOTÃO P CAI AQUI
     45c:	4c 99       	sbic	0x09, 4	; 9
     45e:	06 c0       	rjmp	.+12     	; 0x46c <__vector_5+0x52>
	{
		pqp = 5; // carro parado - P
     460:	85 e0       	ldi	r24, 0x05	; 5
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <pqp+0x1>
     468:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <pqp>
	}
}
     46c:	9f 91       	pop	r25
     46e:	8f 91       	pop	r24
     470:	0f 90       	pop	r0
     472:	0f be       	out	0x3f, r0	; 63
     474:	0f 90       	pop	r0
     476:	1f 90       	pop	r1
     478:	18 95       	reti

0000047a <__vector_21>:

ISR(ADC_vect)
{
     47a:	1f 92       	push	r1
     47c:	0f 92       	push	r0
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	0f 92       	push	r0
     482:	11 24       	eor	r1, r1
     484:	2f 93       	push	r18
     486:	3f 93       	push	r19
     488:	8f 93       	push	r24
     48a:	9f 93       	push	r25
     48c:	af 93       	push	r26
     48e:	bf 93       	push	r27
     490:	ef 93       	push	r30
     492:	ff 93       	push	r31
	leitura_ADC = ADC; //cópia do valor ADC para uma variavél
     494:	e8 e7       	ldi	r30, 0x78	; 120
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	80 81       	ld	r24, Z
     49a:	91 81       	ldd	r25, Z+1	; 0x01
     49c:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <leitura_ADC+0x1>
     4a0:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <leitura_ADC>
	
	if (ADC==1023) // Resolve o problema do limite superior
     4a4:	80 81       	ld	r24, Z
     4a6:	91 81       	ldd	r25, Z+1	; 0x01
     4a8:	8f 3f       	cpi	r24, 0xFF	; 255
     4aa:	93 40       	sbci	r25, 0x03	; 3
     4ac:	39 f4       	brne	.+14     	; 0x4bc <__vector_21+0x42>
	{
		aux_pwm = 255;
     4ae:	8f ef       	ldi	r24, 0xFF	; 255
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <aux_pwm+0x1>
     4b6:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <aux_pwm>
     4ba:	0c c0       	rjmp	.+24     	; 0x4d4 <__vector_21+0x5a>
	}
	else
	{
		aux_pwm = (ADC/4);
     4bc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     4c0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     4c4:	96 95       	lsr	r25
     4c6:	87 95       	ror	r24
     4c8:	96 95       	lsr	r25
     4ca:	87 95       	ror	r24
     4cc:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <aux_pwm+0x1>
     4d0:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <aux_pwm>
	}
	
	if (distancia_delta_sonar < 300) //Teste Para o sonar caso a dist seja menor que 300 cm ou 3 m
     4d4:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     4d8:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <__data_end+0x1>
     4dc:	a0 91 40 01 	lds	r26, 0x0140	; 0x800140 <__data_end+0x2>
     4e0:	b0 91 41 01 	lds	r27, 0x0141	; 0x800141 <__data_end+0x3>
     4e4:	8c 32       	cpi	r24, 0x2C	; 44
     4e6:	21 e0       	ldi	r18, 0x01	; 1
     4e8:	92 07       	cpc	r25, r18
     4ea:	a1 05       	cpc	r26, r1
     4ec:	b1 05       	cpc	r27, r1
     4ee:	68 f4       	brcc	.+26     	; 0x50a <__vector_21+0x90>
	{
		if(velocidade > 20)
     4f0:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <velocidade>
     4f4:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <velocidade+0x1>
     4f8:	25 31       	cpi	r18, 0x15	; 21
     4fa:	31 05       	cpc	r19, r1
     4fc:	30 f0       	brcs	.+12     	; 0x50a <__vector_21+0x90>
		{
			aux_pwm = 102; //Regula a Rotação do motor para 10%, tem 1024 posições
     4fe:	26 e6       	ldi	r18, 0x66	; 102
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	30 93 4d 01 	sts	0x014D, r19	; 0x80014d <aux_pwm+0x1>
     506:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <aux_pwm>
		}
	}
	
	if (distancia_delta_sonar < 1)
     50a:	89 2b       	or	r24, r25
     50c:	8a 2b       	or	r24, r26
     50e:	8b 2b       	or	r24, r27
     510:	31 f4       	brne	.+12     	; 0x51e <__vector_21+0xa4>
	{
		aux_pwm = 1; //Carro bateu
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <aux_pwm+0x1>
     51a:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <aux_pwm>
	}
	
}
     51e:	ff 91       	pop	r31
     520:	ef 91       	pop	r30
     522:	bf 91       	pop	r27
     524:	af 91       	pop	r26
     526:	9f 91       	pop	r25
     528:	8f 91       	pop	r24
     52a:	3f 91       	pop	r19
     52c:	2f 91       	pop	r18
     52e:	0f 90       	pop	r0
     530:	0f be       	out	0x3f, r0	; 63
     532:	0f 90       	pop	r0
     534:	1f 90       	pop	r1
     536:	18 95       	reti

00000538 <__vector_10>:

//SONAR
ISR(TIMER1_CAPT_vect) //Interrupção por captura do valor do IC1
{
     538:	1f 92       	push	r1
     53a:	0f 92       	push	r0
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	0f 92       	push	r0
     540:	11 24       	eor	r1, r1
     542:	0f 93       	push	r16
     544:	1f 93       	push	r17
     546:	2f 93       	push	r18
     548:	3f 93       	push	r19
     54a:	4f 93       	push	r20
     54c:	5f 93       	push	r21
     54e:	6f 93       	push	r22
     550:	7f 93       	push	r23
     552:	8f 93       	push	r24
     554:	9f 93       	push	r25
     556:	af 93       	push	r26
     558:	bf 93       	push	r27
     55a:	ef 93       	push	r30
     55c:	ff 93       	push	r31
	if(TCCR1B & (1<<ICES1)) //Lê o valor de contagem do TC1 na borda de subida do sinal
     55e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     562:	86 ff       	sbrs	r24, 6
     564:	0f c0       	rjmp	.+30     	; 0x584 <__vector_10+0x4c>
	{
		tempo_borda_subida = ICR1;
     566:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     56a:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     56e:	a0 e0       	ldi	r26, 0x00	; 0
     570:	b0 e0       	ldi	r27, 0x00	; 0
     572:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <tempo_borda_subida>
     576:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <tempo_borda_subida+0x1>
     57a:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <tempo_borda_subida+0x2>
     57e:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <tempo_borda_subida+0x3>
     582:	40 c0       	rjmp	.+128    	; 0x604 <__vector_10+0xcc>
	}
	else
	{
		distancia_delta_sonar = (ICR1 - tempo_borda_subida)*16/58; //Passa para us e depois converte para a formula do sonar
     584:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     588:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     58c:	cb 01       	movw	r24, r22
     58e:	a0 e0       	ldi	r26, 0x00	; 0
     590:	b0 e0       	ldi	r27, 0x00	; 0
     592:	00 91 42 01 	lds	r16, 0x0142	; 0x800142 <tempo_borda_subida>
     596:	10 91 43 01 	lds	r17, 0x0143	; 0x800143 <tempo_borda_subida+0x1>
     59a:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <tempo_borda_subida+0x2>
     59e:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <tempo_borda_subida+0x3>
     5a2:	80 1b       	sub	r24, r16
     5a4:	91 0b       	sbc	r25, r17
     5a6:	a2 0b       	sbc	r26, r18
     5a8:	b3 0b       	sbc	r27, r19
     5aa:	88 0f       	add	r24, r24
     5ac:	99 1f       	adc	r25, r25
     5ae:	aa 1f       	adc	r26, r26
     5b0:	bb 1f       	adc	r27, r27
     5b2:	88 0f       	add	r24, r24
     5b4:	99 1f       	adc	r25, r25
     5b6:	aa 1f       	adc	r26, r26
     5b8:	bb 1f       	adc	r27, r27
     5ba:	bc 01       	movw	r22, r24
     5bc:	cd 01       	movw	r24, r26
     5be:	66 0f       	add	r22, r22
     5c0:	77 1f       	adc	r23, r23
     5c2:	88 1f       	adc	r24, r24
     5c4:	99 1f       	adc	r25, r25
     5c6:	66 0f       	add	r22, r22
     5c8:	77 1f       	adc	r23, r23
     5ca:	88 1f       	adc	r24, r24
     5cc:	99 1f       	adc	r25, r25
     5ce:	2a e3       	ldi	r18, 0x3A	; 58
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	40 e0       	ldi	r20, 0x00	; 0
     5d4:	50 e0       	ldi	r21, 0x00	; 0
     5d6:	0e 94 6e 08 	call	0x10dc	; 0x10dc <__udivmodsi4>
     5da:	20 93 3e 01 	sts	0x013E, r18	; 0x80013e <__data_end>
     5de:	30 93 3f 01 	sts	0x013F, r19	; 0x80013f <__data_end+0x1>
     5e2:	40 93 40 01 	sts	0x0140, r20	; 0x800140 <__data_end+0x2>
     5e6:	50 93 41 01 	sts	0x0141, r21	; 0x800141 <__data_end+0x3>
		if (distancia_delta_sonar==1724)
     5ea:	2c 3b       	cpi	r18, 0xBC	; 188
     5ec:	36 40       	sbci	r19, 0x06	; 6
     5ee:	41 05       	cpc	r20, r1
     5f0:	51 05       	cpc	r21, r1
     5f2:	41 f4       	brne	.+16     	; 0x604 <__vector_10+0xcc>
		{
			distancia_delta_sonar = 0;
     5f4:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
     5f8:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <__data_end+0x1>
     5fc:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <__data_end+0x2>
     600:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__data_end+0x3>
		}
	}
	TCCR1B ^= (1<<ICES1); //Inverte a borda de captura
     604:	e1 e8       	ldi	r30, 0x81	; 129
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	90 81       	ld	r25, Z
     60a:	80 e4       	ldi	r24, 0x40	; 64
     60c:	89 27       	eor	r24, r25
     60e:	80 83       	st	Z, r24
}
     610:	ff 91       	pop	r31
     612:	ef 91       	pop	r30
     614:	bf 91       	pop	r27
     616:	af 91       	pop	r26
     618:	9f 91       	pop	r25
     61a:	8f 91       	pop	r24
     61c:	7f 91       	pop	r23
     61e:	6f 91       	pop	r22
     620:	5f 91       	pop	r21
     622:	4f 91       	pop	r20
     624:	3f 91       	pop	r19
     626:	2f 91       	pop	r18
     628:	1f 91       	pop	r17
     62a:	0f 91       	pop	r16
     62c:	0f 90       	pop	r0
     62e:	0f be       	out	0x3f, r0	; 63
     630:	0f 90       	pop	r0
     632:	1f 90       	pop	r1
     634:	18 95       	reti

00000636 <main>:

int main(void)
{
		DDRC  = 0b11111110; //Definindo PC0 como entrada
     636:	8e ef       	ldi	r24, 0xFE	; 254
     638:	87 b9       	out	0x07, r24	; 7
		DDRB  = 0b11111110;
     63a:	84 b9       	out	0x04, r24	; 4
		DDRD  = 0b01000001; // PD0 e PD6 como saídas
     63c:	91 e4       	ldi	r25, 0x41	; 65
     63e:	9a b9       	out	0x0a, r25	; 10
		PORTD = 0b11001101;
     640:	9d ec       	ldi	r25, 0xCD	; 205
     642:	9b b9       	out	0x0b, r25	; 11
		PORTC = 0b11111110; //Desabilita o pullup das entradas
     644:	88 b9       	out	0x08, r24	; 8
		PORTB = 0b00000001; //Pullups Ativos
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	85 b9       	out	0x05, r24	; 5
		
		TCCR0A = 0b00000010; // Habilita modo CTC do TC0
     64a:	92 e0       	ldi	r25, 0x02	; 2
     64c:	94 bd       	out	0x24, r25	; 36
		TCCR0B = 0b00000011; //Liga TC0 com prescaler = 64
     64e:	83 e0       	ldi	r24, 0x03	; 3
     650:	85 bd       	out	0x25, r24	; 37
		OCR0A = 249; // Ajusta o comparador para o TC0 contar ate 249
     652:	29 ef       	ldi	r18, 0xF9	; 249
     654:	27 bd       	out	0x27, r18	; 39
		TIMSK0 = 0b00000010; // Habilita a interrupção na igualdade de comparação OCR0A. A interrupção ocorre a cada 1ms = (64*(249+1))/16MHz
     656:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
		
		EICRA = 0b00001010;
     65a:	9a e0       	ldi	r25, 0x0A	; 10
     65c:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
		EIMSK = 0b00000011;
     660:	8d bb       	out	0x1d, r24	; 29
		
		PCICR = 0b00000100; //Habilita a interrupção PCINT2
     662:	94 e0       	ldi	r25, 0x04	; 4
     664:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
		PCMSK2= 0b00110010; // Habilitação do pino D1, D4 e D5 na interrupção PCINT2
     668:	92 e3       	ldi	r25, 0x32	; 50
     66a:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <__TEXT_REGION_LENGTH__+0x7f806d>
		
		ADMUX = 0b11000000; // Tensão interna de ref (1.1V)
     66e:	90 ec       	ldi	r25, 0xC0	; 192
     670:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
		ADCSRA = 0b11101111; //Habilita o AD, interrupção, conversão continua e coloca o prescaler em 128
     674:	9f ee       	ldi	r25, 0xEF	; 239
     676:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		ADCSRB = 0x00; //Modo de conversão contínua
     67a:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
		DIDR0 = 0b00111110; //Habilita o pino PC5 como entrada do  AD0
     67e:	9e e3       	ldi	r25, 0x3E	; 62
     680:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
		
		//Fast PWM, TOP = 0xFF, OC0A e OC0B habilitados
		TCCR0A = 0b10100011; //PWM não invertido nos pinos OC0A e OC0B
     684:	93 ea       	ldi	r25, 0xA3	; 163
     686:	94 bd       	out	0x24, r25	; 36
		TCCR0B = 0b00000011; //Liga TC0, prescaler = 64, fpwm = f0sc/(256*prescaler) = 16MHz/(256*64) = 976 Hz
     688:	85 bd       	out	0x25, r24	; 37
		//OCR0A = aux_pwm; //Controle do ciclo ativo do PWM OC0A (PD6), dutty = aux_pwm/256
		
		//SONAR
		TCCR1B = (1<<ICES1)|(1<<CS12); //Captura na borda de subida, TC1 com prescaler = 356.
     68a:	84 e4       	ldi	r24, 0x44	; 68
     68c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		//Estouro a cada 256*(2^16)/16MHz = (2^16)*16us = 1,04s
		TIMSK1 = 1<<ICIE1; //Habilita interrupção por captura
     690:	80 e2       	ldi	r24, 0x20	; 32
     692:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
		
		sei();
     696:	78 94       	sei
				
		nokia_lcd_init();
     698:	0e 94 63 05 	call	0xac6	; 0xac6 <nokia_lcd_init>
		
		if (zerar_eeprom==1) //Zerar a memória da EEPROM (mudar o valor da variavél na declaração)
     69c:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <zerar_eeprom>
     6a0:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <zerar_eeprom+0x1>
     6a4:	01 97       	sbiw	r24, 0x01	; 1
     6a6:	59 f4       	brne	.+22     	; 0x6be <main+0x88>
		{
			eeprom_write_byte(0,tamroda);
     6a8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <eeprom_write_byte>
			eeprom_write_byte(1,0);
     6b4:	60 e0       	ldi	r22, 0x00	; 0
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <eeprom_write_byte>
		}
		
		if(eeprom_read_byte(1)==255)
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <eeprom_read_byte>
     6c6:	8f 3f       	cpi	r24, 0xFF	; 255
     6c8:	31 f4       	brne	.+12     	; 0x6d6 <main+0xa0>
		{
			eeprom_write_byte(1,aux_dist_eeprom);   //Salvo a distância inicialmente
     6ca:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <aux_dist_eeprom>
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <eeprom_write_byte>
												   //Pois logo quando liga o micro a memoria
												  //não terá seu valor real já que ainda não
			                                     //foi feita nenhuma atribuição
		}
		
		if(eeprom_read_byte(0)==255)
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <eeprom_read_byte>
     6de:	8f 3f       	cpi	r24, 0xFF	; 255
     6e0:	31 f4       	brne	.+12     	; 0x6ee <main+0xb8>
		{
			eeprom_write_byte(0,tamroda); //Salvo o tamanho da Roda inicialmente,
     6e2:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <eeprom_write_byte>
										 //Pois logo quando liga o micro a memória
										//não terá seu valor real já que ainda não
									   //foi pressionado nenhum botão
		}
		
		aux_dist_eeprom = eeprom_read_byte(1); //Carrego a distância pecorrida salvo na EEPROM
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <eeprom_read_byte>
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <aux_dist_eeprom+0x1>
     6fc:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <aux_dist_eeprom>
											  //em uma variavél aux para não afetar a lógica
			
	while (1)
	{
		velocidade = 2*3.14*(tamroda/2)/100000*rpm*60; //Comprimento em Km = 2*3.14*(tamroda/2)/100000, como é 1:1 temos rpm*60 (Rotações por Hora)
     700:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     704:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     708:	76 95       	lsr	r23
     70a:	67 95       	ror	r22
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	0e 94 53 07 	call	0xea6	; 0xea6 <__floatunsisf>
     714:	23 ec       	ldi	r18, 0xC3	; 195
     716:	35 ef       	ldi	r19, 0xF5	; 245
     718:	48 ec       	ldi	r20, 0xC8	; 200
     71a:	50 e4       	ldi	r21, 0x40	; 64
     71c:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__mulsf3>
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	30 e5       	ldi	r19, 0x50	; 80
     724:	43 ec       	ldi	r20, 0xC3	; 195
     726:	57 e4       	ldi	r21, 0x47	; 71
     728:	0e 94 b2 06 	call	0xd64	; 0xd64 <__divsf3>
     72c:	6b 01       	movw	r12, r22
     72e:	7c 01       	movw	r14, r24
     730:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <rpm>
     734:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <rpm+0x1>
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	0e 94 53 07 	call	0xea6	; 0xea6 <__floatunsisf>
     740:	a7 01       	movw	r20, r14
     742:	96 01       	movw	r18, r12
     744:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__mulsf3>
     748:	20 e0       	ldi	r18, 0x00	; 0
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	40 e7       	ldi	r20, 0x70	; 112
     74e:	52 e4       	ldi	r21, 0x42	; 66
     750:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__mulsf3>
     754:	0e 94 24 07 	call	0xe48	; 0xe48 <__fixunssfsi>
     758:	70 93 57 01 	sts	0x0157, r23	; 0x800157 <velocidade+0x1>
     75c:	60 93 56 01 	sts	0x0156, r22	; 0x800156 <velocidade>
		dist = aux_dist_eeprom + aux_dist*velocidade/3600; // A cada 1s incremeta 1 em aux_dist assim temos X km por segundos
     760:	40 91 50 01 	lds	r20, 0x0150	; 0x800150 <aux_dist>
     764:	50 91 51 01 	lds	r21, 0x0151	; 0x800151 <aux_dist+0x1>
     768:	46 9f       	mul	r20, r22
     76a:	90 01       	movw	r18, r0
     76c:	47 9f       	mul	r20, r23
     76e:	30 0d       	add	r19, r0
     770:	56 9f       	mul	r21, r22
     772:	30 0d       	add	r19, r0
     774:	11 24       	eor	r1, r1
     776:	c9 01       	movw	r24, r18
     778:	60 e1       	ldi	r22, 0x10	; 16
     77a:	7e e0       	ldi	r23, 0x0E	; 14
     77c:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__udivmodhi4>
     780:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <aux_dist_eeprom>
     784:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <aux_dist_eeprom+0x1>
     788:	eb 01       	movw	r28, r22
     78a:	c8 0f       	add	r28, r24
     78c:	d9 1f       	adc	r29, r25
     78e:	d0 93 59 01 	sts	0x0159, r29	; 0x800159 <dist+0x1>
     792:	c0 93 58 01 	sts	0x0158, r28	; 0x800158 <dist>
		
		tamroda = eeprom_read_byte(0); //Carrego o tamnho da roda salvo na EEPROM
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <eeprom_read_byte>
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     7a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		eeprom_write_byte(1,dist); //Salvo a distância pecorrida na posição 1
     7a8:	6c 2f       	mov	r22, r28
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <eeprom_write_byte>
		
		//aux_pwm = ADC*256/1023; // aux que compara com o estouto de 8 bits
		OCR0A = aux_pwm; //Controle do ciclo ativo do PWM OC0A (PD6), dutty = aux_pwm/256
     7b2:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <aux_pwm>
     7b6:	87 bd       	out	0x27, r24	; 39
					
		//nokia_lcd_init();
		nokia_lcd_clear();
     7b8:	0e 94 bb 05 	call	0xb76	; 0xb76 <nokia_lcd_clear>
		nokia_lcd_write_string("COMP. DE BORDO",1);
     7bc:	61 e0       	ldi	r22, 0x01	; 1
     7be:	82 e0       	ldi	r24, 0x02	; 2
     7c0:	91 e0       	ldi	r25, 0x01	; 1
     7c2:	0e 94 83 06 	call	0xd06	; 0xd06 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 10);
     7c6:	6a e0       	ldi	r22, 0x0A	; 10
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	0e 94 94 06 	call	0xd28	; 0xd28 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("Diam(cm):", 1);
     7ce:	61 e0       	ldi	r22, 0x01	; 1
     7d0:	81 e1       	ldi	r24, 0x11	; 17
     7d2:	91 e0       	ldi	r25, 0x01	; 1
     7d4:	0e 94 83 06 	call	0xd06	; 0xd06 <nokia_lcd_write_string>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     7d8:	4a e0       	ldi	r20, 0x0A	; 10
     7da:	66 e5       	ldi	r22, 0x56	; 86
     7dc:	73 e0       	ldi	r23, 0x03	; 3
     7de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     7e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     7e6:	0e 94 9f 08 	call	0x113e	; 0x113e <__itoa_ncheck>
		itoa(tamroda, &display_string, 10); //chamada da função para converter inteiros em string
		nokia_lcd_set_cursor(55, 10);
     7ea:	6a e0       	ldi	r22, 0x0A	; 10
     7ec:	87 e3       	ldi	r24, 0x37	; 55
     7ee:	0e 94 94 06 	call	0xd28	; 0xd28 <nokia_lcd_set_cursor>
		nokia_lcd_write_string(display_string, 1);
     7f2:	61 e0       	ldi	r22, 0x01	; 1
     7f4:	86 e5       	ldi	r24, 0x56	; 86
     7f6:	93 e0       	ldi	r25, 0x03	; 3
     7f8:	0e 94 83 06 	call	0xd06	; 0xd06 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 20);
     7fc:	64 e1       	ldi	r22, 0x14	; 20
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	0e 94 94 06 	call	0xd28	; 0xd28 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("RPM:", 1);
     804:	61 e0       	ldi	r22, 0x01	; 1
     806:	8b e1       	ldi	r24, 0x1B	; 27
     808:	91 e0       	ldi	r25, 0x01	; 1
     80a:	0e 94 83 06 	call	0xd06	; 0xd06 <nokia_lcd_write_string>
     80e:	4a e0       	ldi	r20, 0x0A	; 10
     810:	66 e5       	ldi	r22, 0x56	; 86
     812:	73 e0       	ldi	r23, 0x03	; 3
     814:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <rpm>
     818:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <rpm+0x1>
     81c:	0e 94 9f 08 	call	0x113e	; 0x113e <__itoa_ncheck>
		itoa(rpm, &display_string, 10); //chamada da função para converter inteiros em string
		nokia_lcd_set_cursor(25, 20);
     820:	64 e1       	ldi	r22, 0x14	; 20
     822:	89 e1       	ldi	r24, 0x19	; 25
     824:	0e 94 94 06 	call	0xd28	; 0xd28 <nokia_lcd_set_cursor>
		nokia_lcd_write_string(display_string, 1);
     828:	61 e0       	ldi	r22, 0x01	; 1
     82a:	86 e5       	ldi	r24, 0x56	; 86
     82c:	93 e0       	ldi	r25, 0x03	; 3
     82e:	0e 94 83 06 	call	0xd06	; 0xd06 <nokia_lcd_write_string>
     832:	4a e0       	ldi	r20, 0x0A	; 10
     834:	66 e5       	ldi	r22, 0x56	; 86
     836:	73 e0       	ldi	r23, 0x03	; 3
     838:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     83c:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <__data_end+0x1>
     840:	0e 94 9f 08 	call	0x113e	; 0x113e <__itoa_ncheck>
		
		//SONAR
		itoa(distancia_delta_sonar, &display_string, 10); //chamada da função para converter inteiros em string
		nokia_lcd_set_cursor(60, 20);
     844:	64 e1       	ldi	r22, 0x14	; 20
     846:	8c e3       	ldi	r24, 0x3C	; 60
     848:	0e 94 94 06 	call	0xd28	; 0xd28 <nokia_lcd_set_cursor>
		nokia_lcd_write_string(display_string, 1);
     84c:	61 e0       	ldi	r22, 0x01	; 1
     84e:	86 e5       	ldi	r24, 0x56	; 86
     850:	93 e0       	ldi	r25, 0x03	; 3
     852:	0e 94 83 06 	call	0xd06	; 0xd06 <nokia_lcd_write_string>
     856:	4a e0       	ldi	r20, 0x0A	; 10
     858:	66 e5       	ldi	r22, 0x56	; 86
     85a:	73 e0       	ldi	r23, 0x03	; 3
     85c:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <dist>
     860:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <dist+0x1>
     864:	0e 94 9f 08 	call	0x113e	; 0x113e <__itoa_ncheck>
		
		itoa(dist, &display_string, 10); //chamada da função para converter inteiros em string
		nokia_lcd_set_cursor(50, 33);
     868:	61 e2       	ldi	r22, 0x21	; 33
     86a:	82 e3       	ldi	r24, 0x32	; 50
     86c:	0e 94 94 06 	call	0xd28	; 0xd28 <nokia_lcd_set_cursor>
		nokia_lcd_write_string(display_string, 2);
     870:	62 e0       	ldi	r22, 0x02	; 2
     872:	86 e5       	ldi	r24, 0x56	; 86
     874:	93 e0       	ldi	r25, 0x03	; 3
     876:	0e 94 83 06 	call	0xd06	; 0xd06 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(73, 35);
     87a:	63 e2       	ldi	r22, 0x23	; 35
     87c:	89 e4       	ldi	r24, 0x49	; 73
     87e:	0e 94 94 06 	call	0xd28	; 0xd28 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("Km", 1);
     882:	61 e0       	ldi	r22, 0x01	; 1
     884:	80 e2       	ldi	r24, 0x20	; 32
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	0e 94 83 06 	call	0xd06	; 0xd06 <nokia_lcd_write_string>
		
		nokia_lcd_set_cursor(0, 30);
     88c:	6e e1       	ldi	r22, 0x1E	; 30
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	0e 94 94 06 	call	0xd28	; 0xd28 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("ADC:", 1);
     894:	61 e0       	ldi	r22, 0x01	; 1
     896:	83 e2       	ldi	r24, 0x23	; 35
     898:	91 e0       	ldi	r25, 0x01	; 1
     89a:	0e 94 83 06 	call	0xd06	; 0xd06 <nokia_lcd_write_string>
     89e:	4a e0       	ldi	r20, 0x0A	; 10
     8a0:	66 e5       	ldi	r22, 0x56	; 86
     8a2:	73 e0       	ldi	r23, 0x03	; 3
     8a4:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <aux_pwm>
     8a8:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <aux_pwm+0x1>
     8ac:	0e 94 9f 08 	call	0x113e	; 0x113e <__itoa_ncheck>
		itoa(aux_pwm, &display_string, 10); //chamada da função para converter inteiros em string
		nokia_lcd_set_cursor(25, 30);
     8b0:	6e e1       	ldi	r22, 0x1E	; 30
     8b2:	89 e1       	ldi	r24, 0x19	; 25
     8b4:	0e 94 94 06 	call	0xd28	; 0xd28 <nokia_lcd_set_cursor>
		nokia_lcd_write_string(display_string, 1);
     8b8:	61 e0       	ldi	r22, 0x01	; 1
     8ba:	86 e5       	ldi	r24, 0x56	; 86
     8bc:	93 e0       	ldi	r25, 0x03	; 3
     8be:	0e 94 83 06 	call	0xd06	; 0xd06 <nokia_lcd_write_string>
				
		/*itoa(pqp, &display_string, 10); //chamada da função para converter inteiros em string
		nokia_lcd_set_cursor(0, 40);
		nokia_lcd_write_string(display_string, 1);*/
		
		if (pqp==5)
     8c2:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <pqp>
     8c6:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <pqp+0x1>
     8ca:	85 30       	cpi	r24, 0x05	; 5
     8cc:	91 05       	cpc	r25, r1
     8ce:	51 f4       	brne	.+20     	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
		{
			nokia_lcd_set_cursor(0, 40);
     8d0:	68 e2       	ldi	r22, 0x28	; 40
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	0e 94 94 06 	call	0xd28	; 0xd28 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("Modo:P", 1);
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	88 e2       	ldi	r24, 0x28	; 40
     8dc:	91 e0       	ldi	r25, 0x01	; 1
     8de:	0e 94 83 06 	call	0xd06	; 0xd06 <nokia_lcd_write_string>
     8e2:	18 c0       	rjmp	.+48     	; 0x914 <__stack+0x15>
		}
			else if (pqp==11)
     8e4:	8b 30       	cpi	r24, 0x0B	; 11
     8e6:	91 05       	cpc	r25, r1
     8e8:	51 f4       	brne	.+20     	; 0x8fe <__DATA_REGION_LENGTH__+0xfe>
			{
				nokia_lcd_set_cursor(0, 40);
     8ea:	68 e2       	ldi	r22, 0x28	; 40
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	0e 94 94 06 	call	0xd28	; 0xd28 <nokia_lcd_set_cursor>
				nokia_lcd_write_string("Modo:D", 1);
     8f2:	61 e0       	ldi	r22, 0x01	; 1
     8f4:	8f e2       	ldi	r24, 0x2F	; 47
     8f6:	91 e0       	ldi	r25, 0x01	; 1
     8f8:	0e 94 83 06 	call	0xd06	; 0xd06 <nokia_lcd_write_string>
     8fc:	0b c0       	rjmp	.+22     	; 0x914 <__stack+0x15>
			}
			else if (pqp==13)
     8fe:	0d 97       	sbiw	r24, 0x0d	; 13
     900:	49 f4       	brne	.+18     	; 0x914 <__stack+0x15>
			{
				nokia_lcd_set_cursor(0, 40);
     902:	68 e2       	ldi	r22, 0x28	; 40
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	0e 94 94 06 	call	0xd28	; 0xd28 <nokia_lcd_set_cursor>
				nokia_lcd_write_string("Modo:R", 1);
     90a:	61 e0       	ldi	r22, 0x01	; 1
     90c:	86 e3       	ldi	r24, 0x36	; 54
     90e:	91 e0       	ldi	r25, 0x01	; 1
     910:	0e 94 83 06 	call	0xd06	; 0xd06 <nokia_lcd_write_string>
			}
				
		nokia_lcd_render();
     914:	0e 94 99 06 	call	0xd32	; 0xd32 <nokia_lcd_render>
	
		PORTB &= 0b00000001;		
     918:	85 b1       	in	r24, 0x05	; 5
     91a:	81 70       	andi	r24, 0x01	; 1
     91c:	85 b9       	out	0x05, r24	; 5
		PORTB |= 0b11000000; // Zero é aceso e liga só o das unidades
     91e:	85 b1       	in	r24, 0x05	; 5
     920:	80 6c       	ori	r24, 0xC0	; 192
     922:	85 b9       	out	0x05, r24	; 5
		PORTB |= ((((velocidade/1)%10)*2) & 0b00011110);
     924:	45 b1       	in	r20, 0x05	; 5
     926:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <velocidade>
     92a:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <velocidade+0x1>
     92e:	9f 01       	movw	r18, r30
     930:	ad ec       	ldi	r26, 0xCD	; 205
     932:	bc ec       	ldi	r27, 0xCC	; 204
     934:	0e 94 90 08 	call	0x1120	; 0x1120 <__umulhisi3>
     938:	96 95       	lsr	r25
     93a:	87 95       	ror	r24
     93c:	96 95       	lsr	r25
     93e:	87 95       	ror	r24
     940:	96 95       	lsr	r25
     942:	87 95       	ror	r24
     944:	9c 01       	movw	r18, r24
     946:	22 0f       	add	r18, r18
     948:	33 1f       	adc	r19, r19
     94a:	88 0f       	add	r24, r24
     94c:	99 1f       	adc	r25, r25
     94e:	88 0f       	add	r24, r24
     950:	99 1f       	adc	r25, r25
     952:	88 0f       	add	r24, r24
     954:	99 1f       	adc	r25, r25
     956:	82 0f       	add	r24, r18
     958:	93 1f       	adc	r25, r19
     95a:	9f 01       	movw	r18, r30
     95c:	28 1b       	sub	r18, r24
     95e:	39 0b       	sbc	r19, r25
     960:	c9 01       	movw	r24, r18
     962:	88 0f       	add	r24, r24
     964:	8e 71       	andi	r24, 0x1E	; 30
     966:	84 2b       	or	r24, r20
     968:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     96a:	8f ed       	ldi	r24, 0xDF	; 223
     96c:	9e e2       	ldi	r25, 0x2E	; 46
     96e:	01 97       	sbiw	r24, 0x01	; 1
     970:	f1 f7       	brne	.-4      	; 0x96e <__stack+0x6f>
     972:	00 c0       	rjmp	.+0      	; 0x974 <__stack+0x75>
     974:	00 00       	nop
		_delay_ms(tem_delay);
		
		PORTB &= 0b00000001;
     976:	85 b1       	in	r24, 0x05	; 5
     978:	81 70       	andi	r24, 0x01	; 1
     97a:	85 b9       	out	0x05, r24	; 5
		PORTB |= 0b10100000;
     97c:	85 b1       	in	r24, 0x05	; 5
     97e:	80 6a       	ori	r24, 0xA0	; 160
     980:	85 b9       	out	0x05, r24	; 5
		PORTB |= ((((velocidade/10)%10)*2) & 0b00011110);
     982:	45 b1       	in	r20, 0x05	; 5
     984:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <velocidade>
     988:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <velocidade+0x1>
     98c:	0e 94 90 08 	call	0x1120	; 0x1120 <__umulhisi3>
     990:	fc 01       	movw	r30, r24
     992:	f6 95       	lsr	r31
     994:	e7 95       	ror	r30
     996:	f6 95       	lsr	r31
     998:	e7 95       	ror	r30
     99a:	f6 95       	lsr	r31
     99c:	e7 95       	ror	r30
     99e:	9f 01       	movw	r18, r30
     9a0:	0e 94 90 08 	call	0x1120	; 0x1120 <__umulhisi3>
     9a4:	96 95       	lsr	r25
     9a6:	87 95       	ror	r24
     9a8:	96 95       	lsr	r25
     9aa:	87 95       	ror	r24
     9ac:	96 95       	lsr	r25
     9ae:	87 95       	ror	r24
     9b0:	9c 01       	movw	r18, r24
     9b2:	22 0f       	add	r18, r18
     9b4:	33 1f       	adc	r19, r19
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	88 0f       	add	r24, r24
     9bc:	99 1f       	adc	r25, r25
     9be:	88 0f       	add	r24, r24
     9c0:	99 1f       	adc	r25, r25
     9c2:	82 0f       	add	r24, r18
     9c4:	93 1f       	adc	r25, r19
     9c6:	9f 01       	movw	r18, r30
     9c8:	28 1b       	sub	r18, r24
     9ca:	39 0b       	sbc	r19, r25
     9cc:	c9 01       	movw	r24, r18
     9ce:	88 0f       	add	r24, r24
     9d0:	8e 71       	andi	r24, 0x1E	; 30
     9d2:	84 2b       	or	r24, r20
     9d4:	85 b9       	out	0x05, r24	; 5
     9d6:	8f ed       	ldi	r24, 0xDF	; 223
     9d8:	9e e2       	ldi	r25, 0x2E	; 46
     9da:	01 97       	sbiw	r24, 0x01	; 1
     9dc:	f1 f7       	brne	.-4      	; 0x9da <__stack+0xdb>
     9de:	00 c0       	rjmp	.+0      	; 0x9e0 <__stack+0xe1>
     9e0:	00 00       	nop
		_delay_ms(tem_delay);
		
		PORTB &= 0b00000001;
     9e2:	85 b1       	in	r24, 0x05	; 5
     9e4:	81 70       	andi	r24, 0x01	; 1
     9e6:	85 b9       	out	0x05, r24	; 5
		PORTB |= 0b01100000;
     9e8:	85 b1       	in	r24, 0x05	; 5
     9ea:	80 66       	ori	r24, 0x60	; 96
     9ec:	85 b9       	out	0x05, r24	; 5
		PORTB |= ((((velocidade/100)%10)*2) & 0b00011110);
     9ee:	45 b1       	in	r20, 0x05	; 5
     9f0:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <velocidade>
     9f4:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <velocidade+0x1>
     9f8:	36 95       	lsr	r19
     9fa:	27 95       	ror	r18
     9fc:	36 95       	lsr	r19
     9fe:	27 95       	ror	r18
     a00:	ab e7       	ldi	r26, 0x7B	; 123
     a02:	b4 e1       	ldi	r27, 0x14	; 20
     a04:	0e 94 90 08 	call	0x1120	; 0x1120 <__umulhisi3>
     a08:	fc 01       	movw	r30, r24
     a0a:	f6 95       	lsr	r31
     a0c:	e7 95       	ror	r30
     a0e:	9f 01       	movw	r18, r30
     a10:	ad ec       	ldi	r26, 0xCD	; 205
     a12:	bc ec       	ldi	r27, 0xCC	; 204
     a14:	0e 94 90 08 	call	0x1120	; 0x1120 <__umulhisi3>
     a18:	96 95       	lsr	r25
     a1a:	87 95       	ror	r24
     a1c:	96 95       	lsr	r25
     a1e:	87 95       	ror	r24
     a20:	96 95       	lsr	r25
     a22:	87 95       	ror	r24
     a24:	9c 01       	movw	r18, r24
     a26:	22 0f       	add	r18, r18
     a28:	33 1f       	adc	r19, r19
     a2a:	88 0f       	add	r24, r24
     a2c:	99 1f       	adc	r25, r25
     a2e:	88 0f       	add	r24, r24
     a30:	99 1f       	adc	r25, r25
     a32:	88 0f       	add	r24, r24
     a34:	99 1f       	adc	r25, r25
     a36:	82 0f       	add	r24, r18
     a38:	93 1f       	adc	r25, r19
     a3a:	9f 01       	movw	r18, r30
     a3c:	28 1b       	sub	r18, r24
     a3e:	39 0b       	sbc	r19, r25
     a40:	c9 01       	movw	r24, r18
     a42:	88 0f       	add	r24, r24
     a44:	8e 71       	andi	r24, 0x1E	; 30
     a46:	84 2b       	or	r24, r20
     a48:	85 b9       	out	0x05, r24	; 5
     a4a:	8f ed       	ldi	r24, 0xDF	; 223
     a4c:	9e e2       	ldi	r25, 0x2E	; 46
     a4e:	01 97       	sbiw	r24, 0x01	; 1
     a50:	f1 f7       	brne	.-4      	; 0xa4e <__stack+0x14f>
     a52:	00 c0       	rjmp	.+0      	; 0xa54 <__stack+0x155>
     a54:	00 00       	nop
     a56:	54 ce       	rjmp	.-856    	; 0x700 <main+0xca>

00000a58 <write>:
		nokia_lcd.screen[i] = 0x00;
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
     a58:	98 b1       	in	r25, 0x08	; 8
     a5a:	9d 7f       	andi	r25, 0xFD	; 253
     a5c:	98 b9       	out	0x08, r25	; 8
     a5e:	66 23       	and	r22, r22
     a60:	29 f0       	breq	.+10     	; 0xa6c <write+0x14>
     a62:	98 b1       	in	r25, 0x08	; 8
     a64:	98 60       	ori	r25, 0x08	; 8
     a66:	98 b9       	out	0x08, r25	; 8
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	1f c0       	rjmp	.+62     	; 0xaaa <write+0x52>
     a6c:	98 b1       	in	r25, 0x08	; 8
     a6e:	97 7f       	andi	r25, 0xF7	; 247
     a70:	98 b9       	out	0x08, r25	; 8
     a72:	fa cf       	rjmp	.-12     	; 0xa68 <write+0x10>
     a74:	47 e0       	ldi	r20, 0x07	; 7
     a76:	50 e0       	ldi	r21, 0x00	; 0
     a78:	49 1b       	sub	r20, r25
     a7a:	51 09       	sbc	r21, r1
     a7c:	28 2f       	mov	r18, r24
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	02 c0       	rjmp	.+4      	; 0xa86 <write+0x2e>
     a82:	35 95       	asr	r19
     a84:	27 95       	ror	r18
     a86:	4a 95       	dec	r20
     a88:	e2 f7       	brpl	.-8      	; 0xa82 <write+0x2a>
     a8a:	20 ff       	sbrs	r18, 0
     a8c:	04 c0       	rjmp	.+8      	; 0xa96 <write+0x3e>
     a8e:	28 b1       	in	r18, 0x08	; 8
     a90:	20 61       	ori	r18, 0x10	; 16
     a92:	28 b9       	out	0x08, r18	; 8
     a94:	03 c0       	rjmp	.+6      	; 0xa9c <write+0x44>
     a96:	28 b1       	in	r18, 0x08	; 8
     a98:	2f 7e       	andi	r18, 0xEF	; 239
     a9a:	28 b9       	out	0x08, r18	; 8
     a9c:	28 b1       	in	r18, 0x08	; 8
     a9e:	20 62       	ori	r18, 0x20	; 32
     aa0:	28 b9       	out	0x08, r18	; 8
     aa2:	28 b1       	in	r18, 0x08	; 8
     aa4:	2f 7d       	andi	r18, 0xDF	; 223
     aa6:	28 b9       	out	0x08, r18	; 8
     aa8:	9f 5f       	subi	r25, 0xFF	; 255
     aaa:	98 30       	cpi	r25, 0x08	; 8
     aac:	18 f3       	brcs	.-58     	; 0xa74 <write+0x1c>
     aae:	88 b1       	in	r24, 0x08	; 8
     ab0:	82 60       	ori	r24, 0x02	; 2
     ab2:	88 b9       	out	0x08, r24	; 8
     ab4:	08 95       	ret

00000ab6 <write_cmd>:
     ab6:	60 e0       	ldi	r22, 0x00	; 0
     ab8:	0e 94 2c 05 	call	0xa58	; 0xa58 <write>
     abc:	08 95       	ret

00000abe <write_data>:
     abe:	61 e0       	ldi	r22, 0x01	; 1
     ac0:	0e 94 2c 05 	call	0xa58	; 0xa58 <write>
     ac4:	08 95       	ret

00000ac6 <nokia_lcd_init>:
     ac6:	cf 93       	push	r28
     ac8:	df 93       	push	r29
     aca:	87 b1       	in	r24, 0x07	; 7
     acc:	82 60       	ori	r24, 0x02	; 2
     ace:	87 b9       	out	0x07, r24	; 7
     ad0:	87 b1       	in	r24, 0x07	; 7
     ad2:	84 60       	ori	r24, 0x04	; 4
     ad4:	87 b9       	out	0x07, r24	; 7
     ad6:	87 b1       	in	r24, 0x07	; 7
     ad8:	88 60       	ori	r24, 0x08	; 8
     ada:	87 b9       	out	0x07, r24	; 7
     adc:	87 b1       	in	r24, 0x07	; 7
     ade:	80 61       	ori	r24, 0x10	; 16
     ae0:	87 b9       	out	0x07, r24	; 7
     ae2:	87 b1       	in	r24, 0x07	; 7
     ae4:	80 62       	ori	r24, 0x20	; 32
     ae6:	87 b9       	out	0x07, r24	; 7
     ae8:	88 b1       	in	r24, 0x08	; 8
     aea:	84 60       	ori	r24, 0x04	; 4
     aec:	88 b9       	out	0x08, r24	; 8
     aee:	88 b1       	in	r24, 0x08	; 8
     af0:	82 60       	ori	r24, 0x02	; 2
     af2:	88 b9       	out	0x08, r24	; 8
     af4:	83 ec       	ldi	r24, 0xC3	; 195
     af6:	99 e0       	ldi	r25, 0x09	; 9
     af8:	01 97       	sbiw	r24, 0x01	; 1
     afa:	f1 f7       	brne	.-4      	; 0xaf8 <nokia_lcd_init+0x32>
     afc:	00 c0       	rjmp	.+0      	; 0xafe <nokia_lcd_init+0x38>
     afe:	00 00       	nop
     b00:	88 b1       	in	r24, 0x08	; 8
     b02:	8b 7f       	andi	r24, 0xFB	; 251
     b04:	88 b9       	out	0x08, r24	; 8
     b06:	8b e5       	ldi	r24, 0x5B	; 91
     b08:	94 e4       	ldi	r25, 0x44	; 68
     b0a:	01 97       	sbiw	r24, 0x01	; 1
     b0c:	f1 f7       	brne	.-4      	; 0xb0a <nokia_lcd_init+0x44>
     b0e:	00 c0       	rjmp	.+0      	; 0xb10 <nokia_lcd_init+0x4a>
     b10:	00 00       	nop
     b12:	88 b1       	in	r24, 0x08	; 8
     b14:	84 60       	ori	r24, 0x04	; 4
     b16:	88 b9       	out	0x08, r24	; 8
     b18:	88 b1       	in	r24, 0x08	; 8
     b1a:	8d 7f       	andi	r24, 0xFD	; 253
     b1c:	88 b9       	out	0x08, r24	; 8
     b1e:	81 e2       	ldi	r24, 0x21	; 33
     b20:	0e 94 5b 05 	call	0xab6	; 0xab6 <write_cmd>
     b24:	83 e1       	ldi	r24, 0x13	; 19
     b26:	0e 94 5b 05 	call	0xab6	; 0xab6 <write_cmd>
     b2a:	86 e0       	ldi	r24, 0x06	; 6
     b2c:	0e 94 5b 05 	call	0xab6	; 0xab6 <write_cmd>
     b30:	82 ec       	ldi	r24, 0xC2	; 194
     b32:	0e 94 5b 05 	call	0xab6	; 0xab6 <write_cmd>
     b36:	80 e2       	ldi	r24, 0x20	; 32
     b38:	0e 94 5b 05 	call	0xab6	; 0xab6 <write_cmd>
     b3c:	89 e0       	ldi	r24, 0x09	; 9
     b3e:	0e 94 5b 05 	call	0xab6	; 0xab6 <write_cmd>
     b42:	80 e8       	ldi	r24, 0x80	; 128
     b44:	0e 94 5b 05 	call	0xab6	; 0xab6 <write_cmd>
     b48:	80 e4       	ldi	r24, 0x40	; 64
     b4a:	0e 94 5b 05 	call	0xab6	; 0xab6 <write_cmd>
     b4e:	c0 e0       	ldi	r28, 0x00	; 0
     b50:	d0 e0       	ldi	r29, 0x00	; 0
     b52:	04 c0       	rjmp	.+8      	; 0xb5c <nokia_lcd_init+0x96>
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	0e 94 5f 05 	call	0xabe	; 0xabe <write_data>
     b5a:	21 96       	adiw	r28, 0x01	; 1
     b5c:	c8 3f       	cpi	r28, 0xF8	; 248
     b5e:	91 e0       	ldi	r25, 0x01	; 1
     b60:	d9 07       	cpc	r29, r25
     b62:	c0 f3       	brcs	.-16     	; 0xb54 <nokia_lcd_init+0x8e>
     b64:	88 e0       	ldi	r24, 0x08	; 8
     b66:	0e 94 5b 05 	call	0xab6	; 0xab6 <write_cmd>
     b6a:	8c e0       	ldi	r24, 0x0C	; 12
     b6c:	0e 94 5b 05 	call	0xab6	; 0xab6 <write_cmd>
     b70:	df 91       	pop	r29
     b72:	cf 91       	pop	r28
     b74:	08 95       	ret

00000b76 <nokia_lcd_clear>:
     b76:	80 e8       	ldi	r24, 0x80	; 128
     b78:	0e 94 5b 05 	call	0xab6	; 0xab6 <write_cmd>
     b7c:	80 e4       	ldi	r24, 0x40	; 64
     b7e:	0e 94 5b 05 	call	0xab6	; 0xab6 <write_cmd>
     b82:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <nokia_lcd+0x1f8>
     b86:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <nokia_lcd+0x1f9>
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	05 c0       	rjmp	.+10     	; 0xb9a <nokia_lcd_clear+0x24>
     b90:	fc 01       	movw	r30, r24
     b92:	e4 5a       	subi	r30, 0xA4	; 164
     b94:	fe 4f       	sbci	r31, 0xFE	; 254
     b96:	10 82       	st	Z, r1
     b98:	01 96       	adiw	r24, 0x01	; 1
     b9a:	88 3f       	cpi	r24, 0xF8	; 248
     b9c:	21 e0       	ldi	r18, 0x01	; 1
     b9e:	92 07       	cpc	r25, r18
     ba0:	b8 f3       	brcs	.-18     	; 0xb90 <nokia_lcd_clear+0x1a>
     ba2:	08 95       	ret

00000ba4 <nokia_lcd_set_pixel>:
}

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
     ba4:	26 2f       	mov	r18, r22
     ba6:	26 95       	lsr	r18
     ba8:	26 95       	lsr	r18
     baa:	26 95       	lsr	r18
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	34 e5       	ldi	r19, 0x54	; 84
     bb0:	23 9f       	mul	r18, r19
     bb2:	80 0d       	add	r24, r0
     bb4:	91 1d       	adc	r25, r1
     bb6:	11 24       	eor	r1, r1
	if (value)
     bb8:	44 23       	and	r20, r20
     bba:	79 f0       	breq	.+30     	; 0xbda <nokia_lcd_set_pixel+0x36>
		*byte |= (1 << (y % 8));
     bbc:	67 70       	andi	r22, 0x07	; 7
     bbe:	21 e0       	ldi	r18, 0x01	; 1
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	02 c0       	rjmp	.+4      	; 0xbc8 <nokia_lcd_set_pixel+0x24>
     bc4:	22 0f       	add	r18, r18
     bc6:	33 1f       	adc	r19, r19
     bc8:	6a 95       	dec	r22
     bca:	e2 f7       	brpl	.-8      	; 0xbc4 <nokia_lcd_set_pixel+0x20>
     bcc:	fc 01       	movw	r30, r24
     bce:	e4 5a       	subi	r30, 0xA4	; 164
     bd0:	fe 4f       	sbci	r31, 0xFE	; 254
     bd2:	80 81       	ld	r24, Z
     bd4:	28 2b       	or	r18, r24
     bd6:	20 83       	st	Z, r18
     bd8:	08 95       	ret
	else
		*byte &= ~(1 << (y %8 ));
     bda:	67 70       	andi	r22, 0x07	; 7
     bdc:	21 e0       	ldi	r18, 0x01	; 1
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	02 c0       	rjmp	.+4      	; 0xbe6 <nokia_lcd_set_pixel+0x42>
     be2:	22 0f       	add	r18, r18
     be4:	33 1f       	adc	r19, r19
     be6:	6a 95       	dec	r22
     be8:	e2 f7       	brpl	.-8      	; 0xbe2 <nokia_lcd_set_pixel+0x3e>
     bea:	fc 01       	movw	r30, r24
     bec:	e4 5a       	subi	r30, 0xA4	; 164
     bee:	fe 4f       	sbci	r31, 0xFE	; 254
     bf0:	20 95       	com	r18
     bf2:	80 81       	ld	r24, Z
     bf4:	28 23       	and	r18, r24
     bf6:	20 83       	st	Z, r18
     bf8:	08 95       	ret

00000bfa <nokia_lcd_write_char>:
}

void nokia_lcd_write_char(char code, uint8_t scale)
{
     bfa:	ef 92       	push	r14
     bfc:	ff 92       	push	r15
     bfe:	0f 93       	push	r16
     c00:	1f 93       	push	r17
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
     c06:	e8 2e       	mov	r14, r24
     c08:	f6 2e       	mov	r15, r22
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
     c0a:	00 e0       	ldi	r16, 0x00	; 0
     c0c:	45 c0       	rjmp	.+138    	; 0xc98 <nokia_lcd_write_char+0x9e>
		for (y = 0; y < 7*scale; y++)
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
     c0e:	2e 2d       	mov	r18, r14
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	20 52       	subi	r18, 0x20	; 32
     c14:	31 09       	sbc	r19, r1
     c16:	80 2f       	mov	r24, r16
     c18:	6f 2d       	mov	r22, r15
     c1a:	0e 94 4e 08 	call	0x109c	; 0x109c <__udivmodqi4>
     c1e:	f9 01       	movw	r30, r18
     c20:	ee 0f       	add	r30, r30
     c22:	ff 1f       	adc	r31, r31
     c24:	ee 0f       	add	r30, r30
     c26:	ff 1f       	adc	r31, r31
     c28:	e2 0f       	add	r30, r18
     c2a:	f3 1f       	adc	r31, r19
     c2c:	e8 0f       	add	r30, r24
     c2e:	f1 1d       	adc	r31, r1
     c30:	e8 59       	subi	r30, 0x98	; 152
     c32:	ff 4f       	sbci	r31, 0xFF	; 255
     c34:	e4 91       	lpm	r30, Z
     c36:	81 2f       	mov	r24, r17
     c38:	0e 94 4e 08 	call	0x109c	; 0x109c <__udivmodqi4>
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <nokia_lcd_write_char+0x4a>
     c40:	f5 95       	asr	r31
     c42:	e7 95       	ror	r30
     c44:	8a 95       	dec	r24
     c46:	e2 f7       	brpl	.-8      	; 0xc40 <nokia_lcd_write_char+0x46>
     c48:	e0 ff       	sbrs	r30, 0
     c4a:	0a c0       	rjmp	.+20     	; 0xc60 <nokia_lcd_write_char+0x66>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
     c4c:	60 91 55 03 	lds	r22, 0x0355	; 0x800355 <nokia_lcd+0x1f9>
     c50:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <nokia_lcd+0x1f8>
     c54:	61 0f       	add	r22, r17
     c56:	41 e0       	ldi	r20, 0x01	; 1
     c58:	80 0f       	add	r24, r16
     c5a:	0e 94 d2 05 	call	0xba4	; 0xba4 <nokia_lcd_set_pixel>
     c5e:	09 c0       	rjmp	.+18     	; 0xc72 <nokia_lcd_write_char+0x78>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
     c60:	60 91 55 03 	lds	r22, 0x0355	; 0x800355 <nokia_lcd+0x1f9>
     c64:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <nokia_lcd+0x1f8>
     c68:	61 0f       	add	r22, r17
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	80 0f       	add	r24, r16
     c6e:	0e 94 d2 05 	call	0xba4	; 0xba4 <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
     c72:	1f 5f       	subi	r17, 0xFF	; 255
     c74:	01 c0       	rjmp	.+2      	; 0xc78 <nokia_lcd_write_char+0x7e>
     c76:	10 e0       	ldi	r17, 0x00	; 0
     c78:	21 2f       	mov	r18, r17
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	ce 01       	movw	r24, r28
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	88 0f       	add	r24, r24
     c88:	99 1f       	adc	r25, r25
     c8a:	8c 1b       	sub	r24, r28
     c8c:	9d 0b       	sbc	r25, r29
     c8e:	28 17       	cp	r18, r24
     c90:	39 07       	cpc	r19, r25
     c92:	0c f4       	brge	.+2      	; 0xc96 <nokia_lcd_write_char+0x9c>
     c94:	bc cf       	rjmp	.-136    	; 0xc0e <nokia_lcd_write_char+0x14>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
     c96:	0f 5f       	subi	r16, 0xFF	; 255
     c98:	20 2f       	mov	r18, r16
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	cf 2d       	mov	r28, r15
     c9e:	d0 e0       	ldi	r29, 0x00	; 0
     ca0:	ce 01       	movw	r24, r28
     ca2:	88 0f       	add	r24, r24
     ca4:	99 1f       	adc	r25, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	8c 0f       	add	r24, r28
     cac:	9d 1f       	adc	r25, r29
     cae:	28 17       	cp	r18, r24
     cb0:	39 07       	cpc	r19, r25
     cb2:	0c f3       	brlt	.-62     	; 0xc76 <nokia_lcd_write_char+0x7c>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
     cb4:	e4 e5       	ldi	r30, 0x54	; 84
     cb6:	f3 e0       	ldi	r31, 0x03	; 3
     cb8:	8f 2d       	mov	r24, r15
     cba:	88 0f       	add	r24, r24
     cbc:	88 0f       	add	r24, r24
     cbe:	8f 0d       	add	r24, r15
     cc0:	90 81       	ld	r25, Z
     cc2:	89 0f       	add	r24, r25
     cc4:	8f 5f       	subi	r24, 0xFF	; 255
     cc6:	80 83       	st	Z, r24
	if (nokia_lcd.cursor_x >= 84) {
     cc8:	84 35       	cpi	r24, 0x54	; 84
     cca:	70 f0       	brcs	.+28     	; 0xce8 <nokia_lcd_write_char+0xee>
		nokia_lcd.cursor_x = 0;
     ccc:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y += 7*scale + 1;
     cd0:	e5 e5       	ldi	r30, 0x55	; 85
     cd2:	f3 e0       	ldi	r31, 0x03	; 3
     cd4:	8f 2d       	mov	r24, r15
     cd6:	88 0f       	add	r24, r24
     cd8:	88 0f       	add	r24, r24
     cda:	88 0f       	add	r24, r24
     cdc:	98 2f       	mov	r25, r24
     cde:	9f 19       	sub	r25, r15
     ce0:	80 81       	ld	r24, Z
     ce2:	89 0f       	add	r24, r25
     ce4:	8f 5f       	subi	r24, 0xFF	; 255
     ce6:	80 83       	st	Z, r24
	}
	if (nokia_lcd.cursor_y >= 48) {
     ce8:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <nokia_lcd+0x1f9>
     cec:	80 33       	cpi	r24, 0x30	; 48
     cee:	20 f0       	brcs	.+8      	; 0xcf8 <nokia_lcd_write_char+0xfe>
		nokia_lcd.cursor_x = 0;
     cf0:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y = 0;
     cf4:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <nokia_lcd+0x1f9>
	}
}
     cf8:	df 91       	pop	r29
     cfa:	cf 91       	pop	r28
     cfc:	1f 91       	pop	r17
     cfe:	0f 91       	pop	r16
     d00:	ff 90       	pop	r15
     d02:	ef 90       	pop	r14
     d04:	08 95       	ret

00000d06 <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
     d06:	1f 93       	push	r17
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	ec 01       	movw	r28, r24
     d0e:	16 2f       	mov	r17, r22
	while(*str)
     d10:	04 c0       	rjmp	.+8      	; 0xd1a <nokia_lcd_write_string+0x14>
		nokia_lcd_write_char(*str++, scale);
     d12:	21 96       	adiw	r28, 0x01	; 1
     d14:	61 2f       	mov	r22, r17
     d16:	0e 94 fd 05 	call	0xbfa	; 0xbfa <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
     d1a:	88 81       	ld	r24, Y
     d1c:	81 11       	cpse	r24, r1
     d1e:	f9 cf       	rjmp	.-14     	; 0xd12 <nokia_lcd_write_string+0xc>
		nokia_lcd_write_char(*str++, scale);
}
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	1f 91       	pop	r17
     d26:	08 95       	ret

00000d28 <nokia_lcd_set_cursor>:

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
     d28:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <nokia_lcd+0x1f8>
	nokia_lcd.cursor_y = y;
     d2c:	60 93 55 03 	sts	0x0355, r22	; 0x800355 <nokia_lcd+0x1f9>
     d30:	08 95       	ret

00000d32 <nokia_lcd_render>:
}

void nokia_lcd_render(void)
{
     d32:	cf 93       	push	r28
     d34:	df 93       	push	r29
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
     d36:	80 e8       	ldi	r24, 0x80	; 128
     d38:	0e 94 5b 05 	call	0xab6	; 0xab6 <write_cmd>
	write_cmd(0x40);
     d3c:	80 e4       	ldi	r24, 0x40	; 64
     d3e:	0e 94 5b 05 	call	0xab6	; 0xab6 <write_cmd>

	/* Write screen to display */
	for (i = 0; i < 504; i++)
     d42:	c0 e0       	ldi	r28, 0x00	; 0
     d44:	d0 e0       	ldi	r29, 0x00	; 0
     d46:	07 c0       	rjmp	.+14     	; 0xd56 <nokia_lcd_render+0x24>
		write_data(nokia_lcd.screen[i]);
     d48:	fe 01       	movw	r30, r28
     d4a:	e4 5a       	subi	r30, 0xA4	; 164
     d4c:	fe 4f       	sbci	r31, 0xFE	; 254
     d4e:	80 81       	ld	r24, Z
     d50:	0e 94 5f 05 	call	0xabe	; 0xabe <write_data>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
     d54:	21 96       	adiw	r28, 0x01	; 1
     d56:	c8 3f       	cpi	r28, 0xF8	; 248
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	d8 07       	cpc	r29, r24
     d5c:	a8 f3       	brcs	.-22     	; 0xd48 <nokia_lcd_render+0x16>
		write_data(nokia_lcd.screen[i]);
}
     d5e:	df 91       	pop	r29
     d60:	cf 91       	pop	r28
     d62:	08 95       	ret

00000d64 <__divsf3>:
     d64:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__divsf3x>
     d68:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <__fp_round>
     d6c:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fp_pscB>
     d70:	58 f0       	brcs	.+22     	; 0xd88 <__divsf3+0x24>
     d72:	0e 94 99 07 	call	0xf32	; 0xf32 <__fp_pscA>
     d76:	40 f0       	brcs	.+16     	; 0xd88 <__divsf3+0x24>
     d78:	29 f4       	brne	.+10     	; 0xd84 <__divsf3+0x20>
     d7a:	5f 3f       	cpi	r21, 0xFF	; 255
     d7c:	29 f0       	breq	.+10     	; 0xd88 <__divsf3+0x24>
     d7e:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__fp_inf>
     d82:	51 11       	cpse	r21, r1
     d84:	0c 94 db 07 	jmp	0xfb6	; 0xfb6 <__fp_szero>
     d88:	0c 94 96 07 	jmp	0xf2c	; 0xf2c <__fp_nan>

00000d8c <__divsf3x>:
     d8c:	0e 94 b8 07 	call	0xf70	; 0xf70 <__fp_split3>
     d90:	68 f3       	brcs	.-38     	; 0xd6c <__divsf3+0x8>

00000d92 <__divsf3_pse>:
     d92:	99 23       	and	r25, r25
     d94:	b1 f3       	breq	.-20     	; 0xd82 <__divsf3+0x1e>
     d96:	55 23       	and	r21, r21
     d98:	91 f3       	breq	.-28     	; 0xd7e <__divsf3+0x1a>
     d9a:	95 1b       	sub	r25, r21
     d9c:	55 0b       	sbc	r21, r21
     d9e:	bb 27       	eor	r27, r27
     da0:	aa 27       	eor	r26, r26
     da2:	62 17       	cp	r22, r18
     da4:	73 07       	cpc	r23, r19
     da6:	84 07       	cpc	r24, r20
     da8:	38 f0       	brcs	.+14     	; 0xdb8 <__divsf3_pse+0x26>
     daa:	9f 5f       	subi	r25, 0xFF	; 255
     dac:	5f 4f       	sbci	r21, 0xFF	; 255
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	aa 1f       	adc	r26, r26
     db6:	a9 f3       	breq	.-22     	; 0xda2 <__divsf3_pse+0x10>
     db8:	35 d0       	rcall	.+106    	; 0xe24 <__divsf3_pse+0x92>
     dba:	0e 2e       	mov	r0, r30
     dbc:	3a f0       	brmi	.+14     	; 0xdcc <__divsf3_pse+0x3a>
     dbe:	e0 e8       	ldi	r30, 0x80	; 128
     dc0:	32 d0       	rcall	.+100    	; 0xe26 <__divsf3_pse+0x94>
     dc2:	91 50       	subi	r25, 0x01	; 1
     dc4:	50 40       	sbci	r21, 0x00	; 0
     dc6:	e6 95       	lsr	r30
     dc8:	00 1c       	adc	r0, r0
     dca:	ca f7       	brpl	.-14     	; 0xdbe <__divsf3_pse+0x2c>
     dcc:	2b d0       	rcall	.+86     	; 0xe24 <__divsf3_pse+0x92>
     dce:	fe 2f       	mov	r31, r30
     dd0:	29 d0       	rcall	.+82     	; 0xe24 <__divsf3_pse+0x92>
     dd2:	66 0f       	add	r22, r22
     dd4:	77 1f       	adc	r23, r23
     dd6:	88 1f       	adc	r24, r24
     dd8:	bb 1f       	adc	r27, r27
     dda:	26 17       	cp	r18, r22
     ddc:	37 07       	cpc	r19, r23
     dde:	48 07       	cpc	r20, r24
     de0:	ab 07       	cpc	r26, r27
     de2:	b0 e8       	ldi	r27, 0x80	; 128
     de4:	09 f0       	breq	.+2      	; 0xde8 <__divsf3_pse+0x56>
     de6:	bb 0b       	sbc	r27, r27
     de8:	80 2d       	mov	r24, r0
     dea:	bf 01       	movw	r22, r30
     dec:	ff 27       	eor	r31, r31
     dee:	93 58       	subi	r25, 0x83	; 131
     df0:	5f 4f       	sbci	r21, 0xFF	; 255
     df2:	3a f0       	brmi	.+14     	; 0xe02 <__divsf3_pse+0x70>
     df4:	9e 3f       	cpi	r25, 0xFE	; 254
     df6:	51 05       	cpc	r21, r1
     df8:	78 f0       	brcs	.+30     	; 0xe18 <__divsf3_pse+0x86>
     dfa:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__fp_inf>
     dfe:	0c 94 db 07 	jmp	0xfb6	; 0xfb6 <__fp_szero>
     e02:	5f 3f       	cpi	r21, 0xFF	; 255
     e04:	e4 f3       	brlt	.-8      	; 0xdfe <__divsf3_pse+0x6c>
     e06:	98 3e       	cpi	r25, 0xE8	; 232
     e08:	d4 f3       	brlt	.-12     	; 0xdfe <__divsf3_pse+0x6c>
     e0a:	86 95       	lsr	r24
     e0c:	77 95       	ror	r23
     e0e:	67 95       	ror	r22
     e10:	b7 95       	ror	r27
     e12:	f7 95       	ror	r31
     e14:	9f 5f       	subi	r25, 0xFF	; 255
     e16:	c9 f7       	brne	.-14     	; 0xe0a <__divsf3_pse+0x78>
     e18:	88 0f       	add	r24, r24
     e1a:	91 1d       	adc	r25, r1
     e1c:	96 95       	lsr	r25
     e1e:	87 95       	ror	r24
     e20:	97 f9       	bld	r25, 7
     e22:	08 95       	ret
     e24:	e1 e0       	ldi	r30, 0x01	; 1
     e26:	66 0f       	add	r22, r22
     e28:	77 1f       	adc	r23, r23
     e2a:	88 1f       	adc	r24, r24
     e2c:	bb 1f       	adc	r27, r27
     e2e:	62 17       	cp	r22, r18
     e30:	73 07       	cpc	r23, r19
     e32:	84 07       	cpc	r24, r20
     e34:	ba 07       	cpc	r27, r26
     e36:	20 f0       	brcs	.+8      	; 0xe40 <__divsf3_pse+0xae>
     e38:	62 1b       	sub	r22, r18
     e3a:	73 0b       	sbc	r23, r19
     e3c:	84 0b       	sbc	r24, r20
     e3e:	ba 0b       	sbc	r27, r26
     e40:	ee 1f       	adc	r30, r30
     e42:	88 f7       	brcc	.-30     	; 0xe26 <__divsf3_pse+0x94>
     e44:	e0 95       	com	r30
     e46:	08 95       	ret

00000e48 <__fixunssfsi>:
     e48:	0e 94 c0 07 	call	0xf80	; 0xf80 <__fp_splitA>
     e4c:	88 f0       	brcs	.+34     	; 0xe70 <__fixunssfsi+0x28>
     e4e:	9f 57       	subi	r25, 0x7F	; 127
     e50:	98 f0       	brcs	.+38     	; 0xe78 <__fixunssfsi+0x30>
     e52:	b9 2f       	mov	r27, r25
     e54:	99 27       	eor	r25, r25
     e56:	b7 51       	subi	r27, 0x17	; 23
     e58:	b0 f0       	brcs	.+44     	; 0xe86 <__fixunssfsi+0x3e>
     e5a:	e1 f0       	breq	.+56     	; 0xe94 <__fixunssfsi+0x4c>
     e5c:	66 0f       	add	r22, r22
     e5e:	77 1f       	adc	r23, r23
     e60:	88 1f       	adc	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	1a f0       	brmi	.+6      	; 0xe6c <__fixunssfsi+0x24>
     e66:	ba 95       	dec	r27
     e68:	c9 f7       	brne	.-14     	; 0xe5c <__fixunssfsi+0x14>
     e6a:	14 c0       	rjmp	.+40     	; 0xe94 <__fixunssfsi+0x4c>
     e6c:	b1 30       	cpi	r27, 0x01	; 1
     e6e:	91 f0       	breq	.+36     	; 0xe94 <__fixunssfsi+0x4c>
     e70:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__fp_zero>
     e74:	b1 e0       	ldi	r27, 0x01	; 1
     e76:	08 95       	ret
     e78:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <__fp_zero>
     e7c:	67 2f       	mov	r22, r23
     e7e:	78 2f       	mov	r23, r24
     e80:	88 27       	eor	r24, r24
     e82:	b8 5f       	subi	r27, 0xF8	; 248
     e84:	39 f0       	breq	.+14     	; 0xe94 <__fixunssfsi+0x4c>
     e86:	b9 3f       	cpi	r27, 0xF9	; 249
     e88:	cc f3       	brlt	.-14     	; 0xe7c <__fixunssfsi+0x34>
     e8a:	86 95       	lsr	r24
     e8c:	77 95       	ror	r23
     e8e:	67 95       	ror	r22
     e90:	b3 95       	inc	r27
     e92:	d9 f7       	brne	.-10     	; 0xe8a <__fixunssfsi+0x42>
     e94:	3e f4       	brtc	.+14     	; 0xea4 <__fixunssfsi+0x5c>
     e96:	90 95       	com	r25
     e98:	80 95       	com	r24
     e9a:	70 95       	com	r23
     e9c:	61 95       	neg	r22
     e9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ea0:	8f 4f       	sbci	r24, 0xFF	; 255
     ea2:	9f 4f       	sbci	r25, 0xFF	; 255
     ea4:	08 95       	ret

00000ea6 <__floatunsisf>:
     ea6:	e8 94       	clt
     ea8:	09 c0       	rjmp	.+18     	; 0xebc <__floatsisf+0x12>

00000eaa <__floatsisf>:
     eaa:	97 fb       	bst	r25, 7
     eac:	3e f4       	brtc	.+14     	; 0xebc <__floatsisf+0x12>
     eae:	90 95       	com	r25
     eb0:	80 95       	com	r24
     eb2:	70 95       	com	r23
     eb4:	61 95       	neg	r22
     eb6:	7f 4f       	sbci	r23, 0xFF	; 255
     eb8:	8f 4f       	sbci	r24, 0xFF	; 255
     eba:	9f 4f       	sbci	r25, 0xFF	; 255
     ebc:	99 23       	and	r25, r25
     ebe:	a9 f0       	breq	.+42     	; 0xeea <__floatsisf+0x40>
     ec0:	f9 2f       	mov	r31, r25
     ec2:	96 e9       	ldi	r25, 0x96	; 150
     ec4:	bb 27       	eor	r27, r27
     ec6:	93 95       	inc	r25
     ec8:	f6 95       	lsr	r31
     eca:	87 95       	ror	r24
     ecc:	77 95       	ror	r23
     ece:	67 95       	ror	r22
     ed0:	b7 95       	ror	r27
     ed2:	f1 11       	cpse	r31, r1
     ed4:	f8 cf       	rjmp	.-16     	; 0xec6 <__floatsisf+0x1c>
     ed6:	fa f4       	brpl	.+62     	; 0xf16 <__floatsisf+0x6c>
     ed8:	bb 0f       	add	r27, r27
     eda:	11 f4       	brne	.+4      	; 0xee0 <__floatsisf+0x36>
     edc:	60 ff       	sbrs	r22, 0
     ede:	1b c0       	rjmp	.+54     	; 0xf16 <__floatsisf+0x6c>
     ee0:	6f 5f       	subi	r22, 0xFF	; 255
     ee2:	7f 4f       	sbci	r23, 0xFF	; 255
     ee4:	8f 4f       	sbci	r24, 0xFF	; 255
     ee6:	9f 4f       	sbci	r25, 0xFF	; 255
     ee8:	16 c0       	rjmp	.+44     	; 0xf16 <__floatsisf+0x6c>
     eea:	88 23       	and	r24, r24
     eec:	11 f0       	breq	.+4      	; 0xef2 <__floatsisf+0x48>
     eee:	96 e9       	ldi	r25, 0x96	; 150
     ef0:	11 c0       	rjmp	.+34     	; 0xf14 <__floatsisf+0x6a>
     ef2:	77 23       	and	r23, r23
     ef4:	21 f0       	breq	.+8      	; 0xefe <__floatsisf+0x54>
     ef6:	9e e8       	ldi	r25, 0x8E	; 142
     ef8:	87 2f       	mov	r24, r23
     efa:	76 2f       	mov	r23, r22
     efc:	05 c0       	rjmp	.+10     	; 0xf08 <__floatsisf+0x5e>
     efe:	66 23       	and	r22, r22
     f00:	71 f0       	breq	.+28     	; 0xf1e <__floatsisf+0x74>
     f02:	96 e8       	ldi	r25, 0x86	; 134
     f04:	86 2f       	mov	r24, r22
     f06:	70 e0       	ldi	r23, 0x00	; 0
     f08:	60 e0       	ldi	r22, 0x00	; 0
     f0a:	2a f0       	brmi	.+10     	; 0xf16 <__floatsisf+0x6c>
     f0c:	9a 95       	dec	r25
     f0e:	66 0f       	add	r22, r22
     f10:	77 1f       	adc	r23, r23
     f12:	88 1f       	adc	r24, r24
     f14:	da f7       	brpl	.-10     	; 0xf0c <__floatsisf+0x62>
     f16:	88 0f       	add	r24, r24
     f18:	96 95       	lsr	r25
     f1a:	87 95       	ror	r24
     f1c:	97 f9       	bld	r25, 7
     f1e:	08 95       	ret

00000f20 <__fp_inf>:
     f20:	97 f9       	bld	r25, 7
     f22:	9f 67       	ori	r25, 0x7F	; 127
     f24:	80 e8       	ldi	r24, 0x80	; 128
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	60 e0       	ldi	r22, 0x00	; 0
     f2a:	08 95       	ret

00000f2c <__fp_nan>:
     f2c:	9f ef       	ldi	r25, 0xFF	; 255
     f2e:	80 ec       	ldi	r24, 0xC0	; 192
     f30:	08 95       	ret

00000f32 <__fp_pscA>:
     f32:	00 24       	eor	r0, r0
     f34:	0a 94       	dec	r0
     f36:	16 16       	cp	r1, r22
     f38:	17 06       	cpc	r1, r23
     f3a:	18 06       	cpc	r1, r24
     f3c:	09 06       	cpc	r0, r25
     f3e:	08 95       	ret

00000f40 <__fp_pscB>:
     f40:	00 24       	eor	r0, r0
     f42:	0a 94       	dec	r0
     f44:	12 16       	cp	r1, r18
     f46:	13 06       	cpc	r1, r19
     f48:	14 06       	cpc	r1, r20
     f4a:	05 06       	cpc	r0, r21
     f4c:	08 95       	ret

00000f4e <__fp_round>:
     f4e:	09 2e       	mov	r0, r25
     f50:	03 94       	inc	r0
     f52:	00 0c       	add	r0, r0
     f54:	11 f4       	brne	.+4      	; 0xf5a <__fp_round+0xc>
     f56:	88 23       	and	r24, r24
     f58:	52 f0       	brmi	.+20     	; 0xf6e <__fp_round+0x20>
     f5a:	bb 0f       	add	r27, r27
     f5c:	40 f4       	brcc	.+16     	; 0xf6e <__fp_round+0x20>
     f5e:	bf 2b       	or	r27, r31
     f60:	11 f4       	brne	.+4      	; 0xf66 <__fp_round+0x18>
     f62:	60 ff       	sbrs	r22, 0
     f64:	04 c0       	rjmp	.+8      	; 0xf6e <__fp_round+0x20>
     f66:	6f 5f       	subi	r22, 0xFF	; 255
     f68:	7f 4f       	sbci	r23, 0xFF	; 255
     f6a:	8f 4f       	sbci	r24, 0xFF	; 255
     f6c:	9f 4f       	sbci	r25, 0xFF	; 255
     f6e:	08 95       	ret

00000f70 <__fp_split3>:
     f70:	57 fd       	sbrc	r21, 7
     f72:	90 58       	subi	r25, 0x80	; 128
     f74:	44 0f       	add	r20, r20
     f76:	55 1f       	adc	r21, r21
     f78:	59 f0       	breq	.+22     	; 0xf90 <__fp_splitA+0x10>
     f7a:	5f 3f       	cpi	r21, 0xFF	; 255
     f7c:	71 f0       	breq	.+28     	; 0xf9a <__fp_splitA+0x1a>
     f7e:	47 95       	ror	r20

00000f80 <__fp_splitA>:
     f80:	88 0f       	add	r24, r24
     f82:	97 fb       	bst	r25, 7
     f84:	99 1f       	adc	r25, r25
     f86:	61 f0       	breq	.+24     	; 0xfa0 <__fp_splitA+0x20>
     f88:	9f 3f       	cpi	r25, 0xFF	; 255
     f8a:	79 f0       	breq	.+30     	; 0xfaa <__fp_splitA+0x2a>
     f8c:	87 95       	ror	r24
     f8e:	08 95       	ret
     f90:	12 16       	cp	r1, r18
     f92:	13 06       	cpc	r1, r19
     f94:	14 06       	cpc	r1, r20
     f96:	55 1f       	adc	r21, r21
     f98:	f2 cf       	rjmp	.-28     	; 0xf7e <__fp_split3+0xe>
     f9a:	46 95       	lsr	r20
     f9c:	f1 df       	rcall	.-30     	; 0xf80 <__fp_splitA>
     f9e:	08 c0       	rjmp	.+16     	; 0xfb0 <__fp_splitA+0x30>
     fa0:	16 16       	cp	r1, r22
     fa2:	17 06       	cpc	r1, r23
     fa4:	18 06       	cpc	r1, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	f1 cf       	rjmp	.-30     	; 0xf8c <__fp_splitA+0xc>
     faa:	86 95       	lsr	r24
     fac:	71 05       	cpc	r23, r1
     fae:	61 05       	cpc	r22, r1
     fb0:	08 94       	sec
     fb2:	08 95       	ret

00000fb4 <__fp_zero>:
     fb4:	e8 94       	clt

00000fb6 <__fp_szero>:
     fb6:	bb 27       	eor	r27, r27
     fb8:	66 27       	eor	r22, r22
     fba:	77 27       	eor	r23, r23
     fbc:	cb 01       	movw	r24, r22
     fbe:	97 f9       	bld	r25, 7
     fc0:	08 95       	ret

00000fc2 <__mulsf3>:
     fc2:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__mulsf3x>
     fc6:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <__fp_round>
     fca:	0e 94 99 07 	call	0xf32	; 0xf32 <__fp_pscA>
     fce:	38 f0       	brcs	.+14     	; 0xfde <__mulsf3+0x1c>
     fd0:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fp_pscB>
     fd4:	20 f0       	brcs	.+8      	; 0xfde <__mulsf3+0x1c>
     fd6:	95 23       	and	r25, r21
     fd8:	11 f0       	breq	.+4      	; 0xfde <__mulsf3+0x1c>
     fda:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__fp_inf>
     fde:	0c 94 96 07 	jmp	0xf2c	; 0xf2c <__fp_nan>
     fe2:	11 24       	eor	r1, r1
     fe4:	0c 94 db 07 	jmp	0xfb6	; 0xfb6 <__fp_szero>

00000fe8 <__mulsf3x>:
     fe8:	0e 94 b8 07 	call	0xf70	; 0xf70 <__fp_split3>
     fec:	70 f3       	brcs	.-36     	; 0xfca <__mulsf3+0x8>

00000fee <__mulsf3_pse>:
     fee:	95 9f       	mul	r25, r21
     ff0:	c1 f3       	breq	.-16     	; 0xfe2 <__mulsf3+0x20>
     ff2:	95 0f       	add	r25, r21
     ff4:	50 e0       	ldi	r21, 0x00	; 0
     ff6:	55 1f       	adc	r21, r21
     ff8:	62 9f       	mul	r22, r18
     ffa:	f0 01       	movw	r30, r0
     ffc:	72 9f       	mul	r23, r18
     ffe:	bb 27       	eor	r27, r27
    1000:	f0 0d       	add	r31, r0
    1002:	b1 1d       	adc	r27, r1
    1004:	63 9f       	mul	r22, r19
    1006:	aa 27       	eor	r26, r26
    1008:	f0 0d       	add	r31, r0
    100a:	b1 1d       	adc	r27, r1
    100c:	aa 1f       	adc	r26, r26
    100e:	64 9f       	mul	r22, r20
    1010:	66 27       	eor	r22, r22
    1012:	b0 0d       	add	r27, r0
    1014:	a1 1d       	adc	r26, r1
    1016:	66 1f       	adc	r22, r22
    1018:	82 9f       	mul	r24, r18
    101a:	22 27       	eor	r18, r18
    101c:	b0 0d       	add	r27, r0
    101e:	a1 1d       	adc	r26, r1
    1020:	62 1f       	adc	r22, r18
    1022:	73 9f       	mul	r23, r19
    1024:	b0 0d       	add	r27, r0
    1026:	a1 1d       	adc	r26, r1
    1028:	62 1f       	adc	r22, r18
    102a:	83 9f       	mul	r24, r19
    102c:	a0 0d       	add	r26, r0
    102e:	61 1d       	adc	r22, r1
    1030:	22 1f       	adc	r18, r18
    1032:	74 9f       	mul	r23, r20
    1034:	33 27       	eor	r19, r19
    1036:	a0 0d       	add	r26, r0
    1038:	61 1d       	adc	r22, r1
    103a:	23 1f       	adc	r18, r19
    103c:	84 9f       	mul	r24, r20
    103e:	60 0d       	add	r22, r0
    1040:	21 1d       	adc	r18, r1
    1042:	82 2f       	mov	r24, r18
    1044:	76 2f       	mov	r23, r22
    1046:	6a 2f       	mov	r22, r26
    1048:	11 24       	eor	r1, r1
    104a:	9f 57       	subi	r25, 0x7F	; 127
    104c:	50 40       	sbci	r21, 0x00	; 0
    104e:	9a f0       	brmi	.+38     	; 0x1076 <__mulsf3_pse+0x88>
    1050:	f1 f0       	breq	.+60     	; 0x108e <__mulsf3_pse+0xa0>
    1052:	88 23       	and	r24, r24
    1054:	4a f0       	brmi	.+18     	; 0x1068 <__mulsf3_pse+0x7a>
    1056:	ee 0f       	add	r30, r30
    1058:	ff 1f       	adc	r31, r31
    105a:	bb 1f       	adc	r27, r27
    105c:	66 1f       	adc	r22, r22
    105e:	77 1f       	adc	r23, r23
    1060:	88 1f       	adc	r24, r24
    1062:	91 50       	subi	r25, 0x01	; 1
    1064:	50 40       	sbci	r21, 0x00	; 0
    1066:	a9 f7       	brne	.-22     	; 0x1052 <__mulsf3_pse+0x64>
    1068:	9e 3f       	cpi	r25, 0xFE	; 254
    106a:	51 05       	cpc	r21, r1
    106c:	80 f0       	brcs	.+32     	; 0x108e <__mulsf3_pse+0xa0>
    106e:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__fp_inf>
    1072:	0c 94 db 07 	jmp	0xfb6	; 0xfb6 <__fp_szero>
    1076:	5f 3f       	cpi	r21, 0xFF	; 255
    1078:	e4 f3       	brlt	.-8      	; 0x1072 <__mulsf3_pse+0x84>
    107a:	98 3e       	cpi	r25, 0xE8	; 232
    107c:	d4 f3       	brlt	.-12     	; 0x1072 <__mulsf3_pse+0x84>
    107e:	86 95       	lsr	r24
    1080:	77 95       	ror	r23
    1082:	67 95       	ror	r22
    1084:	b7 95       	ror	r27
    1086:	f7 95       	ror	r31
    1088:	e7 95       	ror	r30
    108a:	9f 5f       	subi	r25, 0xFF	; 255
    108c:	c1 f7       	brne	.-16     	; 0x107e <__mulsf3_pse+0x90>
    108e:	fe 2b       	or	r31, r30
    1090:	88 0f       	add	r24, r24
    1092:	91 1d       	adc	r25, r1
    1094:	96 95       	lsr	r25
    1096:	87 95       	ror	r24
    1098:	97 f9       	bld	r25, 7
    109a:	08 95       	ret

0000109c <__udivmodqi4>:
    109c:	99 1b       	sub	r25, r25
    109e:	79 e0       	ldi	r23, 0x09	; 9
    10a0:	04 c0       	rjmp	.+8      	; 0x10aa <__udivmodqi4_ep>

000010a2 <__udivmodqi4_loop>:
    10a2:	99 1f       	adc	r25, r25
    10a4:	96 17       	cp	r25, r22
    10a6:	08 f0       	brcs	.+2      	; 0x10aa <__udivmodqi4_ep>
    10a8:	96 1b       	sub	r25, r22

000010aa <__udivmodqi4_ep>:
    10aa:	88 1f       	adc	r24, r24
    10ac:	7a 95       	dec	r23
    10ae:	c9 f7       	brne	.-14     	; 0x10a2 <__udivmodqi4_loop>
    10b0:	80 95       	com	r24
    10b2:	08 95       	ret

000010b4 <__udivmodhi4>:
    10b4:	aa 1b       	sub	r26, r26
    10b6:	bb 1b       	sub	r27, r27
    10b8:	51 e1       	ldi	r21, 0x11	; 17
    10ba:	07 c0       	rjmp	.+14     	; 0x10ca <__udivmodhi4_ep>

000010bc <__udivmodhi4_loop>:
    10bc:	aa 1f       	adc	r26, r26
    10be:	bb 1f       	adc	r27, r27
    10c0:	a6 17       	cp	r26, r22
    10c2:	b7 07       	cpc	r27, r23
    10c4:	10 f0       	brcs	.+4      	; 0x10ca <__udivmodhi4_ep>
    10c6:	a6 1b       	sub	r26, r22
    10c8:	b7 0b       	sbc	r27, r23

000010ca <__udivmodhi4_ep>:
    10ca:	88 1f       	adc	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	5a 95       	dec	r21
    10d0:	a9 f7       	brne	.-22     	; 0x10bc <__udivmodhi4_loop>
    10d2:	80 95       	com	r24
    10d4:	90 95       	com	r25
    10d6:	bc 01       	movw	r22, r24
    10d8:	cd 01       	movw	r24, r26
    10da:	08 95       	ret

000010dc <__udivmodsi4>:
    10dc:	a1 e2       	ldi	r26, 0x21	; 33
    10de:	1a 2e       	mov	r1, r26
    10e0:	aa 1b       	sub	r26, r26
    10e2:	bb 1b       	sub	r27, r27
    10e4:	fd 01       	movw	r30, r26
    10e6:	0d c0       	rjmp	.+26     	; 0x1102 <__udivmodsi4_ep>

000010e8 <__udivmodsi4_loop>:
    10e8:	aa 1f       	adc	r26, r26
    10ea:	bb 1f       	adc	r27, r27
    10ec:	ee 1f       	adc	r30, r30
    10ee:	ff 1f       	adc	r31, r31
    10f0:	a2 17       	cp	r26, r18
    10f2:	b3 07       	cpc	r27, r19
    10f4:	e4 07       	cpc	r30, r20
    10f6:	f5 07       	cpc	r31, r21
    10f8:	20 f0       	brcs	.+8      	; 0x1102 <__udivmodsi4_ep>
    10fa:	a2 1b       	sub	r26, r18
    10fc:	b3 0b       	sbc	r27, r19
    10fe:	e4 0b       	sbc	r30, r20
    1100:	f5 0b       	sbc	r31, r21

00001102 <__udivmodsi4_ep>:
    1102:	66 1f       	adc	r22, r22
    1104:	77 1f       	adc	r23, r23
    1106:	88 1f       	adc	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	1a 94       	dec	r1
    110c:	69 f7       	brne	.-38     	; 0x10e8 <__udivmodsi4_loop>
    110e:	60 95       	com	r22
    1110:	70 95       	com	r23
    1112:	80 95       	com	r24
    1114:	90 95       	com	r25
    1116:	9b 01       	movw	r18, r22
    1118:	ac 01       	movw	r20, r24
    111a:	bd 01       	movw	r22, r26
    111c:	cf 01       	movw	r24, r30
    111e:	08 95       	ret

00001120 <__umulhisi3>:
    1120:	a2 9f       	mul	r26, r18
    1122:	b0 01       	movw	r22, r0
    1124:	b3 9f       	mul	r27, r19
    1126:	c0 01       	movw	r24, r0
    1128:	a3 9f       	mul	r26, r19
    112a:	70 0d       	add	r23, r0
    112c:	81 1d       	adc	r24, r1
    112e:	11 24       	eor	r1, r1
    1130:	91 1d       	adc	r25, r1
    1132:	b2 9f       	mul	r27, r18
    1134:	70 0d       	add	r23, r0
    1136:	81 1d       	adc	r24, r1
    1138:	11 24       	eor	r1, r1
    113a:	91 1d       	adc	r25, r1
    113c:	08 95       	ret

0000113e <__itoa_ncheck>:
    113e:	bb 27       	eor	r27, r27
    1140:	4a 30       	cpi	r20, 0x0A	; 10
    1142:	31 f4       	brne	.+12     	; 0x1150 <__itoa_ncheck+0x12>
    1144:	99 23       	and	r25, r25
    1146:	22 f4       	brpl	.+8      	; 0x1150 <__itoa_ncheck+0x12>
    1148:	bd e2       	ldi	r27, 0x2D	; 45
    114a:	90 95       	com	r25
    114c:	81 95       	neg	r24
    114e:	9f 4f       	sbci	r25, 0xFF	; 255
    1150:	0c 94 ab 08 	jmp	0x1156	; 0x1156 <__utoa_common>

00001154 <__utoa_ncheck>:
    1154:	bb 27       	eor	r27, r27

00001156 <__utoa_common>:
    1156:	fb 01       	movw	r30, r22
    1158:	55 27       	eor	r21, r21
    115a:	aa 27       	eor	r26, r26
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	aa 1f       	adc	r26, r26
    1162:	a4 17       	cp	r26, r20
    1164:	10 f0       	brcs	.+4      	; 0x116a <__utoa_common+0x14>
    1166:	a4 1b       	sub	r26, r20
    1168:	83 95       	inc	r24
    116a:	50 51       	subi	r21, 0x10	; 16
    116c:	b9 f7       	brne	.-18     	; 0x115c <__utoa_common+0x6>
    116e:	a0 5d       	subi	r26, 0xD0	; 208
    1170:	aa 33       	cpi	r26, 0x3A	; 58
    1172:	08 f0       	brcs	.+2      	; 0x1176 <__utoa_common+0x20>
    1174:	a9 5d       	subi	r26, 0xD9	; 217
    1176:	a1 93       	st	Z+, r26
    1178:	00 97       	sbiw	r24, 0x00	; 0
    117a:	79 f7       	brne	.-34     	; 0x115a <__utoa_common+0x4>
    117c:	b1 11       	cpse	r27, r1
    117e:	b1 93       	st	Z+, r27
    1180:	11 92       	st	Z+, r1
    1182:	cb 01       	movw	r24, r22
    1184:	0c 94 c4 08 	jmp	0x1188	; 0x1188 <strrev>

00001188 <strrev>:
    1188:	dc 01       	movw	r26, r24
    118a:	fc 01       	movw	r30, r24
    118c:	67 2f       	mov	r22, r23
    118e:	71 91       	ld	r23, Z+
    1190:	77 23       	and	r23, r23
    1192:	e1 f7       	brne	.-8      	; 0x118c <strrev+0x4>
    1194:	32 97       	sbiw	r30, 0x02	; 2
    1196:	04 c0       	rjmp	.+8      	; 0x11a0 <strrev+0x18>
    1198:	7c 91       	ld	r23, X
    119a:	6d 93       	st	X+, r22
    119c:	70 83       	st	Z, r23
    119e:	62 91       	ld	r22, -Z
    11a0:	ae 17       	cp	r26, r30
    11a2:	bf 07       	cpc	r27, r31
    11a4:	c8 f3       	brcs	.-14     	; 0x1198 <strrev+0x10>
    11a6:	08 95       	ret

000011a8 <eeprom_read_byte>:
    11a8:	f9 99       	sbic	0x1f, 1	; 31
    11aa:	fe cf       	rjmp	.-4      	; 0x11a8 <eeprom_read_byte>
    11ac:	92 bd       	out	0x22, r25	; 34
    11ae:	81 bd       	out	0x21, r24	; 33
    11b0:	f8 9a       	sbi	0x1f, 0	; 31
    11b2:	99 27       	eor	r25, r25
    11b4:	80 b5       	in	r24, 0x20	; 32
    11b6:	08 95       	ret

000011b8 <eeprom_write_byte>:
    11b8:	26 2f       	mov	r18, r22

000011ba <eeprom_write_r18>:
    11ba:	f9 99       	sbic	0x1f, 1	; 31
    11bc:	fe cf       	rjmp	.-4      	; 0x11ba <eeprom_write_r18>
    11be:	1f ba       	out	0x1f, r1	; 31
    11c0:	92 bd       	out	0x22, r25	; 34
    11c2:	81 bd       	out	0x21, r24	; 33
    11c4:	20 bd       	out	0x20, r18	; 32
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	f8 94       	cli
    11ca:	fa 9a       	sbi	0x1f, 2	; 31
    11cc:	f9 9a       	sbi	0x1f, 1	; 31
    11ce:	0f be       	out	0x3f, r0	; 63
    11d0:	01 96       	adiw	r24, 0x01	; 1
    11d2:	08 95       	ret

000011d4 <_exit>:
    11d4:	f8 94       	cli

000011d6 <__stop_program>:
    11d6:	ff cf       	rjmp	.-2      	; 0x11d6 <__stop_program>
