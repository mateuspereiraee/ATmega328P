
MateusPereiraSprint2Certo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ae  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000072a  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067c  00000000  00000000  0000096a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000373  00000000  00000000  00000fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000135c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bd  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000018c  00000000  00000000  0000173d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000018c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	92 00       	.word	0x0092	; ????
  6a:	80 00       	.word	0x0080	; ????
  6c:	82 00       	.word	0x0082	; ????
  6e:	84 00       	.word	0x0084	; ????
  70:	86 00       	.word	0x0086	; ????
  72:	88 00       	.word	0x0088	; ????
  74:	8a 00       	.word	0x008a	; ????
  76:	8c 00       	.word	0x008c	; ????
  78:	8e 00       	.word	0x008e	; ????
  7a:	90 00       	.word	0x0090	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  8c:	0c 94 ab 00 	jmp	0x156	; 0x156 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <main>:
#include <util/delay.h>


int main(void)
{
	DDRB  = 0b11111111;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	84 b9       	out	0x04, r24	; 4
	DDRC  = 0b00001111;
  98:	8f e0       	ldi	r24, 0x0F	; 15
  9a:	87 b9       	out	0x07, r24	; 7
	DDRD  = 0b11111100;
  9c:	8c ef       	ldi	r24, 0xFC	; 252
  9e:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00000011;
  a0:	83 e0       	ldi	r24, 0x03	; 3
  a2:	8b b9       	out	0x0b, r24	; 11
	7    0   1   1   1  
	8    1   0   0   0  
	9    1   0   0   1  
	*/
	
	uint8_t dezena=0, centena=0, out=0;
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	20 e0       	ldi	r18, 0x00	; 0
	//uint8_t unidade=0; caso queira controlar de +1 ou -1
	
    while (1) 
    {
//////////////////////////////////// SE APERTAR O BOTÃO +10 CAI AQUI
		if (!(PIND & (1<<0)))
  aa:	48 99       	sbic	0x09, 0	; 9
  ac:	0c c0       	rjmp	.+24     	; 0xc6 <main+0x32>
		{
			if (centena<3)
  ae:	83 30       	cpi	r24, 0x03	; 3
  b0:	08 f4       	brcc	.+2      	; 0xb4 <main+0x20>
			{
				dezena++;
  b2:	2f 5f       	subi	r18, 0xFF	; 255
			}
			if (dezena==10)
  b4:	2a 30       	cpi	r18, 0x0A	; 10
  b6:	39 f4       	brne	.+14     	; 0xc6 <main+0x32>
			{
				if(centena<3)
  b8:	83 30       	cpi	r24, 0x03	; 3
  ba:	18 f4       	brcc	.+6      	; 0xc2 <main+0x2e>
				{
					centena++;
  bc:	8f 5f       	subi	r24, 0xFF	; 255
					dezena=0;
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <main+0x32>
				}
				else
					{
						centena=3;
  c2:	83 e0       	ldi	r24, 0x03	; 3
						dezena=0;
  c4:	20 e0       	ldi	r18, 0x00	; 0
					}
			}
		}
		
//////////////////////////////////// SE APERTAR O BOTÃO -10 CAI AQUI
		if (!(PIND & (1<<1)))
  c6:	49 99       	sbic	0x09, 1	; 9
  c8:	08 c0       	rjmp	.+16     	; 0xda <main+0x46>
		{
			if (dezena>0)
  ca:	22 23       	and	r18, r18
  cc:	11 f0       	breq	.+4      	; 0xd2 <main+0x3e>
			{
				dezena--;
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	04 c0       	rjmp	.+8      	; 0xda <main+0x46>
			}
			else
			{
				if (centena>0)
  d2:	88 23       	and	r24, r24
  d4:	11 f0       	breq	.+4      	; 0xda <main+0x46>
				{
					centena--;
  d6:	81 50       	subi	r24, 0x01	; 1
					dezena=9;
  d8:	29 e0       	ldi	r18, 0x09	; 9
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	3f ef       	ldi	r19, 0xFF	; 255
  dc:	41 ee       	ldi	r20, 0xE1	; 225
  de:	54 e0       	ldi	r21, 0x04	; 4
  e0:	31 50       	subi	r19, 0x01	; 1
  e2:	40 40       	sbci	r20, 0x00	; 0
  e4:	50 40       	sbci	r21, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x4c>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x56>
  ea:	00 00       	nop
			}
		}
		
		_delay_ms(100);
		
		switch (dezena)
  ec:	42 2f       	mov	r20, r18
  ee:	50 e0       	ldi	r21, 0x00	; 0
  f0:	4a 30       	cpi	r20, 0x0A	; 10
  f2:	51 05       	cpc	r21, r1
  f4:	c0 f4       	brcc	.+48     	; 0x126 <main+0x92>
  f6:	fa 01       	movw	r30, r20
  f8:	ec 5c       	subi	r30, 0xCC	; 204
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__tablejump2__>
		{
		case 0:
			out = 0b00000000;
			break;
		case 1:
			out = 0b00010000;
 100:	90 e1       	ldi	r25, 0x10	; 16
			break;
 102:	11 c0       	rjmp	.+34     	; 0x126 <main+0x92>
		case 2:
			out = 0b00100000;
 104:	90 e2       	ldi	r25, 0x20	; 32
			break;
 106:	0f c0       	rjmp	.+30     	; 0x126 <main+0x92>
		case 3:
			out = 0b00110000;
 108:	90 e3       	ldi	r25, 0x30	; 48
			break;
 10a:	0d c0       	rjmp	.+26     	; 0x126 <main+0x92>
		case 4:
			out = 0b01000000;
 10c:	90 e4       	ldi	r25, 0x40	; 64
			break;
 10e:	0b c0       	rjmp	.+22     	; 0x126 <main+0x92>
		case 5:
			out = 0b01010000;
 110:	90 e5       	ldi	r25, 0x50	; 80
			break;
 112:	09 c0       	rjmp	.+18     	; 0x126 <main+0x92>
		case 6:
			out = 0b01100000;
 114:	90 e6       	ldi	r25, 0x60	; 96
			break;
 116:	07 c0       	rjmp	.+14     	; 0x126 <main+0x92>
		case 7:
			out = 0b01110000;
 118:	90 e7       	ldi	r25, 0x70	; 112
			break;
 11a:	05 c0       	rjmp	.+10     	; 0x126 <main+0x92>
		case 8:
			out = 0b10000000;
 11c:	90 e8       	ldi	r25, 0x80	; 128
			break;
 11e:	03 c0       	rjmp	.+6      	; 0x126 <main+0x92>
		case 9:
			out = 0b10010000;
 120:	90 e9       	ldi	r25, 0x90	; 144
			break;
 122:	01 c0       	rjmp	.+2      	; 0x126 <main+0x92>
		_delay_ms(100);
		
		switch (dezena)
		{
		case 0:
			out = 0b00000000;
 124:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case 9:
			out = 0b10010000;
			break;
		}
	PORTB = out;
 126:	95 b9       	out	0x05, r25	; 5
	
	switch (centena)
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	31 f0       	breq	.+12     	; 0x138 <main+0xa4>
 12c:	58 f0       	brcs	.+22     	; 0x144 <main+0xb0>
 12e:	82 30       	cpi	r24, 0x02	; 2
 130:	29 f0       	breq	.+10     	; 0x13c <main+0xa8>
 132:	83 30       	cpi	r24, 0x03	; 3
 134:	29 f0       	breq	.+10     	; 0x140 <main+0xac>
 136:	07 c0       	rjmp	.+14     	; 0x146 <main+0xb2>
	{
		case 0:
		out = 0b0000;
		break;
		case 1:
		out = 0b0001;
 138:	91 e0       	ldi	r25, 0x01	; 1
		break;
 13a:	05 c0       	rjmp	.+10     	; 0x146 <main+0xb2>
		case 2:
		out = 0b0010;
 13c:	92 e0       	ldi	r25, 0x02	; 2
		break;
 13e:	03 c0       	rjmp	.+6      	; 0x146 <main+0xb2>
		case 3:
		out = 0b0011;
 140:	93 e0       	ldi	r25, 0x03	; 3
		break;
 142:	01 c0       	rjmp	.+2      	; 0x146 <main+0xb2>
	PORTB = out;
	
	switch (centena)
	{
		case 0:
		out = 0b0000;
 144:	90 e0       	ldi	r25, 0x00	; 0
		break;
		case 3:
		out = 0b0011;
		break;
	}
	PORTC = out;
 146:	98 b9       	out	0x08, r25	; 8
	
	}
 148:	b0 cf       	rjmp	.-160    	; 0xaa <main+0x16>

0000014a <__tablejump2__>:
 14a:	ee 0f       	add	r30, r30
 14c:	ff 1f       	adc	r31, r31
 14e:	05 90       	lpm	r0, Z+
 150:	f4 91       	lpm	r31, Z
 152:	e0 2d       	mov	r30, r0
 154:	09 94       	ijmp

00000156 <_exit>:
 156:	f8 94       	cli

00000158 <__stop_program>:
 158:	ff cf       	rjmp	.-2      	; 0x158 <__stop_program>
