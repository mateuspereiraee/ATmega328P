
MateusPereiraSprint4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000da4  00000e38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000da4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000216  00800124  00800124  00000e5c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e5c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011ca  00000000  00000000  00000f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b2  00000000  00000000  00002146  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008c2  00000000  00000000  00002af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  000033bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000569  00000000  00000000  000035b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007a2  00000000  00000000  00003b19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000042bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 24 01 	jmp	0x248	; 0x248 <__ctors_end>
   4:	0c 94 43 01 	jmp	0x286	; 0x286 <__vector_1>
   8:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__vector_2>
   c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  10:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  14:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__vector_5>
  18:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  1c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  20:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  24:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  28:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  2c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  30:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  34:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  38:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__vector_14>
  3c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  40:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  44:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  48:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  4c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  50:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  54:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  58:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  5c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  60:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  64:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>

00000068 <CHARSET>:
  68:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
  78:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
  88:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
  98:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
  a8:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
  b8:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
  c8:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
  d8:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
  e8:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
  f8:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
 108:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
 118:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
 128:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
 138:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
 148:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
 158:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
 168:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
 178:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
 188:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
 198:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
 1a8:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
 1b8:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
 1c8:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
 1d8:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
 1e8:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
 1f8:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
 208:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
 218:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
 228:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
 238:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

00000248 <__ctors_end>:
 248:	11 24       	eor	r1, r1
 24a:	1f be       	out	0x3f, r1	; 63
 24c:	cf ef       	ldi	r28, 0xFF	; 255
 24e:	d8 e0       	ldi	r29, 0x08	; 8
 250:	de bf       	out	0x3e, r29	; 62
 252:	cd bf       	out	0x3d, r28	; 61

00000254 <__do_copy_data>:
 254:	11 e0       	ldi	r17, 0x01	; 1
 256:	a0 e0       	ldi	r26, 0x00	; 0
 258:	b1 e0       	ldi	r27, 0x01	; 1
 25a:	e4 ea       	ldi	r30, 0xA4	; 164
 25c:	fd e0       	ldi	r31, 0x0D	; 13
 25e:	02 c0       	rjmp	.+4      	; 0x264 <__do_copy_data+0x10>
 260:	05 90       	lpm	r0, Z+
 262:	0d 92       	st	X+, r0
 264:	a4 32       	cpi	r26, 0x24	; 36
 266:	b1 07       	cpc	r27, r17
 268:	d9 f7       	brne	.-10     	; 0x260 <__do_copy_data+0xc>

0000026a <__do_clear_bss>:
 26a:	23 e0       	ldi	r18, 0x03	; 3
 26c:	a4 e2       	ldi	r26, 0x24	; 36
 26e:	b1 e0       	ldi	r27, 0x01	; 1
 270:	01 c0       	rjmp	.+2      	; 0x274 <.do_clear_bss_start>

00000272 <.do_clear_bss_loop>:
 272:	1d 92       	st	X+, r1

00000274 <.do_clear_bss_start>:
 274:	aa 33       	cpi	r26, 0x3A	; 58
 276:	b2 07       	cpc	r27, r18
 278:	e1 f7       	brne	.-8      	; 0x272 <.do_clear_bss_loop>
 27a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <main>
 27e:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <_exit>

00000282 <__bad_interrupt>:
 282:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000286 <__vector_1>:

uint16_t tamroda = 50, rpm = 0, dist = 0, velocidade = 0, tempo_ms = 0, mudanca = 0, aux_dist = 0;
unsigned char display_string[tamanho_vetor];

ISR(INT0_vect)
{
 286:	1f 92       	push	r1
 288:	0f 92       	push	r0
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	0f 92       	push	r0
 28e:	11 24       	eor	r1, r1
 290:	8f 93       	push	r24
 292:	9f 93       	push	r25
	tamroda++;
 294:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 298:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 29c:	01 96       	adiw	r24, 0x01	; 1
 29e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2a2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 2a6:	9f 91       	pop	r25
 2a8:	8f 91       	pop	r24
 2aa:	0f 90       	pop	r0
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	0f 90       	pop	r0
 2b0:	1f 90       	pop	r1
 2b2:	18 95       	reti

000002b4 <__vector_2>:

ISR(INT1_vect)
{
 2b4:	1f 92       	push	r1
 2b6:	0f 92       	push	r0
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	0f 92       	push	r0
 2bc:	11 24       	eor	r1, r1
 2be:	8f 93       	push	r24
 2c0:	9f 93       	push	r25
	tamroda--;
 2c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2c6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 2d4:	9f 91       	pop	r25
 2d6:	8f 91       	pop	r24
 2d8:	0f 90       	pop	r0
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	0f 90       	pop	r0
 2de:	1f 90       	pop	r1
 2e0:	18 95       	reti

000002e2 <__vector_14>:

ISR(TIMER0_COMPA_vect) // Interrupção do TC0 a  cada 1ms
{
 2e2:	1f 92       	push	r1
 2e4:	0f 92       	push	r0
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	0f 92       	push	r0
 2ea:	11 24       	eor	r1, r1
 2ec:	2f 93       	push	r18
 2ee:	3f 93       	push	r19
 2f0:	4f 93       	push	r20
 2f2:	5f 93       	push	r21
 2f4:	6f 93       	push	r22
 2f6:	7f 93       	push	r23
 2f8:	8f 93       	push	r24
 2fa:	9f 93       	push	r25
 2fc:	af 93       	push	r26
 2fe:	bf 93       	push	r27
 300:	ef 93       	push	r30
 302:	ff 93       	push	r31
	static float aux;
	tempo_ms++;
 304:	40 91 28 01 	lds	r20, 0x0128	; 0x800128 <tempo_ms>
 308:	50 91 29 01 	lds	r21, 0x0129	; 0x800129 <tempo_ms+0x1>
 30c:	4f 5f       	subi	r20, 0xFF	; 255
 30e:	5f 4f       	sbci	r21, 0xFF	; 255
 310:	50 93 29 01 	sts	0x0129, r21	; 0x800129 <tempo_ms+0x1>
 314:	40 93 28 01 	sts	0x0128, r20	; 0x800128 <tempo_ms>
	if((tempo_ms % 1000) == 0) // Entra a cada 1 segundo
 318:	9a 01       	movw	r18, r20
 31a:	36 95       	lsr	r19
 31c:	27 95       	ror	r18
 31e:	36 95       	lsr	r19
 320:	27 95       	ror	r18
 322:	36 95       	lsr	r19
 324:	27 95       	ror	r18
 326:	a5 ec       	ldi	r26, 0xC5	; 197
 328:	b0 e2       	ldi	r27, 0x20	; 32
 32a:	0e 94 8c 06 	call	0xd18	; 0xd18 <__umulhisi3>
 32e:	92 95       	swap	r25
 330:	82 95       	swap	r24
 332:	8f 70       	andi	r24, 0x0F	; 15
 334:	89 27       	eor	r24, r25
 336:	9f 70       	andi	r25, 0x0F	; 15
 338:	89 27       	eor	r24, r25
 33a:	68 ee       	ldi	r22, 0xE8	; 232
 33c:	73 e0       	ldi	r23, 0x03	; 3
 33e:	86 9f       	mul	r24, r22
 340:	90 01       	movw	r18, r0
 342:	87 9f       	mul	r24, r23
 344:	30 0d       	add	r19, r0
 346:	96 9f       	mul	r25, r22
 348:	30 0d       	add	r19, r0
 34a:	11 24       	eor	r1, r1
 34c:	42 17       	cp	r20, r18
 34e:	53 07       	cpc	r21, r19
 350:	19 f5       	brne	.+70     	; 0x398 <__vector_14+0xb6>
	{
		aux = (mudanca/2); // Vamos ter rotações por segundo, Divide por 2 pois só queremos a contagem da borda de descida
 352:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <mudanca>
 356:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <mudanca+0x1>
 35a:	76 95       	lsr	r23
 35c:	67 95       	ror	r22
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 71 05 	call	0xae2	; 0xae2 <__floatunsisf>
		rpm = (aux*60);
 366:	20 e0       	ldi	r18, 0x00	; 0
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	40 e7       	ldi	r20, 0x70	; 112
 36c:	52 e4       	ldi	r21, 0x42	; 66
 36e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__mulsf3>
 372:	0e 94 42 05 	call	0xa84	; 0xa84 <__fixunssfsi>
 376:	70 93 2f 01 	sts	0x012F, r23	; 0x80012f <rpm+0x1>
 37a:	60 93 2e 01 	sts	0x012E, r22	; 0x80012e <rpm>
		mudanca = 0;
 37e:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <mudanca+0x1>
 382:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <mudanca>
		aux_dist++;	// Conta de 1 em 1 Segundo
 386:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 38a:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <__data_end+0x1>
 38e:	01 96       	adiw	r24, 0x01	; 1
 390:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__data_end+0x1>
 394:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
	}
}
 398:	ff 91       	pop	r31
 39a:	ef 91       	pop	r30
 39c:	bf 91       	pop	r27
 39e:	af 91       	pop	r26
 3a0:	9f 91       	pop	r25
 3a2:	8f 91       	pop	r24
 3a4:	7f 91       	pop	r23
 3a6:	6f 91       	pop	r22
 3a8:	5f 91       	pop	r21
 3aa:	4f 91       	pop	r20
 3ac:	3f 91       	pop	r19
 3ae:	2f 91       	pop	r18
 3b0:	0f 90       	pop	r0
 3b2:	0f be       	out	0x3f, r0	; 63
 3b4:	0f 90       	pop	r0
 3b6:	1f 90       	pop	r1
 3b8:	18 95       	reti

000003ba <__vector_5>:

ISR(PCINT2_vect) // Interrupção 2 por mudança de pino
{
 3ba:	1f 92       	push	r1
 3bc:	0f 92       	push	r0
 3be:	0f b6       	in	r0, 0x3f	; 63
 3c0:	0f 92       	push	r0
 3c2:	11 24       	eor	r1, r1
 3c4:	8f 93       	push	r24
 3c6:	9f 93       	push	r25
	mudanca++; // Conta descida e subida
 3c8:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <mudanca>
 3cc:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <mudanca+0x1>
 3d0:	01 96       	adiw	r24, 0x01	; 1
 3d2:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <mudanca+0x1>
 3d6:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <mudanca>
}
 3da:	9f 91       	pop	r25
 3dc:	8f 91       	pop	r24
 3de:	0f 90       	pop	r0
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	0f 90       	pop	r0
 3e4:	1f 90       	pop	r1
 3e6:	18 95       	reti

000003e8 <main>:

int main(void)
{
		DDRC  = 0b11111111;
 3e8:	8f ef       	ldi	r24, 0xFF	; 255
 3ea:	87 b9       	out	0x07, r24	; 7
		DDRB  = 0b11111111;
 3ec:	84 b9       	out	0x04, r24	; 4
		DDRD  = 0b00000001;
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	8a b9       	out	0x0a, r24	; 10
		PORTD = 0b11111101;
 3f2:	8d ef       	ldi	r24, 0xFD	; 253
 3f4:	8b b9       	out	0x0b, r24	; 11
		
		TCCR0A = 0b00000010; // Habilita modo CTC do TC0
 3f6:	82 e0       	ldi	r24, 0x02	; 2
 3f8:	84 bd       	out	0x24, r24	; 36
		TCCR0B = 0b00000011; //Liga TC0 com prescaler = 64
 3fa:	93 e0       	ldi	r25, 0x03	; 3
 3fc:	95 bd       	out	0x25, r25	; 37
		OCR0A = 249; // Ajusta o comparador para o TC0 contar ate 249
 3fe:	29 ef       	ldi	r18, 0xF9	; 249
 400:	27 bd       	out	0x27, r18	; 39
		TIMSK0 = 0b00000010; // Habilita a interrupção na igualdade de comparação OCR0A. A interrupção ocorre a cada 1ms = (64*(249+1))/16MHz
 402:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
		
		EICRA = 0b00001010;
 406:	2a e0       	ldi	r18, 0x0A	; 10
 408:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
		EIMSK = 0b00000011;
 40c:	9d bb       	out	0x1d, r25	; 29
		sei();
 40e:	78 94       	sei
		
		PCICR = 0b00000100; //Habilita a interrupção PCINT2
 410:	94 e0       	ldi	r25, 0x04	; 4
 412:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
		PCMSK2 = 0b00000010; // Habilitação do pino D1 na interrupção PCINT2
 416:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7f806d>
				
		nokia_lcd_init();
 41a:	0e 94 81 03 	call	0x702	; 0x702 <nokia_lcd_init>
	
	while (1)
	{
		velocidade = 2*3.14*(tamroda/2)/100000*rpm*60; //Comprimento em Km = 2*3.14*(tamroda/2)/100000, como é 1:1 temos rpm*60 (Rotações por Hora)
 41e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 422:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 426:	76 95       	lsr	r23
 428:	67 95       	ror	r22
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 94 71 05 	call	0xae2	; 0xae2 <__floatunsisf>
 432:	23 ec       	ldi	r18, 0xC3	; 195
 434:	35 ef       	ldi	r19, 0xF5	; 245
 436:	48 ec       	ldi	r20, 0xC8	; 200
 438:	50 e4       	ldi	r21, 0x40	; 64
 43a:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__mulsf3>
 43e:	20 e0       	ldi	r18, 0x00	; 0
 440:	30 e5       	ldi	r19, 0x50	; 80
 442:	43 ec       	ldi	r20, 0xC3	; 195
 444:	57 e4       	ldi	r21, 0x47	; 71
 446:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__divsf3>
 44a:	6b 01       	movw	r12, r22
 44c:	7c 01       	movw	r14, r24
 44e:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <rpm>
 452:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <rpm+0x1>
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	0e 94 71 05 	call	0xae2	; 0xae2 <__floatunsisf>
 45e:	a7 01       	movw	r20, r14
 460:	96 01       	movw	r18, r12
 462:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__mulsf3>
 466:	20 e0       	ldi	r18, 0x00	; 0
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	40 e7       	ldi	r20, 0x70	; 112
 46c:	52 e4       	ldi	r21, 0x42	; 66
 46e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__mulsf3>
 472:	0e 94 42 05 	call	0xa84	; 0xa84 <__fixunssfsi>
 476:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <velocidade+0x1>
 47a:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <velocidade>
		dist = aux_dist*velocidade/3600; // A cada 1s incremeta 1 em aux_dist assim temos X km por segundos
 47e:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <__data_end>
 482:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <__data_end+0x1>
 486:	46 9f       	mul	r20, r22
 488:	90 01       	movw	r18, r0
 48a:	47 9f       	mul	r20, r23
 48c:	30 0d       	add	r19, r0
 48e:	56 9f       	mul	r21, r22
 490:	30 0d       	add	r19, r0
 492:	11 24       	eor	r1, r1
 494:	c9 01       	movw	r24, r18
 496:	60 e1       	ldi	r22, 0x10	; 16
 498:	7e e0       	ldi	r23, 0x0E	; 14
 49a:	0e 94 78 06 	call	0xcf0	; 0xcf0 <__udivmodhi4>
 49e:	70 93 2d 01 	sts	0x012D, r23	; 0x80012d <dist+0x1>
 4a2:	60 93 2c 01 	sts	0x012C, r22	; 0x80012c <dist>
		
		//nokia_lcd_init();
		nokia_lcd_clear();
 4a6:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <nokia_lcd_clear>
		nokia_lcd_write_string("COMP. DE BORDO",1);
 4aa:	61 e0       	ldi	r22, 0x01	; 1
 4ac:	82 e0       	ldi	r24, 0x02	; 2
 4ae:	91 e0       	ldi	r25, 0x01	; 1
 4b0:	0e 94 a1 04 	call	0x942	; 0x942 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 10);
 4b4:	6a e0       	ldi	r22, 0x0A	; 10
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	0e 94 b2 04 	call	0x964	; 0x964 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("Diam(cm):", 1);
 4bc:	61 e0       	ldi	r22, 0x01	; 1
 4be:	81 e1       	ldi	r24, 0x11	; 17
 4c0:	91 e0       	ldi	r25, 0x01	; 1
 4c2:	0e 94 a1 04 	call	0x942	; 0x942 <nokia_lcd_write_string>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 4c6:	4a e0       	ldi	r20, 0x0A	; 10
 4c8:	6a e2       	ldi	r22, 0x2A	; 42
 4ca:	73 e0       	ldi	r23, 0x03	; 3
 4cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4d0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4d4:	0e 94 9b 06 	call	0xd36	; 0xd36 <__itoa_ncheck>
		itoa(tamroda, &display_string, 10); //chamada da função para converter inteiros em string
		nokia_lcd_set_cursor(55, 10);
 4d8:	6a e0       	ldi	r22, 0x0A	; 10
 4da:	87 e3       	ldi	r24, 0x37	; 55
 4dc:	0e 94 b2 04 	call	0x964	; 0x964 <nokia_lcd_set_cursor>
		nokia_lcd_write_string(display_string, 1);
 4e0:	61 e0       	ldi	r22, 0x01	; 1
 4e2:	8a e2       	ldi	r24, 0x2A	; 42
 4e4:	93 e0       	ldi	r25, 0x03	; 3
 4e6:	0e 94 a1 04 	call	0x942	; 0x942 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 20);
 4ea:	64 e1       	ldi	r22, 0x14	; 20
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	0e 94 b2 04 	call	0x964	; 0x964 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("RPM:", 1);
 4f2:	61 e0       	ldi	r22, 0x01	; 1
 4f4:	8b e1       	ldi	r24, 0x1B	; 27
 4f6:	91 e0       	ldi	r25, 0x01	; 1
 4f8:	0e 94 a1 04 	call	0x942	; 0x942 <nokia_lcd_write_string>
 4fc:	4a e0       	ldi	r20, 0x0A	; 10
 4fe:	6a e2       	ldi	r22, 0x2A	; 42
 500:	73 e0       	ldi	r23, 0x03	; 3
 502:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <rpm>
 506:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <rpm+0x1>
 50a:	0e 94 9b 06 	call	0xd36	; 0xd36 <__itoa_ncheck>
		itoa(rpm, &display_string, 10); //chamada da função para converter inteiros em string
		nokia_lcd_set_cursor(30, 20);
 50e:	64 e1       	ldi	r22, 0x14	; 20
 510:	8e e1       	ldi	r24, 0x1E	; 30
 512:	0e 94 b2 04 	call	0x964	; 0x964 <nokia_lcd_set_cursor>
		nokia_lcd_write_string(display_string, 1);
 516:	61 e0       	ldi	r22, 0x01	; 1
 518:	8a e2       	ldi	r24, 0x2A	; 42
 51a:	93 e0       	ldi	r25, 0x03	; 3
 51c:	0e 94 a1 04 	call	0x942	; 0x942 <nokia_lcd_write_string>
 520:	4a e0       	ldi	r20, 0x0A	; 10
 522:	6a e2       	ldi	r22, 0x2A	; 42
 524:	73 e0       	ldi	r23, 0x03	; 3
 526:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <dist>
 52a:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <dist+0x1>
 52e:	0e 94 9b 06 	call	0xd36	; 0xd36 <__itoa_ncheck>
		itoa(dist, &display_string, 10); //chamada da função para converter inteiros em string
		nokia_lcd_set_cursor(35, 33);
 532:	61 e2       	ldi	r22, 0x21	; 33
 534:	83 e2       	ldi	r24, 0x23	; 35
 536:	0e 94 b2 04 	call	0x964	; 0x964 <nokia_lcd_set_cursor>
		nokia_lcd_write_string(display_string, 2);
 53a:	62 e0       	ldi	r22, 0x02	; 2
 53c:	8a e2       	ldi	r24, 0x2A	; 42
 53e:	93 e0       	ldi	r25, 0x03	; 3
 540:	0e 94 a1 04 	call	0x942	; 0x942 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(60, 35);
 544:	63 e2       	ldi	r22, 0x23	; 35
 546:	8c e3       	ldi	r24, 0x3C	; 60
 548:	0e 94 b2 04 	call	0x964	; 0x964 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("Km", 1);
 54c:	61 e0       	ldi	r22, 0x01	; 1
 54e:	80 e2       	ldi	r24, 0x20	; 32
 550:	91 e0       	ldi	r25, 0x01	; 1
 552:	0e 94 a1 04 	call	0x942	; 0x942 <nokia_lcd_write_string>
		nokia_lcd_render();
 556:	0e 94 b7 04 	call	0x96e	; 0x96e <nokia_lcd_render>
	
		PORTB &= 0b10000000;		
 55a:	85 b1       	in	r24, 0x05	; 5
 55c:	80 78       	andi	r24, 0x80	; 128
 55e:	85 b9       	out	0x05, r24	; 5
		PORTB |= 0b01100000;
 560:	85 b1       	in	r24, 0x05	; 5
 562:	80 66       	ori	r24, 0x60	; 96
 564:	85 b9       	out	0x05, r24	; 5
		PORTB |= (((velocidade/1)%10) & 0b00001111);
 566:	45 b1       	in	r20, 0x05	; 5
 568:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <velocidade>
 56c:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <velocidade+0x1>
 570:	9f 01       	movw	r18, r30
 572:	ad ec       	ldi	r26, 0xCD	; 205
 574:	bc ec       	ldi	r27, 0xCC	; 204
 576:	0e 94 8c 06 	call	0xd18	; 0xd18 <__umulhisi3>
 57a:	96 95       	lsr	r25
 57c:	87 95       	ror	r24
 57e:	96 95       	lsr	r25
 580:	87 95       	ror	r24
 582:	96 95       	lsr	r25
 584:	87 95       	ror	r24
 586:	9c 01       	movw	r18, r24
 588:	22 0f       	add	r18, r18
 58a:	33 1f       	adc	r19, r19
 58c:	88 0f       	add	r24, r24
 58e:	99 1f       	adc	r25, r25
 590:	88 0f       	add	r24, r24
 592:	99 1f       	adc	r25, r25
 594:	88 0f       	add	r24, r24
 596:	99 1f       	adc	r25, r25
 598:	82 0f       	add	r24, r18
 59a:	93 1f       	adc	r25, r19
 59c:	9f 01       	movw	r18, r30
 59e:	28 1b       	sub	r18, r24
 5a0:	39 0b       	sbc	r19, r25
 5a2:	c9 01       	movw	r24, r18
 5a4:	8f 70       	andi	r24, 0x0F	; 15
 5a6:	84 2b       	or	r24, r20
 5a8:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5aa:	8f ed       	ldi	r24, 0xDF	; 223
 5ac:	9e e2       	ldi	r25, 0x2E	; 46
 5ae:	01 97       	sbiw	r24, 0x01	; 1
 5b0:	f1 f7       	brne	.-4      	; 0x5ae <__EEPROM_REGION_LENGTH__+0x1ae>
 5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <__EEPROM_REGION_LENGTH__+0x1b4>
 5b4:	00 00       	nop
		_delay_ms(tem_delay);
		
		PORTB &= 0b10000000;
 5b6:	85 b1       	in	r24, 0x05	; 5
 5b8:	80 78       	andi	r24, 0x80	; 128
 5ba:	85 b9       	out	0x05, r24	; 5
		PORTB |= 0b01010000;
 5bc:	85 b1       	in	r24, 0x05	; 5
 5be:	80 65       	ori	r24, 0x50	; 80
 5c0:	85 b9       	out	0x05, r24	; 5
		PORTB |= (((velocidade/10)%10) & 0b00001111);
 5c2:	45 b1       	in	r20, 0x05	; 5
 5c4:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <velocidade>
 5c8:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <velocidade+0x1>
 5cc:	0e 94 8c 06 	call	0xd18	; 0xd18 <__umulhisi3>
 5d0:	fc 01       	movw	r30, r24
 5d2:	f6 95       	lsr	r31
 5d4:	e7 95       	ror	r30
 5d6:	f6 95       	lsr	r31
 5d8:	e7 95       	ror	r30
 5da:	f6 95       	lsr	r31
 5dc:	e7 95       	ror	r30
 5de:	9f 01       	movw	r18, r30
 5e0:	0e 94 8c 06 	call	0xd18	; 0xd18 <__umulhisi3>
 5e4:	96 95       	lsr	r25
 5e6:	87 95       	ror	r24
 5e8:	96 95       	lsr	r25
 5ea:	87 95       	ror	r24
 5ec:	96 95       	lsr	r25
 5ee:	87 95       	ror	r24
 5f0:	9c 01       	movw	r18, r24
 5f2:	22 0f       	add	r18, r18
 5f4:	33 1f       	adc	r19, r19
 5f6:	88 0f       	add	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	88 0f       	add	r24, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	88 0f       	add	r24, r24
 600:	99 1f       	adc	r25, r25
 602:	82 0f       	add	r24, r18
 604:	93 1f       	adc	r25, r19
 606:	9f 01       	movw	r18, r30
 608:	28 1b       	sub	r18, r24
 60a:	39 0b       	sbc	r19, r25
 60c:	c9 01       	movw	r24, r18
 60e:	8f 70       	andi	r24, 0x0F	; 15
 610:	84 2b       	or	r24, r20
 612:	85 b9       	out	0x05, r24	; 5
 614:	8f ed       	ldi	r24, 0xDF	; 223
 616:	9e e2       	ldi	r25, 0x2E	; 46
 618:	01 97       	sbiw	r24, 0x01	; 1
 61a:	f1 f7       	brne	.-4      	; 0x618 <__EEPROM_REGION_LENGTH__+0x218>
 61c:	00 c0       	rjmp	.+0      	; 0x61e <__EEPROM_REGION_LENGTH__+0x21e>
 61e:	00 00       	nop
		_delay_ms(tem_delay);
		
		PORTB &= 0b10000000;
 620:	85 b1       	in	r24, 0x05	; 5
 622:	80 78       	andi	r24, 0x80	; 128
 624:	85 b9       	out	0x05, r24	; 5
		PORTB |= 0b00110000;
 626:	85 b1       	in	r24, 0x05	; 5
 628:	80 63       	ori	r24, 0x30	; 48
 62a:	85 b9       	out	0x05, r24	; 5
		PORTB |= (((velocidade/100)%10) & 0b00001111);
 62c:	45 b1       	in	r20, 0x05	; 5
 62e:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <velocidade>
 632:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <velocidade+0x1>
 636:	36 95       	lsr	r19
 638:	27 95       	ror	r18
 63a:	36 95       	lsr	r19
 63c:	27 95       	ror	r18
 63e:	ab e7       	ldi	r26, 0x7B	; 123
 640:	b4 e1       	ldi	r27, 0x14	; 20
 642:	0e 94 8c 06 	call	0xd18	; 0xd18 <__umulhisi3>
 646:	fc 01       	movw	r30, r24
 648:	f6 95       	lsr	r31
 64a:	e7 95       	ror	r30
 64c:	9f 01       	movw	r18, r30
 64e:	ad ec       	ldi	r26, 0xCD	; 205
 650:	bc ec       	ldi	r27, 0xCC	; 204
 652:	0e 94 8c 06 	call	0xd18	; 0xd18 <__umulhisi3>
 656:	96 95       	lsr	r25
 658:	87 95       	ror	r24
 65a:	96 95       	lsr	r25
 65c:	87 95       	ror	r24
 65e:	96 95       	lsr	r25
 660:	87 95       	ror	r24
 662:	9c 01       	movw	r18, r24
 664:	22 0f       	add	r18, r18
 666:	33 1f       	adc	r19, r19
 668:	88 0f       	add	r24, r24
 66a:	99 1f       	adc	r25, r25
 66c:	88 0f       	add	r24, r24
 66e:	99 1f       	adc	r25, r25
 670:	88 0f       	add	r24, r24
 672:	99 1f       	adc	r25, r25
 674:	82 0f       	add	r24, r18
 676:	93 1f       	adc	r25, r19
 678:	9f 01       	movw	r18, r30
 67a:	28 1b       	sub	r18, r24
 67c:	39 0b       	sbc	r19, r25
 67e:	c9 01       	movw	r24, r18
 680:	8f 70       	andi	r24, 0x0F	; 15
 682:	84 2b       	or	r24, r20
 684:	85 b9       	out	0x05, r24	; 5
 686:	8f ed       	ldi	r24, 0xDF	; 223
 688:	9e e2       	ldi	r25, 0x2E	; 46
 68a:	01 97       	sbiw	r24, 0x01	; 1
 68c:	f1 f7       	brne	.-4      	; 0x68a <__EEPROM_REGION_LENGTH__+0x28a>
 68e:	00 c0       	rjmp	.+0      	; 0x690 <__EEPROM_REGION_LENGTH__+0x290>
 690:	00 00       	nop
 692:	c5 ce       	rjmp	.-630    	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>

00000694 <write>:
		nokia_lcd.screen[i] = 0x00;
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
 694:	98 b1       	in	r25, 0x08	; 8
 696:	9d 7f       	andi	r25, 0xFD	; 253
 698:	98 b9       	out	0x08, r25	; 8
 69a:	66 23       	and	r22, r22
 69c:	29 f0       	breq	.+10     	; 0x6a8 <write+0x14>
 69e:	98 b1       	in	r25, 0x08	; 8
 6a0:	98 60       	ori	r25, 0x08	; 8
 6a2:	98 b9       	out	0x08, r25	; 8
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	1f c0       	rjmp	.+62     	; 0x6e6 <write+0x52>
 6a8:	98 b1       	in	r25, 0x08	; 8
 6aa:	97 7f       	andi	r25, 0xF7	; 247
 6ac:	98 b9       	out	0x08, r25	; 8
 6ae:	fa cf       	rjmp	.-12     	; 0x6a4 <write+0x10>
 6b0:	47 e0       	ldi	r20, 0x07	; 7
 6b2:	50 e0       	ldi	r21, 0x00	; 0
 6b4:	49 1b       	sub	r20, r25
 6b6:	51 09       	sbc	r21, r1
 6b8:	28 2f       	mov	r18, r24
 6ba:	30 e0       	ldi	r19, 0x00	; 0
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <write+0x2e>
 6be:	35 95       	asr	r19
 6c0:	27 95       	ror	r18
 6c2:	4a 95       	dec	r20
 6c4:	e2 f7       	brpl	.-8      	; 0x6be <write+0x2a>
 6c6:	20 ff       	sbrs	r18, 0
 6c8:	04 c0       	rjmp	.+8      	; 0x6d2 <write+0x3e>
 6ca:	28 b1       	in	r18, 0x08	; 8
 6cc:	20 61       	ori	r18, 0x10	; 16
 6ce:	28 b9       	out	0x08, r18	; 8
 6d0:	03 c0       	rjmp	.+6      	; 0x6d8 <write+0x44>
 6d2:	28 b1       	in	r18, 0x08	; 8
 6d4:	2f 7e       	andi	r18, 0xEF	; 239
 6d6:	28 b9       	out	0x08, r18	; 8
 6d8:	28 b1       	in	r18, 0x08	; 8
 6da:	20 62       	ori	r18, 0x20	; 32
 6dc:	28 b9       	out	0x08, r18	; 8
 6de:	28 b1       	in	r18, 0x08	; 8
 6e0:	2f 7d       	andi	r18, 0xDF	; 223
 6e2:	28 b9       	out	0x08, r18	; 8
 6e4:	9f 5f       	subi	r25, 0xFF	; 255
 6e6:	98 30       	cpi	r25, 0x08	; 8
 6e8:	18 f3       	brcs	.-58     	; 0x6b0 <write+0x1c>
 6ea:	88 b1       	in	r24, 0x08	; 8
 6ec:	82 60       	ori	r24, 0x02	; 2
 6ee:	88 b9       	out	0x08, r24	; 8
 6f0:	08 95       	ret

000006f2 <write_cmd>:
 6f2:	60 e0       	ldi	r22, 0x00	; 0
 6f4:	0e 94 4a 03 	call	0x694	; 0x694 <write>
 6f8:	08 95       	ret

000006fa <write_data>:
 6fa:	61 e0       	ldi	r22, 0x01	; 1
 6fc:	0e 94 4a 03 	call	0x694	; 0x694 <write>
 700:	08 95       	ret

00000702 <nokia_lcd_init>:
 702:	cf 93       	push	r28
 704:	df 93       	push	r29
 706:	87 b1       	in	r24, 0x07	; 7
 708:	82 60       	ori	r24, 0x02	; 2
 70a:	87 b9       	out	0x07, r24	; 7
 70c:	87 b1       	in	r24, 0x07	; 7
 70e:	84 60       	ori	r24, 0x04	; 4
 710:	87 b9       	out	0x07, r24	; 7
 712:	87 b1       	in	r24, 0x07	; 7
 714:	88 60       	ori	r24, 0x08	; 8
 716:	87 b9       	out	0x07, r24	; 7
 718:	87 b1       	in	r24, 0x07	; 7
 71a:	80 61       	ori	r24, 0x10	; 16
 71c:	87 b9       	out	0x07, r24	; 7
 71e:	87 b1       	in	r24, 0x07	; 7
 720:	80 62       	ori	r24, 0x20	; 32
 722:	87 b9       	out	0x07, r24	; 7
 724:	88 b1       	in	r24, 0x08	; 8
 726:	84 60       	ori	r24, 0x04	; 4
 728:	88 b9       	out	0x08, r24	; 8
 72a:	88 b1       	in	r24, 0x08	; 8
 72c:	82 60       	ori	r24, 0x02	; 2
 72e:	88 b9       	out	0x08, r24	; 8
 730:	83 ec       	ldi	r24, 0xC3	; 195
 732:	99 e0       	ldi	r25, 0x09	; 9
 734:	01 97       	sbiw	r24, 0x01	; 1
 736:	f1 f7       	brne	.-4      	; 0x734 <nokia_lcd_init+0x32>
 738:	00 c0       	rjmp	.+0      	; 0x73a <nokia_lcd_init+0x38>
 73a:	00 00       	nop
 73c:	88 b1       	in	r24, 0x08	; 8
 73e:	8b 7f       	andi	r24, 0xFB	; 251
 740:	88 b9       	out	0x08, r24	; 8
 742:	8b e5       	ldi	r24, 0x5B	; 91
 744:	94 e4       	ldi	r25, 0x44	; 68
 746:	01 97       	sbiw	r24, 0x01	; 1
 748:	f1 f7       	brne	.-4      	; 0x746 <nokia_lcd_init+0x44>
 74a:	00 c0       	rjmp	.+0      	; 0x74c <nokia_lcd_init+0x4a>
 74c:	00 00       	nop
 74e:	88 b1       	in	r24, 0x08	; 8
 750:	84 60       	ori	r24, 0x04	; 4
 752:	88 b9       	out	0x08, r24	; 8
 754:	88 b1       	in	r24, 0x08	; 8
 756:	8d 7f       	andi	r24, 0xFD	; 253
 758:	88 b9       	out	0x08, r24	; 8
 75a:	81 e2       	ldi	r24, 0x21	; 33
 75c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <write_cmd>
 760:	83 e1       	ldi	r24, 0x13	; 19
 762:	0e 94 79 03 	call	0x6f2	; 0x6f2 <write_cmd>
 766:	86 e0       	ldi	r24, 0x06	; 6
 768:	0e 94 79 03 	call	0x6f2	; 0x6f2 <write_cmd>
 76c:	82 ec       	ldi	r24, 0xC2	; 194
 76e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <write_cmd>
 772:	80 e2       	ldi	r24, 0x20	; 32
 774:	0e 94 79 03 	call	0x6f2	; 0x6f2 <write_cmd>
 778:	89 e0       	ldi	r24, 0x09	; 9
 77a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <write_cmd>
 77e:	80 e8       	ldi	r24, 0x80	; 128
 780:	0e 94 79 03 	call	0x6f2	; 0x6f2 <write_cmd>
 784:	80 e4       	ldi	r24, 0x40	; 64
 786:	0e 94 79 03 	call	0x6f2	; 0x6f2 <write_cmd>
 78a:	c0 e0       	ldi	r28, 0x00	; 0
 78c:	d0 e0       	ldi	r29, 0x00	; 0
 78e:	04 c0       	rjmp	.+8      	; 0x798 <nokia_lcd_init+0x96>
 790:	80 e0       	ldi	r24, 0x00	; 0
 792:	0e 94 7d 03 	call	0x6fa	; 0x6fa <write_data>
 796:	21 96       	adiw	r28, 0x01	; 1
 798:	c8 3f       	cpi	r28, 0xF8	; 248
 79a:	91 e0       	ldi	r25, 0x01	; 1
 79c:	d9 07       	cpc	r29, r25
 79e:	c0 f3       	brcs	.-16     	; 0x790 <nokia_lcd_init+0x8e>
 7a0:	88 e0       	ldi	r24, 0x08	; 8
 7a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <write_cmd>
 7a6:	8c e0       	ldi	r24, 0x0C	; 12
 7a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <write_cmd>
 7ac:	df 91       	pop	r29
 7ae:	cf 91       	pop	r28
 7b0:	08 95       	ret

000007b2 <nokia_lcd_clear>:
 7b2:	80 e8       	ldi	r24, 0x80	; 128
 7b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <write_cmd>
 7b8:	80 e4       	ldi	r24, 0x40	; 64
 7ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <write_cmd>
 7be:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <nokia_lcd+0x1f8>
 7c2:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <nokia_lcd+0x1f9>
 7c6:	80 e0       	ldi	r24, 0x00	; 0
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	05 c0       	rjmp	.+10     	; 0x7d6 <nokia_lcd_clear+0x24>
 7cc:	fc 01       	movw	r30, r24
 7ce:	e0 5d       	subi	r30, 0xD0	; 208
 7d0:	fe 4f       	sbci	r31, 0xFE	; 254
 7d2:	10 82       	st	Z, r1
 7d4:	01 96       	adiw	r24, 0x01	; 1
 7d6:	88 3f       	cpi	r24, 0xF8	; 248
 7d8:	21 e0       	ldi	r18, 0x01	; 1
 7da:	92 07       	cpc	r25, r18
 7dc:	b8 f3       	brcs	.-18     	; 0x7cc <nokia_lcd_clear+0x1a>
 7de:	08 95       	ret

000007e0 <nokia_lcd_set_pixel>:
}

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
 7e0:	26 2f       	mov	r18, r22
 7e2:	26 95       	lsr	r18
 7e4:	26 95       	lsr	r18
 7e6:	26 95       	lsr	r18
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	34 e5       	ldi	r19, 0x54	; 84
 7ec:	23 9f       	mul	r18, r19
 7ee:	80 0d       	add	r24, r0
 7f0:	91 1d       	adc	r25, r1
 7f2:	11 24       	eor	r1, r1
	if (value)
 7f4:	44 23       	and	r20, r20
 7f6:	79 f0       	breq	.+30     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
		*byte |= (1 << (y % 8));
 7f8:	67 70       	andi	r22, 0x07	; 7
 7fa:	21 e0       	ldi	r18, 0x01	; 1
 7fc:	30 e0       	ldi	r19, 0x00	; 0
 7fe:	02 c0       	rjmp	.+4      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 800:	22 0f       	add	r18, r18
 802:	33 1f       	adc	r19, r19
 804:	6a 95       	dec	r22
 806:	e2 f7       	brpl	.-8      	; 0x800 <__DATA_REGION_LENGTH__>
 808:	fc 01       	movw	r30, r24
 80a:	e0 5d       	subi	r30, 0xD0	; 208
 80c:	fe 4f       	sbci	r31, 0xFE	; 254
 80e:	80 81       	ld	r24, Z
 810:	28 2b       	or	r18, r24
 812:	20 83       	st	Z, r18
 814:	08 95       	ret
	else
		*byte &= ~(1 << (y %8 ));
 816:	67 70       	andi	r22, 0x07	; 7
 818:	21 e0       	ldi	r18, 0x01	; 1
 81a:	30 e0       	ldi	r19, 0x00	; 0
 81c:	02 c0       	rjmp	.+4      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 81e:	22 0f       	add	r18, r18
 820:	33 1f       	adc	r19, r19
 822:	6a 95       	dec	r22
 824:	e2 f7       	brpl	.-8      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 826:	fc 01       	movw	r30, r24
 828:	e0 5d       	subi	r30, 0xD0	; 208
 82a:	fe 4f       	sbci	r31, 0xFE	; 254
 82c:	20 95       	com	r18
 82e:	80 81       	ld	r24, Z
 830:	28 23       	and	r18, r24
 832:	20 83       	st	Z, r18
 834:	08 95       	ret

00000836 <nokia_lcd_write_char>:
}

void nokia_lcd_write_char(char code, uint8_t scale)
{
 836:	ef 92       	push	r14
 838:	ff 92       	push	r15
 83a:	0f 93       	push	r16
 83c:	1f 93       	push	r17
 83e:	cf 93       	push	r28
 840:	df 93       	push	r29
 842:	e8 2e       	mov	r14, r24
 844:	f6 2e       	mov	r15, r22
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
 846:	00 e0       	ldi	r16, 0x00	; 0
 848:	45 c0       	rjmp	.+138    	; 0x8d4 <nokia_lcd_write_char+0x9e>
		for (y = 0; y < 7*scale; y++)
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
 84a:	2e 2d       	mov	r18, r14
 84c:	30 e0       	ldi	r19, 0x00	; 0
 84e:	20 52       	subi	r18, 0x20	; 32
 850:	31 09       	sbc	r19, r1
 852:	80 2f       	mov	r24, r16
 854:	6f 2d       	mov	r22, r15
 856:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__udivmodqi4>
 85a:	f9 01       	movw	r30, r18
 85c:	ee 0f       	add	r30, r30
 85e:	ff 1f       	adc	r31, r31
 860:	ee 0f       	add	r30, r30
 862:	ff 1f       	adc	r31, r31
 864:	e2 0f       	add	r30, r18
 866:	f3 1f       	adc	r31, r19
 868:	e8 0f       	add	r30, r24
 86a:	f1 1d       	adc	r31, r1
 86c:	e8 59       	subi	r30, 0x98	; 152
 86e:	ff 4f       	sbci	r31, 0xFF	; 255
 870:	e4 91       	lpm	r30, Z
 872:	81 2f       	mov	r24, r17
 874:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__udivmodqi4>
 878:	f0 e0       	ldi	r31, 0x00	; 0
 87a:	02 c0       	rjmp	.+4      	; 0x880 <nokia_lcd_write_char+0x4a>
 87c:	f5 95       	asr	r31
 87e:	e7 95       	ror	r30
 880:	8a 95       	dec	r24
 882:	e2 f7       	brpl	.-8      	; 0x87c <nokia_lcd_write_char+0x46>
 884:	e0 ff       	sbrs	r30, 0
 886:	0a c0       	rjmp	.+20     	; 0x89c <nokia_lcd_write_char+0x66>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
 888:	60 91 29 03 	lds	r22, 0x0329	; 0x800329 <nokia_lcd+0x1f9>
 88c:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <nokia_lcd+0x1f8>
 890:	61 0f       	add	r22, r17
 892:	41 e0       	ldi	r20, 0x01	; 1
 894:	80 0f       	add	r24, r16
 896:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <nokia_lcd_set_pixel>
 89a:	09 c0       	rjmp	.+18     	; 0x8ae <nokia_lcd_write_char+0x78>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
 89c:	60 91 29 03 	lds	r22, 0x0329	; 0x800329 <nokia_lcd+0x1f9>
 8a0:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <nokia_lcd+0x1f8>
 8a4:	61 0f       	add	r22, r17
 8a6:	40 e0       	ldi	r20, 0x00	; 0
 8a8:	80 0f       	add	r24, r16
 8aa:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
 8ae:	1f 5f       	subi	r17, 0xFF	; 255
 8b0:	01 c0       	rjmp	.+2      	; 0x8b4 <nokia_lcd_write_char+0x7e>
 8b2:	10 e0       	ldi	r17, 0x00	; 0
 8b4:	21 2f       	mov	r18, r17
 8b6:	30 e0       	ldi	r19, 0x00	; 0
 8b8:	ce 01       	movw	r24, r28
 8ba:	88 0f       	add	r24, r24
 8bc:	99 1f       	adc	r25, r25
 8be:	88 0f       	add	r24, r24
 8c0:	99 1f       	adc	r25, r25
 8c2:	88 0f       	add	r24, r24
 8c4:	99 1f       	adc	r25, r25
 8c6:	8c 1b       	sub	r24, r28
 8c8:	9d 0b       	sbc	r25, r29
 8ca:	28 17       	cp	r18, r24
 8cc:	39 07       	cpc	r19, r25
 8ce:	0c f4       	brge	.+2      	; 0x8d2 <nokia_lcd_write_char+0x9c>
 8d0:	bc cf       	rjmp	.-136    	; 0x84a <nokia_lcd_write_char+0x14>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
 8d2:	0f 5f       	subi	r16, 0xFF	; 255
 8d4:	20 2f       	mov	r18, r16
 8d6:	30 e0       	ldi	r19, 0x00	; 0
 8d8:	cf 2d       	mov	r28, r15
 8da:	d0 e0       	ldi	r29, 0x00	; 0
 8dc:	ce 01       	movw	r24, r28
 8de:	88 0f       	add	r24, r24
 8e0:	99 1f       	adc	r25, r25
 8e2:	88 0f       	add	r24, r24
 8e4:	99 1f       	adc	r25, r25
 8e6:	8c 0f       	add	r24, r28
 8e8:	9d 1f       	adc	r25, r29
 8ea:	28 17       	cp	r18, r24
 8ec:	39 07       	cpc	r19, r25
 8ee:	0c f3       	brlt	.-62     	; 0x8b2 <nokia_lcd_write_char+0x7c>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
 8f0:	e8 e2       	ldi	r30, 0x28	; 40
 8f2:	f3 e0       	ldi	r31, 0x03	; 3
 8f4:	8f 2d       	mov	r24, r15
 8f6:	88 0f       	add	r24, r24
 8f8:	88 0f       	add	r24, r24
 8fa:	8f 0d       	add	r24, r15
 8fc:	90 81       	ld	r25, Z
 8fe:	89 0f       	add	r24, r25
 900:	8f 5f       	subi	r24, 0xFF	; 255
 902:	80 83       	st	Z, r24
	if (nokia_lcd.cursor_x >= 84) {
 904:	84 35       	cpi	r24, 0x54	; 84
 906:	70 f0       	brcs	.+28     	; 0x924 <__stack+0x25>
		nokia_lcd.cursor_x = 0;
 908:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y += 7*scale + 1;
 90c:	e9 e2       	ldi	r30, 0x29	; 41
 90e:	f3 e0       	ldi	r31, 0x03	; 3
 910:	8f 2d       	mov	r24, r15
 912:	88 0f       	add	r24, r24
 914:	88 0f       	add	r24, r24
 916:	88 0f       	add	r24, r24
 918:	98 2f       	mov	r25, r24
 91a:	9f 19       	sub	r25, r15
 91c:	80 81       	ld	r24, Z
 91e:	89 0f       	add	r24, r25
 920:	8f 5f       	subi	r24, 0xFF	; 255
 922:	80 83       	st	Z, r24
	}
	if (nokia_lcd.cursor_y >= 48) {
 924:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <nokia_lcd+0x1f9>
 928:	80 33       	cpi	r24, 0x30	; 48
 92a:	20 f0       	brcs	.+8      	; 0x934 <__stack+0x35>
		nokia_lcd.cursor_x = 0;
 92c:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y = 0;
 930:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <nokia_lcd+0x1f9>
	}
}
 934:	df 91       	pop	r29
 936:	cf 91       	pop	r28
 938:	1f 91       	pop	r17
 93a:	0f 91       	pop	r16
 93c:	ff 90       	pop	r15
 93e:	ef 90       	pop	r14
 940:	08 95       	ret

00000942 <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
 942:	1f 93       	push	r17
 944:	cf 93       	push	r28
 946:	df 93       	push	r29
 948:	ec 01       	movw	r28, r24
 94a:	16 2f       	mov	r17, r22
	while(*str)
 94c:	04 c0       	rjmp	.+8      	; 0x956 <nokia_lcd_write_string+0x14>
		nokia_lcd_write_char(*str++, scale);
 94e:	21 96       	adiw	r28, 0x01	; 1
 950:	61 2f       	mov	r22, r17
 952:	0e 94 1b 04 	call	0x836	; 0x836 <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
 956:	88 81       	ld	r24, Y
 958:	81 11       	cpse	r24, r1
 95a:	f9 cf       	rjmp	.-14     	; 0x94e <nokia_lcd_write_string+0xc>
		nokia_lcd_write_char(*str++, scale);
}
 95c:	df 91       	pop	r29
 95e:	cf 91       	pop	r28
 960:	1f 91       	pop	r17
 962:	08 95       	ret

00000964 <nokia_lcd_set_cursor>:

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
 964:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <nokia_lcd+0x1f8>
	nokia_lcd.cursor_y = y;
 968:	60 93 29 03 	sts	0x0329, r22	; 0x800329 <nokia_lcd+0x1f9>
 96c:	08 95       	ret

0000096e <nokia_lcd_render>:
}

void nokia_lcd_render(void)
{
 96e:	cf 93       	push	r28
 970:	df 93       	push	r29
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
 972:	80 e8       	ldi	r24, 0x80	; 128
 974:	0e 94 79 03 	call	0x6f2	; 0x6f2 <write_cmd>
	write_cmd(0x40);
 978:	80 e4       	ldi	r24, 0x40	; 64
 97a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <write_cmd>

	/* Write screen to display */
	for (i = 0; i < 504; i++)
 97e:	c0 e0       	ldi	r28, 0x00	; 0
 980:	d0 e0       	ldi	r29, 0x00	; 0
 982:	07 c0       	rjmp	.+14     	; 0x992 <nokia_lcd_render+0x24>
		write_data(nokia_lcd.screen[i]);
 984:	fe 01       	movw	r30, r28
 986:	e0 5d       	subi	r30, 0xD0	; 208
 988:	fe 4f       	sbci	r31, 0xFE	; 254
 98a:	80 81       	ld	r24, Z
 98c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <write_data>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
 990:	21 96       	adiw	r28, 0x01	; 1
 992:	c8 3f       	cpi	r28, 0xF8	; 248
 994:	81 e0       	ldi	r24, 0x01	; 1
 996:	d8 07       	cpc	r29, r24
 998:	a8 f3       	brcs	.-22     	; 0x984 <nokia_lcd_render+0x16>
		write_data(nokia_lcd.screen[i]);
}
 99a:	df 91       	pop	r29
 99c:	cf 91       	pop	r28
 99e:	08 95       	ret

000009a0 <__divsf3>:
 9a0:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__divsf3x>
 9a4:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__fp_round>
 9a8:	0e 94 be 05 	call	0xb7c	; 0xb7c <__fp_pscB>
 9ac:	58 f0       	brcs	.+22     	; 0x9c4 <__divsf3+0x24>
 9ae:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__fp_pscA>
 9b2:	40 f0       	brcs	.+16     	; 0x9c4 <__divsf3+0x24>
 9b4:	29 f4       	brne	.+10     	; 0x9c0 <__divsf3+0x20>
 9b6:	5f 3f       	cpi	r21, 0xFF	; 255
 9b8:	29 f0       	breq	.+10     	; 0x9c4 <__divsf3+0x24>
 9ba:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__fp_inf>
 9be:	51 11       	cpse	r21, r1
 9c0:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__fp_szero>
 9c4:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_nan>

000009c8 <__divsf3x>:
 9c8:	0e 94 d6 05 	call	0xbac	; 0xbac <__fp_split3>
 9cc:	68 f3       	brcs	.-38     	; 0x9a8 <__divsf3+0x8>

000009ce <__divsf3_pse>:
 9ce:	99 23       	and	r25, r25
 9d0:	b1 f3       	breq	.-20     	; 0x9be <__divsf3+0x1e>
 9d2:	55 23       	and	r21, r21
 9d4:	91 f3       	breq	.-28     	; 0x9ba <__divsf3+0x1a>
 9d6:	95 1b       	sub	r25, r21
 9d8:	55 0b       	sbc	r21, r21
 9da:	bb 27       	eor	r27, r27
 9dc:	aa 27       	eor	r26, r26
 9de:	62 17       	cp	r22, r18
 9e0:	73 07       	cpc	r23, r19
 9e2:	84 07       	cpc	r24, r20
 9e4:	38 f0       	brcs	.+14     	; 0x9f4 <__divsf3_pse+0x26>
 9e6:	9f 5f       	subi	r25, 0xFF	; 255
 9e8:	5f 4f       	sbci	r21, 0xFF	; 255
 9ea:	22 0f       	add	r18, r18
 9ec:	33 1f       	adc	r19, r19
 9ee:	44 1f       	adc	r20, r20
 9f0:	aa 1f       	adc	r26, r26
 9f2:	a9 f3       	breq	.-22     	; 0x9de <__divsf3_pse+0x10>
 9f4:	35 d0       	rcall	.+106    	; 0xa60 <__divsf3_pse+0x92>
 9f6:	0e 2e       	mov	r0, r30
 9f8:	3a f0       	brmi	.+14     	; 0xa08 <__divsf3_pse+0x3a>
 9fa:	e0 e8       	ldi	r30, 0x80	; 128
 9fc:	32 d0       	rcall	.+100    	; 0xa62 <__divsf3_pse+0x94>
 9fe:	91 50       	subi	r25, 0x01	; 1
 a00:	50 40       	sbci	r21, 0x00	; 0
 a02:	e6 95       	lsr	r30
 a04:	00 1c       	adc	r0, r0
 a06:	ca f7       	brpl	.-14     	; 0x9fa <__divsf3_pse+0x2c>
 a08:	2b d0       	rcall	.+86     	; 0xa60 <__divsf3_pse+0x92>
 a0a:	fe 2f       	mov	r31, r30
 a0c:	29 d0       	rcall	.+82     	; 0xa60 <__divsf3_pse+0x92>
 a0e:	66 0f       	add	r22, r22
 a10:	77 1f       	adc	r23, r23
 a12:	88 1f       	adc	r24, r24
 a14:	bb 1f       	adc	r27, r27
 a16:	26 17       	cp	r18, r22
 a18:	37 07       	cpc	r19, r23
 a1a:	48 07       	cpc	r20, r24
 a1c:	ab 07       	cpc	r26, r27
 a1e:	b0 e8       	ldi	r27, 0x80	; 128
 a20:	09 f0       	breq	.+2      	; 0xa24 <__divsf3_pse+0x56>
 a22:	bb 0b       	sbc	r27, r27
 a24:	80 2d       	mov	r24, r0
 a26:	bf 01       	movw	r22, r30
 a28:	ff 27       	eor	r31, r31
 a2a:	93 58       	subi	r25, 0x83	; 131
 a2c:	5f 4f       	sbci	r21, 0xFF	; 255
 a2e:	3a f0       	brmi	.+14     	; 0xa3e <__divsf3_pse+0x70>
 a30:	9e 3f       	cpi	r25, 0xFE	; 254
 a32:	51 05       	cpc	r21, r1
 a34:	78 f0       	brcs	.+30     	; 0xa54 <__divsf3_pse+0x86>
 a36:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__fp_inf>
 a3a:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__fp_szero>
 a3e:	5f 3f       	cpi	r21, 0xFF	; 255
 a40:	e4 f3       	brlt	.-8      	; 0xa3a <__divsf3_pse+0x6c>
 a42:	98 3e       	cpi	r25, 0xE8	; 232
 a44:	d4 f3       	brlt	.-12     	; 0xa3a <__divsf3_pse+0x6c>
 a46:	86 95       	lsr	r24
 a48:	77 95       	ror	r23
 a4a:	67 95       	ror	r22
 a4c:	b7 95       	ror	r27
 a4e:	f7 95       	ror	r31
 a50:	9f 5f       	subi	r25, 0xFF	; 255
 a52:	c9 f7       	brne	.-14     	; 0xa46 <__divsf3_pse+0x78>
 a54:	88 0f       	add	r24, r24
 a56:	91 1d       	adc	r25, r1
 a58:	96 95       	lsr	r25
 a5a:	87 95       	ror	r24
 a5c:	97 f9       	bld	r25, 7
 a5e:	08 95       	ret
 a60:	e1 e0       	ldi	r30, 0x01	; 1
 a62:	66 0f       	add	r22, r22
 a64:	77 1f       	adc	r23, r23
 a66:	88 1f       	adc	r24, r24
 a68:	bb 1f       	adc	r27, r27
 a6a:	62 17       	cp	r22, r18
 a6c:	73 07       	cpc	r23, r19
 a6e:	84 07       	cpc	r24, r20
 a70:	ba 07       	cpc	r27, r26
 a72:	20 f0       	brcs	.+8      	; 0xa7c <__divsf3_pse+0xae>
 a74:	62 1b       	sub	r22, r18
 a76:	73 0b       	sbc	r23, r19
 a78:	84 0b       	sbc	r24, r20
 a7a:	ba 0b       	sbc	r27, r26
 a7c:	ee 1f       	adc	r30, r30
 a7e:	88 f7       	brcc	.-30     	; 0xa62 <__divsf3_pse+0x94>
 a80:	e0 95       	com	r30
 a82:	08 95       	ret

00000a84 <__fixunssfsi>:
 a84:	0e 94 de 05 	call	0xbbc	; 0xbbc <__fp_splitA>
 a88:	88 f0       	brcs	.+34     	; 0xaac <__fixunssfsi+0x28>
 a8a:	9f 57       	subi	r25, 0x7F	; 127
 a8c:	98 f0       	brcs	.+38     	; 0xab4 <__fixunssfsi+0x30>
 a8e:	b9 2f       	mov	r27, r25
 a90:	99 27       	eor	r25, r25
 a92:	b7 51       	subi	r27, 0x17	; 23
 a94:	b0 f0       	brcs	.+44     	; 0xac2 <__fixunssfsi+0x3e>
 a96:	e1 f0       	breq	.+56     	; 0xad0 <__fixunssfsi+0x4c>
 a98:	66 0f       	add	r22, r22
 a9a:	77 1f       	adc	r23, r23
 a9c:	88 1f       	adc	r24, r24
 a9e:	99 1f       	adc	r25, r25
 aa0:	1a f0       	brmi	.+6      	; 0xaa8 <__fixunssfsi+0x24>
 aa2:	ba 95       	dec	r27
 aa4:	c9 f7       	brne	.-14     	; 0xa98 <__fixunssfsi+0x14>
 aa6:	14 c0       	rjmp	.+40     	; 0xad0 <__fixunssfsi+0x4c>
 aa8:	b1 30       	cpi	r27, 0x01	; 1
 aaa:	91 f0       	breq	.+36     	; 0xad0 <__fixunssfsi+0x4c>
 aac:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__fp_zero>
 ab0:	b1 e0       	ldi	r27, 0x01	; 1
 ab2:	08 95       	ret
 ab4:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__fp_zero>
 ab8:	67 2f       	mov	r22, r23
 aba:	78 2f       	mov	r23, r24
 abc:	88 27       	eor	r24, r24
 abe:	b8 5f       	subi	r27, 0xF8	; 248
 ac0:	39 f0       	breq	.+14     	; 0xad0 <__fixunssfsi+0x4c>
 ac2:	b9 3f       	cpi	r27, 0xF9	; 249
 ac4:	cc f3       	brlt	.-14     	; 0xab8 <__fixunssfsi+0x34>
 ac6:	86 95       	lsr	r24
 ac8:	77 95       	ror	r23
 aca:	67 95       	ror	r22
 acc:	b3 95       	inc	r27
 ace:	d9 f7       	brne	.-10     	; 0xac6 <__fixunssfsi+0x42>
 ad0:	3e f4       	brtc	.+14     	; 0xae0 <__fixunssfsi+0x5c>
 ad2:	90 95       	com	r25
 ad4:	80 95       	com	r24
 ad6:	70 95       	com	r23
 ad8:	61 95       	neg	r22
 ada:	7f 4f       	sbci	r23, 0xFF	; 255
 adc:	8f 4f       	sbci	r24, 0xFF	; 255
 ade:	9f 4f       	sbci	r25, 0xFF	; 255
 ae0:	08 95       	ret

00000ae2 <__floatunsisf>:
 ae2:	e8 94       	clt
 ae4:	09 c0       	rjmp	.+18     	; 0xaf8 <__floatsisf+0x12>

00000ae6 <__floatsisf>:
 ae6:	97 fb       	bst	r25, 7
 ae8:	3e f4       	brtc	.+14     	; 0xaf8 <__floatsisf+0x12>
 aea:	90 95       	com	r25
 aec:	80 95       	com	r24
 aee:	70 95       	com	r23
 af0:	61 95       	neg	r22
 af2:	7f 4f       	sbci	r23, 0xFF	; 255
 af4:	8f 4f       	sbci	r24, 0xFF	; 255
 af6:	9f 4f       	sbci	r25, 0xFF	; 255
 af8:	99 23       	and	r25, r25
 afa:	a9 f0       	breq	.+42     	; 0xb26 <__floatsisf+0x40>
 afc:	f9 2f       	mov	r31, r25
 afe:	96 e9       	ldi	r25, 0x96	; 150
 b00:	bb 27       	eor	r27, r27
 b02:	93 95       	inc	r25
 b04:	f6 95       	lsr	r31
 b06:	87 95       	ror	r24
 b08:	77 95       	ror	r23
 b0a:	67 95       	ror	r22
 b0c:	b7 95       	ror	r27
 b0e:	f1 11       	cpse	r31, r1
 b10:	f8 cf       	rjmp	.-16     	; 0xb02 <__floatsisf+0x1c>
 b12:	fa f4       	brpl	.+62     	; 0xb52 <__floatsisf+0x6c>
 b14:	bb 0f       	add	r27, r27
 b16:	11 f4       	brne	.+4      	; 0xb1c <__floatsisf+0x36>
 b18:	60 ff       	sbrs	r22, 0
 b1a:	1b c0       	rjmp	.+54     	; 0xb52 <__floatsisf+0x6c>
 b1c:	6f 5f       	subi	r22, 0xFF	; 255
 b1e:	7f 4f       	sbci	r23, 0xFF	; 255
 b20:	8f 4f       	sbci	r24, 0xFF	; 255
 b22:	9f 4f       	sbci	r25, 0xFF	; 255
 b24:	16 c0       	rjmp	.+44     	; 0xb52 <__floatsisf+0x6c>
 b26:	88 23       	and	r24, r24
 b28:	11 f0       	breq	.+4      	; 0xb2e <__floatsisf+0x48>
 b2a:	96 e9       	ldi	r25, 0x96	; 150
 b2c:	11 c0       	rjmp	.+34     	; 0xb50 <__floatsisf+0x6a>
 b2e:	77 23       	and	r23, r23
 b30:	21 f0       	breq	.+8      	; 0xb3a <__floatsisf+0x54>
 b32:	9e e8       	ldi	r25, 0x8E	; 142
 b34:	87 2f       	mov	r24, r23
 b36:	76 2f       	mov	r23, r22
 b38:	05 c0       	rjmp	.+10     	; 0xb44 <__floatsisf+0x5e>
 b3a:	66 23       	and	r22, r22
 b3c:	71 f0       	breq	.+28     	; 0xb5a <__floatsisf+0x74>
 b3e:	96 e8       	ldi	r25, 0x86	; 134
 b40:	86 2f       	mov	r24, r22
 b42:	70 e0       	ldi	r23, 0x00	; 0
 b44:	60 e0       	ldi	r22, 0x00	; 0
 b46:	2a f0       	brmi	.+10     	; 0xb52 <__floatsisf+0x6c>
 b48:	9a 95       	dec	r25
 b4a:	66 0f       	add	r22, r22
 b4c:	77 1f       	adc	r23, r23
 b4e:	88 1f       	adc	r24, r24
 b50:	da f7       	brpl	.-10     	; 0xb48 <__floatsisf+0x62>
 b52:	88 0f       	add	r24, r24
 b54:	96 95       	lsr	r25
 b56:	87 95       	ror	r24
 b58:	97 f9       	bld	r25, 7
 b5a:	08 95       	ret

00000b5c <__fp_inf>:
 b5c:	97 f9       	bld	r25, 7
 b5e:	9f 67       	ori	r25, 0x7F	; 127
 b60:	80 e8       	ldi	r24, 0x80	; 128
 b62:	70 e0       	ldi	r23, 0x00	; 0
 b64:	60 e0       	ldi	r22, 0x00	; 0
 b66:	08 95       	ret

00000b68 <__fp_nan>:
 b68:	9f ef       	ldi	r25, 0xFF	; 255
 b6a:	80 ec       	ldi	r24, 0xC0	; 192
 b6c:	08 95       	ret

00000b6e <__fp_pscA>:
 b6e:	00 24       	eor	r0, r0
 b70:	0a 94       	dec	r0
 b72:	16 16       	cp	r1, r22
 b74:	17 06       	cpc	r1, r23
 b76:	18 06       	cpc	r1, r24
 b78:	09 06       	cpc	r0, r25
 b7a:	08 95       	ret

00000b7c <__fp_pscB>:
 b7c:	00 24       	eor	r0, r0
 b7e:	0a 94       	dec	r0
 b80:	12 16       	cp	r1, r18
 b82:	13 06       	cpc	r1, r19
 b84:	14 06       	cpc	r1, r20
 b86:	05 06       	cpc	r0, r21
 b88:	08 95       	ret

00000b8a <__fp_round>:
 b8a:	09 2e       	mov	r0, r25
 b8c:	03 94       	inc	r0
 b8e:	00 0c       	add	r0, r0
 b90:	11 f4       	brne	.+4      	; 0xb96 <__fp_round+0xc>
 b92:	88 23       	and	r24, r24
 b94:	52 f0       	brmi	.+20     	; 0xbaa <__fp_round+0x20>
 b96:	bb 0f       	add	r27, r27
 b98:	40 f4       	brcc	.+16     	; 0xbaa <__fp_round+0x20>
 b9a:	bf 2b       	or	r27, r31
 b9c:	11 f4       	brne	.+4      	; 0xba2 <__fp_round+0x18>
 b9e:	60 ff       	sbrs	r22, 0
 ba0:	04 c0       	rjmp	.+8      	; 0xbaa <__fp_round+0x20>
 ba2:	6f 5f       	subi	r22, 0xFF	; 255
 ba4:	7f 4f       	sbci	r23, 0xFF	; 255
 ba6:	8f 4f       	sbci	r24, 0xFF	; 255
 ba8:	9f 4f       	sbci	r25, 0xFF	; 255
 baa:	08 95       	ret

00000bac <__fp_split3>:
 bac:	57 fd       	sbrc	r21, 7
 bae:	90 58       	subi	r25, 0x80	; 128
 bb0:	44 0f       	add	r20, r20
 bb2:	55 1f       	adc	r21, r21
 bb4:	59 f0       	breq	.+22     	; 0xbcc <__fp_splitA+0x10>
 bb6:	5f 3f       	cpi	r21, 0xFF	; 255
 bb8:	71 f0       	breq	.+28     	; 0xbd6 <__fp_splitA+0x1a>
 bba:	47 95       	ror	r20

00000bbc <__fp_splitA>:
 bbc:	88 0f       	add	r24, r24
 bbe:	97 fb       	bst	r25, 7
 bc0:	99 1f       	adc	r25, r25
 bc2:	61 f0       	breq	.+24     	; 0xbdc <__fp_splitA+0x20>
 bc4:	9f 3f       	cpi	r25, 0xFF	; 255
 bc6:	79 f0       	breq	.+30     	; 0xbe6 <__fp_splitA+0x2a>
 bc8:	87 95       	ror	r24
 bca:	08 95       	ret
 bcc:	12 16       	cp	r1, r18
 bce:	13 06       	cpc	r1, r19
 bd0:	14 06       	cpc	r1, r20
 bd2:	55 1f       	adc	r21, r21
 bd4:	f2 cf       	rjmp	.-28     	; 0xbba <__fp_split3+0xe>
 bd6:	46 95       	lsr	r20
 bd8:	f1 df       	rcall	.-30     	; 0xbbc <__fp_splitA>
 bda:	08 c0       	rjmp	.+16     	; 0xbec <__fp_splitA+0x30>
 bdc:	16 16       	cp	r1, r22
 bde:	17 06       	cpc	r1, r23
 be0:	18 06       	cpc	r1, r24
 be2:	99 1f       	adc	r25, r25
 be4:	f1 cf       	rjmp	.-30     	; 0xbc8 <__fp_splitA+0xc>
 be6:	86 95       	lsr	r24
 be8:	71 05       	cpc	r23, r1
 bea:	61 05       	cpc	r22, r1
 bec:	08 94       	sec
 bee:	08 95       	ret

00000bf0 <__fp_zero>:
 bf0:	e8 94       	clt

00000bf2 <__fp_szero>:
 bf2:	bb 27       	eor	r27, r27
 bf4:	66 27       	eor	r22, r22
 bf6:	77 27       	eor	r23, r23
 bf8:	cb 01       	movw	r24, r22
 bfa:	97 f9       	bld	r25, 7
 bfc:	08 95       	ret

00000bfe <__mulsf3>:
 bfe:	0e 94 12 06 	call	0xc24	; 0xc24 <__mulsf3x>
 c02:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__fp_round>
 c06:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__fp_pscA>
 c0a:	38 f0       	brcs	.+14     	; 0xc1a <__mulsf3+0x1c>
 c0c:	0e 94 be 05 	call	0xb7c	; 0xb7c <__fp_pscB>
 c10:	20 f0       	brcs	.+8      	; 0xc1a <__mulsf3+0x1c>
 c12:	95 23       	and	r25, r21
 c14:	11 f0       	breq	.+4      	; 0xc1a <__mulsf3+0x1c>
 c16:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__fp_inf>
 c1a:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_nan>
 c1e:	11 24       	eor	r1, r1
 c20:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__fp_szero>

00000c24 <__mulsf3x>:
 c24:	0e 94 d6 05 	call	0xbac	; 0xbac <__fp_split3>
 c28:	70 f3       	brcs	.-36     	; 0xc06 <__mulsf3+0x8>

00000c2a <__mulsf3_pse>:
 c2a:	95 9f       	mul	r25, r21
 c2c:	c1 f3       	breq	.-16     	; 0xc1e <__mulsf3+0x20>
 c2e:	95 0f       	add	r25, r21
 c30:	50 e0       	ldi	r21, 0x00	; 0
 c32:	55 1f       	adc	r21, r21
 c34:	62 9f       	mul	r22, r18
 c36:	f0 01       	movw	r30, r0
 c38:	72 9f       	mul	r23, r18
 c3a:	bb 27       	eor	r27, r27
 c3c:	f0 0d       	add	r31, r0
 c3e:	b1 1d       	adc	r27, r1
 c40:	63 9f       	mul	r22, r19
 c42:	aa 27       	eor	r26, r26
 c44:	f0 0d       	add	r31, r0
 c46:	b1 1d       	adc	r27, r1
 c48:	aa 1f       	adc	r26, r26
 c4a:	64 9f       	mul	r22, r20
 c4c:	66 27       	eor	r22, r22
 c4e:	b0 0d       	add	r27, r0
 c50:	a1 1d       	adc	r26, r1
 c52:	66 1f       	adc	r22, r22
 c54:	82 9f       	mul	r24, r18
 c56:	22 27       	eor	r18, r18
 c58:	b0 0d       	add	r27, r0
 c5a:	a1 1d       	adc	r26, r1
 c5c:	62 1f       	adc	r22, r18
 c5e:	73 9f       	mul	r23, r19
 c60:	b0 0d       	add	r27, r0
 c62:	a1 1d       	adc	r26, r1
 c64:	62 1f       	adc	r22, r18
 c66:	83 9f       	mul	r24, r19
 c68:	a0 0d       	add	r26, r0
 c6a:	61 1d       	adc	r22, r1
 c6c:	22 1f       	adc	r18, r18
 c6e:	74 9f       	mul	r23, r20
 c70:	33 27       	eor	r19, r19
 c72:	a0 0d       	add	r26, r0
 c74:	61 1d       	adc	r22, r1
 c76:	23 1f       	adc	r18, r19
 c78:	84 9f       	mul	r24, r20
 c7a:	60 0d       	add	r22, r0
 c7c:	21 1d       	adc	r18, r1
 c7e:	82 2f       	mov	r24, r18
 c80:	76 2f       	mov	r23, r22
 c82:	6a 2f       	mov	r22, r26
 c84:	11 24       	eor	r1, r1
 c86:	9f 57       	subi	r25, 0x7F	; 127
 c88:	50 40       	sbci	r21, 0x00	; 0
 c8a:	9a f0       	brmi	.+38     	; 0xcb2 <__mulsf3_pse+0x88>
 c8c:	f1 f0       	breq	.+60     	; 0xcca <__mulsf3_pse+0xa0>
 c8e:	88 23       	and	r24, r24
 c90:	4a f0       	brmi	.+18     	; 0xca4 <__mulsf3_pse+0x7a>
 c92:	ee 0f       	add	r30, r30
 c94:	ff 1f       	adc	r31, r31
 c96:	bb 1f       	adc	r27, r27
 c98:	66 1f       	adc	r22, r22
 c9a:	77 1f       	adc	r23, r23
 c9c:	88 1f       	adc	r24, r24
 c9e:	91 50       	subi	r25, 0x01	; 1
 ca0:	50 40       	sbci	r21, 0x00	; 0
 ca2:	a9 f7       	brne	.-22     	; 0xc8e <__mulsf3_pse+0x64>
 ca4:	9e 3f       	cpi	r25, 0xFE	; 254
 ca6:	51 05       	cpc	r21, r1
 ca8:	80 f0       	brcs	.+32     	; 0xcca <__mulsf3_pse+0xa0>
 caa:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__fp_inf>
 cae:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__fp_szero>
 cb2:	5f 3f       	cpi	r21, 0xFF	; 255
 cb4:	e4 f3       	brlt	.-8      	; 0xcae <__mulsf3_pse+0x84>
 cb6:	98 3e       	cpi	r25, 0xE8	; 232
 cb8:	d4 f3       	brlt	.-12     	; 0xcae <__mulsf3_pse+0x84>
 cba:	86 95       	lsr	r24
 cbc:	77 95       	ror	r23
 cbe:	67 95       	ror	r22
 cc0:	b7 95       	ror	r27
 cc2:	f7 95       	ror	r31
 cc4:	e7 95       	ror	r30
 cc6:	9f 5f       	subi	r25, 0xFF	; 255
 cc8:	c1 f7       	brne	.-16     	; 0xcba <__mulsf3_pse+0x90>
 cca:	fe 2b       	or	r31, r30
 ccc:	88 0f       	add	r24, r24
 cce:	91 1d       	adc	r25, r1
 cd0:	96 95       	lsr	r25
 cd2:	87 95       	ror	r24
 cd4:	97 f9       	bld	r25, 7
 cd6:	08 95       	ret

00000cd8 <__udivmodqi4>:
 cd8:	99 1b       	sub	r25, r25
 cda:	79 e0       	ldi	r23, 0x09	; 9
 cdc:	04 c0       	rjmp	.+8      	; 0xce6 <__udivmodqi4_ep>

00000cde <__udivmodqi4_loop>:
 cde:	99 1f       	adc	r25, r25
 ce0:	96 17       	cp	r25, r22
 ce2:	08 f0       	brcs	.+2      	; 0xce6 <__udivmodqi4_ep>
 ce4:	96 1b       	sub	r25, r22

00000ce6 <__udivmodqi4_ep>:
 ce6:	88 1f       	adc	r24, r24
 ce8:	7a 95       	dec	r23
 cea:	c9 f7       	brne	.-14     	; 0xcde <__udivmodqi4_loop>
 cec:	80 95       	com	r24
 cee:	08 95       	ret

00000cf0 <__udivmodhi4>:
 cf0:	aa 1b       	sub	r26, r26
 cf2:	bb 1b       	sub	r27, r27
 cf4:	51 e1       	ldi	r21, 0x11	; 17
 cf6:	07 c0       	rjmp	.+14     	; 0xd06 <__udivmodhi4_ep>

00000cf8 <__udivmodhi4_loop>:
 cf8:	aa 1f       	adc	r26, r26
 cfa:	bb 1f       	adc	r27, r27
 cfc:	a6 17       	cp	r26, r22
 cfe:	b7 07       	cpc	r27, r23
 d00:	10 f0       	brcs	.+4      	; 0xd06 <__udivmodhi4_ep>
 d02:	a6 1b       	sub	r26, r22
 d04:	b7 0b       	sbc	r27, r23

00000d06 <__udivmodhi4_ep>:
 d06:	88 1f       	adc	r24, r24
 d08:	99 1f       	adc	r25, r25
 d0a:	5a 95       	dec	r21
 d0c:	a9 f7       	brne	.-22     	; 0xcf8 <__udivmodhi4_loop>
 d0e:	80 95       	com	r24
 d10:	90 95       	com	r25
 d12:	bc 01       	movw	r22, r24
 d14:	cd 01       	movw	r24, r26
 d16:	08 95       	ret

00000d18 <__umulhisi3>:
 d18:	a2 9f       	mul	r26, r18
 d1a:	b0 01       	movw	r22, r0
 d1c:	b3 9f       	mul	r27, r19
 d1e:	c0 01       	movw	r24, r0
 d20:	a3 9f       	mul	r26, r19
 d22:	70 0d       	add	r23, r0
 d24:	81 1d       	adc	r24, r1
 d26:	11 24       	eor	r1, r1
 d28:	91 1d       	adc	r25, r1
 d2a:	b2 9f       	mul	r27, r18
 d2c:	70 0d       	add	r23, r0
 d2e:	81 1d       	adc	r24, r1
 d30:	11 24       	eor	r1, r1
 d32:	91 1d       	adc	r25, r1
 d34:	08 95       	ret

00000d36 <__itoa_ncheck>:
 d36:	bb 27       	eor	r27, r27
 d38:	4a 30       	cpi	r20, 0x0A	; 10
 d3a:	31 f4       	brne	.+12     	; 0xd48 <__itoa_ncheck+0x12>
 d3c:	99 23       	and	r25, r25
 d3e:	22 f4       	brpl	.+8      	; 0xd48 <__itoa_ncheck+0x12>
 d40:	bd e2       	ldi	r27, 0x2D	; 45
 d42:	90 95       	com	r25
 d44:	81 95       	neg	r24
 d46:	9f 4f       	sbci	r25, 0xFF	; 255
 d48:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__utoa_common>

00000d4c <__utoa_ncheck>:
 d4c:	bb 27       	eor	r27, r27

00000d4e <__utoa_common>:
 d4e:	fb 01       	movw	r30, r22
 d50:	55 27       	eor	r21, r21
 d52:	aa 27       	eor	r26, r26
 d54:	88 0f       	add	r24, r24
 d56:	99 1f       	adc	r25, r25
 d58:	aa 1f       	adc	r26, r26
 d5a:	a4 17       	cp	r26, r20
 d5c:	10 f0       	brcs	.+4      	; 0xd62 <__utoa_common+0x14>
 d5e:	a4 1b       	sub	r26, r20
 d60:	83 95       	inc	r24
 d62:	50 51       	subi	r21, 0x10	; 16
 d64:	b9 f7       	brne	.-18     	; 0xd54 <__utoa_common+0x6>
 d66:	a0 5d       	subi	r26, 0xD0	; 208
 d68:	aa 33       	cpi	r26, 0x3A	; 58
 d6a:	08 f0       	brcs	.+2      	; 0xd6e <__utoa_common+0x20>
 d6c:	a9 5d       	subi	r26, 0xD9	; 217
 d6e:	a1 93       	st	Z+, r26
 d70:	00 97       	sbiw	r24, 0x00	; 0
 d72:	79 f7       	brne	.-34     	; 0xd52 <__utoa_common+0x4>
 d74:	b1 11       	cpse	r27, r1
 d76:	b1 93       	st	Z+, r27
 d78:	11 92       	st	Z+, r1
 d7a:	cb 01       	movw	r24, r22
 d7c:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <strrev>

00000d80 <strrev>:
 d80:	dc 01       	movw	r26, r24
 d82:	fc 01       	movw	r30, r24
 d84:	67 2f       	mov	r22, r23
 d86:	71 91       	ld	r23, Z+
 d88:	77 23       	and	r23, r23
 d8a:	e1 f7       	brne	.-8      	; 0xd84 <strrev+0x4>
 d8c:	32 97       	sbiw	r30, 0x02	; 2
 d8e:	04 c0       	rjmp	.+8      	; 0xd98 <strrev+0x18>
 d90:	7c 91       	ld	r23, X
 d92:	6d 93       	st	X+, r22
 d94:	70 83       	st	Z, r23
 d96:	62 91       	ld	r22, -Z
 d98:	ae 17       	cp	r26, r30
 d9a:	bf 07       	cpc	r27, r31
 d9c:	c8 f3       	brcs	.-14     	; 0xd90 <strrev+0x10>
 d9e:	08 95       	ret

00000da0 <_exit>:
 da0:	f8 94       	cli

00000da2 <__stop_program>:
 da2:	ff cf       	rjmp	.-2      	; 0xda2 <__stop_program>
