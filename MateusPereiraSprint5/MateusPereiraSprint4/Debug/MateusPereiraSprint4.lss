
MateusPereiraSprint4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00000eec  00000f80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000eec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000021c  0080013e  0080013e  00000fbe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fbe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ff0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00001030  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000139a  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b2  00000000  00000000  00002482  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000091a  00000000  00000000  00002e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  00003750  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000591  00000000  00000000  00003978  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000083d  00000000  00000000  00003f09  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00004746  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 24 01 	jmp	0x248	; 0x248 <__ctors_end>
   4:	0c 94 43 01 	jmp	0x286	; 0x286 <__vector_1>
   8:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__vector_2>
   c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  10:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  14:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__vector_5>
  18:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  1c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  20:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  24:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  28:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  2c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  30:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  34:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  38:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__vector_14>
  3c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  40:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  44:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  48:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  4c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  50:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  54:	0c 94 0c 02 	jmp	0x418	; 0x418 <__vector_21>
  58:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  5c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  60:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  64:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>

00000068 <CHARSET>:
  68:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
  78:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
  88:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
  98:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
  a8:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
  b8:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
  c8:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
  d8:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
  e8:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
  f8:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
 108:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
 118:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
 128:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
 138:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
 148:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
 158:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
 168:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
 178:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
 188:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
 198:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
 1a8:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
 1b8:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
 1c8:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
 1d8:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
 1e8:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
 1f8:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
 208:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
 218:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
 228:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
 238:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

00000248 <__ctors_end>:
 248:	11 24       	eor	r1, r1
 24a:	1f be       	out	0x3f, r1	; 63
 24c:	cf ef       	ldi	r28, 0xFF	; 255
 24e:	d8 e0       	ldi	r29, 0x08	; 8
 250:	de bf       	out	0x3e, r29	; 62
 252:	cd bf       	out	0x3d, r28	; 61

00000254 <__do_copy_data>:
 254:	11 e0       	ldi	r17, 0x01	; 1
 256:	a0 e0       	ldi	r26, 0x00	; 0
 258:	b1 e0       	ldi	r27, 0x01	; 1
 25a:	ec ee       	ldi	r30, 0xEC	; 236
 25c:	fe e0       	ldi	r31, 0x0E	; 14
 25e:	02 c0       	rjmp	.+4      	; 0x264 <__do_copy_data+0x10>
 260:	05 90       	lpm	r0, Z+
 262:	0d 92       	st	X+, r0
 264:	ae 33       	cpi	r26, 0x3E	; 62
 266:	b1 07       	cpc	r27, r17
 268:	d9 f7       	brne	.-10     	; 0x260 <__do_copy_data+0xc>

0000026a <__do_clear_bss>:
 26a:	23 e0       	ldi	r18, 0x03	; 3
 26c:	ae e3       	ldi	r26, 0x3E	; 62
 26e:	b1 e0       	ldi	r27, 0x01	; 1
 270:	01 c0       	rjmp	.+2      	; 0x274 <.do_clear_bss_start>

00000272 <.do_clear_bss_loop>:
 272:	1d 92       	st	X+, r1

00000274 <.do_clear_bss_start>:
 274:	aa 35       	cpi	r26, 0x5A	; 90
 276:	b2 07       	cpc	r27, r18
 278:	e1 f7       	brne	.-8      	; 0x272 <.do_clear_bss_loop>
 27a:	0e 94 40 02 	call	0x480	; 0x480 <main>
 27e:	0c 94 74 07 	jmp	0xee8	; 0xee8 <_exit>

00000282 <__bad_interrupt>:
 282:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000286 <__vector_1>:

uint16_t tamroda = 50, rpm = 0, dist = 0, velocidade = 0, tempo_ms = 0, mudanca = 0, aux_dist = 0, leitura_ADC = 0, aux_pwm = 0, modo_p = 0, pqp = 0;
unsigned char display_string[tamanho_vetor];

ISR(INT0_vect)
{
 286:	1f 92       	push	r1
 288:	0f 92       	push	r0
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	0f 92       	push	r0
 28e:	11 24       	eor	r1, r1
 290:	8f 93       	push	r24
 292:	9f 93       	push	r25
	tamroda++;
 294:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 298:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 29c:	01 96       	adiw	r24, 0x01	; 1
 29e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2a2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 2a6:	9f 91       	pop	r25
 2a8:	8f 91       	pop	r24
 2aa:	0f 90       	pop	r0
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	0f 90       	pop	r0
 2b0:	1f 90       	pop	r1
 2b2:	18 95       	reti

000002b4 <__vector_2>:

ISR(INT1_vect)
{
 2b4:	1f 92       	push	r1
 2b6:	0f 92       	push	r0
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	0f 92       	push	r0
 2bc:	11 24       	eor	r1, r1
 2be:	8f 93       	push	r24
 2c0:	9f 93       	push	r25
	tamroda--;
 2c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2c6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 2d4:	9f 91       	pop	r25
 2d6:	8f 91       	pop	r24
 2d8:	0f 90       	pop	r0
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	0f 90       	pop	r0
 2de:	1f 90       	pop	r1
 2e0:	18 95       	reti

000002e2 <__vector_14>:

ISR(TIMER0_COMPA_vect) // Interrupção do TC0 a  cada 1ms
{
 2e2:	1f 92       	push	r1
 2e4:	0f 92       	push	r0
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	0f 92       	push	r0
 2ea:	11 24       	eor	r1, r1
 2ec:	2f 93       	push	r18
 2ee:	3f 93       	push	r19
 2f0:	4f 93       	push	r20
 2f2:	5f 93       	push	r21
 2f4:	6f 93       	push	r22
 2f6:	7f 93       	push	r23
 2f8:	8f 93       	push	r24
 2fa:	9f 93       	push	r25
 2fc:	af 93       	push	r26
 2fe:	bf 93       	push	r27
 300:	ef 93       	push	r30
 302:	ff 93       	push	r31
	static float aux;
	tempo_ms++;
 304:	40 91 48 01 	lds	r20, 0x0148	; 0x800148 <tempo_ms>
 308:	50 91 49 01 	lds	r21, 0x0149	; 0x800149 <tempo_ms+0x1>
 30c:	4f 5f       	subi	r20, 0xFF	; 255
 30e:	5f 4f       	sbci	r21, 0xFF	; 255
 310:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <tempo_ms+0x1>
 314:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <tempo_ms>
	if((tempo_ms % 1000) == 0) // Entra a cada 1 segundo
 318:	9a 01       	movw	r18, r20
 31a:	36 95       	lsr	r19
 31c:	27 95       	ror	r18
 31e:	36 95       	lsr	r19
 320:	27 95       	ror	r18
 322:	36 95       	lsr	r19
 324:	27 95       	ror	r18
 326:	a5 ec       	ldi	r26, 0xC5	; 197
 328:	b0 e2       	ldi	r27, 0x20	; 32
 32a:	0e 94 30 07 	call	0xe60	; 0xe60 <__umulhisi3>
 32e:	92 95       	swap	r25
 330:	82 95       	swap	r24
 332:	8f 70       	andi	r24, 0x0F	; 15
 334:	89 27       	eor	r24, r25
 336:	9f 70       	andi	r25, 0x0F	; 15
 338:	89 27       	eor	r24, r25
 33a:	68 ee       	ldi	r22, 0xE8	; 232
 33c:	73 e0       	ldi	r23, 0x03	; 3
 33e:	86 9f       	mul	r24, r22
 340:	90 01       	movw	r18, r0
 342:	87 9f       	mul	r24, r23
 344:	30 0d       	add	r19, r0
 346:	96 9f       	mul	r25, r22
 348:	30 0d       	add	r19, r0
 34a:	11 24       	eor	r1, r1
 34c:	42 17       	cp	r20, r18
 34e:	53 07       	cpc	r21, r19
 350:	09 f5       	brne	.+66     	; 0x394 <__vector_14+0xb2>
	{
		aux = mudanca; // Vamos ter rotações por segundo
 352:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <mudanca>
 356:	70 91 47 01 	lds	r23, 0x0147	; 0x800147 <mudanca+0x1>
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 15 06 	call	0xc2a	; 0xc2a <__floatunsisf>
		rpm = (aux*60);
 362:	20 e0       	ldi	r18, 0x00	; 0
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	40 e7       	ldi	r20, 0x70	; 112
 368:	52 e4       	ldi	r21, 0x42	; 66
 36a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__mulsf3>
 36e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__fixunssfsi>
 372:	70 93 4f 01 	sts	0x014F, r23	; 0x80014f <rpm+0x1>
 376:	60 93 4e 01 	sts	0x014E, r22	; 0x80014e <rpm>
		mudanca = 0;
 37a:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <mudanca+0x1>
 37e:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <mudanca>
		aux_dist++;	// Conta de 1 em 1 Segundo
 382:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <aux_dist>
 386:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <aux_dist+0x1>
 38a:	01 96       	adiw	r24, 0x01	; 1
 38c:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <aux_dist+0x1>
 390:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <aux_dist>
	}
}
 394:	ff 91       	pop	r31
 396:	ef 91       	pop	r30
 398:	bf 91       	pop	r27
 39a:	af 91       	pop	r26
 39c:	9f 91       	pop	r25
 39e:	8f 91       	pop	r24
 3a0:	7f 91       	pop	r23
 3a2:	6f 91       	pop	r22
 3a4:	5f 91       	pop	r21
 3a6:	4f 91       	pop	r20
 3a8:	3f 91       	pop	r19
 3aa:	2f 91       	pop	r18
 3ac:	0f 90       	pop	r0
 3ae:	0f be       	out	0x3f, r0	; 63
 3b0:	0f 90       	pop	r0
 3b2:	1f 90       	pop	r1
 3b4:	18 95       	reti

000003b6 <__vector_5>:

ISR(PCINT2_vect) // Interrupção 2 por mudança de pino
{
 3b6:	1f 92       	push	r1
 3b8:	0f 92       	push	r0
 3ba:	0f b6       	in	r0, 0x3f	; 63
 3bc:	0f 92       	push	r0
 3be:	11 24       	eor	r1, r1
 3c0:	8f 93       	push	r24
 3c2:	9f 93       	push	r25
	if (!teste_porta (PIND, PD1)) // Pega a variação em PD1
 3c4:	49 99       	sbic	0x09, 1	; 9
 3c6:	09 c0       	rjmp	.+18     	; 0x3da <__vector_5+0x24>
	{
		mudanca++; // Conta descida e subida
 3c8:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <mudanca>
 3cc:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <mudanca+0x1>
 3d0:	01 96       	adiw	r24, 0x01	; 1
 3d2:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <mudanca+0x1>
 3d6:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <mudanca>
	}
	
	if (teste_porta(PIND,PD4)==0) // SE APERTAR O BOTÃO P CAI AQUI
 3da:	4c 99       	sbic	0x09, 4	; 9
 3dc:	07 c0       	rjmp	.+14     	; 0x3ec <__vector_5+0x36>
	{
		pqp = 5; // carro parado
 3de:	85 e0       	ldi	r24, 0x05	; 5
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <__data_end+0x1>
 3e6:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
 3ea:	0f c0       	rjmp	.+30     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
	}
		else if (teste_porta(PIND,PD5)==0) // SE APERTAR O BOTÃO D/R CAI AQUI
 3ec:	4d 99       	sbic	0x09, 5	; 9
 3ee:	07 c0       	rjmp	.+14     	; 0x3fe <__vector_5+0x48>
		{
			pqp = 11; // Motor sentido horário - D
 3f0:	8b e0       	ldi	r24, 0x0B	; 11
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <__data_end+0x1>
 3f8:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
 3fc:	06 c0       	rjmp	.+12     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
		}
			else
			{
				pqp = 13; // Motor sentido anti-horário - R
 3fe:	8d e0       	ldi	r24, 0x0D	; 13
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <__data_end+0x1>
 406:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
			}
}
 40a:	9f 91       	pop	r25
 40c:	8f 91       	pop	r24
 40e:	0f 90       	pop	r0
 410:	0f be       	out	0x3f, r0	; 63
 412:	0f 90       	pop	r0
 414:	1f 90       	pop	r1
 416:	18 95       	reti

00000418 <__vector_21>:

ISR(ADC_vect)
{
 418:	1f 92       	push	r1
 41a:	0f 92       	push	r0
 41c:	0f b6       	in	r0, 0x3f	; 63
 41e:	0f 92       	push	r0
 420:	11 24       	eor	r1, r1
 422:	2f 93       	push	r18
 424:	8f 93       	push	r24
 426:	9f 93       	push	r25
 428:	ef 93       	push	r30
 42a:	ff 93       	push	r31
	leitura_ADC = ADC; //cópia do valor ADC para uma variavél
 42c:	e8 e7       	ldi	r30, 0x78	; 120
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	80 81       	ld	r24, Z
 432:	91 81       	ldd	r25, Z+1	; 0x01
 434:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <leitura_ADC+0x1>
 438:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <leitura_ADC>
	
	if (ADC==1023)
 43c:	80 81       	ld	r24, Z
 43e:	91 81       	ldd	r25, Z+1	; 0x01
 440:	8f 3f       	cpi	r24, 0xFF	; 255
 442:	93 40       	sbci	r25, 0x03	; 3
 444:	39 f4       	brne	.+14     	; 0x454 <__vector_21+0x3c>
	{
		aux_pwm = 255;
 446:	8f ef       	ldi	r24, 0xFF	; 255
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <aux_pwm+0x1>
 44e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <aux_pwm>
 452:	0c c0       	rjmp	.+24     	; 0x46c <__vector_21+0x54>
	}
	else
	{
		aux_pwm = (ADC/4);
 454:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 458:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 45c:	96 95       	lsr	r25
 45e:	87 95       	ror	r24
 460:	96 95       	lsr	r25
 462:	87 95       	ror	r24
 464:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <aux_pwm+0x1>
 468:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <aux_pwm>
	}
	
}
 46c:	ff 91       	pop	r31
 46e:	ef 91       	pop	r30
 470:	9f 91       	pop	r25
 472:	8f 91       	pop	r24
 474:	2f 91       	pop	r18
 476:	0f 90       	pop	r0
 478:	0f be       	out	0x3f, r0	; 63
 47a:	0f 90       	pop	r0
 47c:	1f 90       	pop	r1
 47e:	18 95       	reti

00000480 <main>:

int main(void)
{
		DDRC  = 0b11111110; //Definindo PC0 como entrada
 480:	8e ef       	ldi	r24, 0xFE	; 254
 482:	87 b9       	out	0x07, r24	; 7
		DDRB  = 0b11111111;
 484:	9f ef       	ldi	r25, 0xFF	; 255
 486:	94 b9       	out	0x04, r25	; 4
		DDRD  = 0b01000001; // PD0 e PD6 como saídas
 488:	91 e4       	ldi	r25, 0x41	; 65
 48a:	9a b9       	out	0x0a, r25	; 10
		PORTD = 0b11001101;
 48c:	9d ec       	ldi	r25, 0xCD	; 205
 48e:	9b b9       	out	0x0b, r25	; 11
		PORTC = 0b11111110; //Desabilita o pullup das entradas
 490:	88 b9       	out	0x08, r24	; 8
		
		TCCR0A = 0b00000010; // Habilita modo CTC do TC0
 492:	92 e0       	ldi	r25, 0x02	; 2
 494:	94 bd       	out	0x24, r25	; 36
		TCCR0B = 0b00000011; //Liga TC0 com prescaler = 64
 496:	83 e0       	ldi	r24, 0x03	; 3
 498:	85 bd       	out	0x25, r24	; 37
		OCR0A = 249; // Ajusta o comparador para o TC0 contar ate 249
 49a:	29 ef       	ldi	r18, 0xF9	; 249
 49c:	27 bd       	out	0x27, r18	; 39
		TIMSK0 = 0b00000010; // Habilita a interrupção na igualdade de comparação OCR0A. A interrupção ocorre a cada 1ms = (64*(249+1))/16MHz
 49e:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
		
		EICRA = 0b00001010;
 4a2:	9a e0       	ldi	r25, 0x0A	; 10
 4a4:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
		EIMSK = 0b00000011;
 4a8:	8d bb       	out	0x1d, r24	; 29
		
		PCICR = 0b00000100; //Habilita a interrupção PCINT2
 4aa:	94 e0       	ldi	r25, 0x04	; 4
 4ac:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
		PCMSK2= 0b00110010; // Habilitação do pino D1, D4 e D5 na interrupção PCINT2
 4b0:	92 e3       	ldi	r25, 0x32	; 50
 4b2:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <__TEXT_REGION_LENGTH__+0x7f806d>
		
		ADMUX = 0b11000000; // Tensão interna de ref (1.1V)
 4b6:	90 ec       	ldi	r25, 0xC0	; 192
 4b8:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
		ADCSRA = 0b11101111; //Habilita o AD, interrupção, conversão continua e coloca o prescaler em 128
 4bc:	9f ee       	ldi	r25, 0xEF	; 239
 4be:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		ADCSRB = 0x00; //Modo de conversão contínua
 4c2:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
		DIDR0 = 0b00111110; //Habilita o pino PC5 como entrada do  AD0
 4c6:	9e e3       	ldi	r25, 0x3E	; 62
 4c8:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
		
		//Fast PWM, TOP = 0xFF, OC0A e OC0B habilitados
		TCCR0A = 0b10100011; //PWM não invertido nos pinos OC0A e OC0B
 4cc:	93 ea       	ldi	r25, 0xA3	; 163
 4ce:	94 bd       	out	0x24, r25	; 36
		TCCR0B = 0b00000011; //Liga TC0, prescaler = 64, fpwm = f0sc/(256*prescaler) = 16MHz/(256*64) = 976 Hz
 4d0:	85 bd       	out	0x25, r24	; 37
		//OCR0A = aux_pwm; //Controle do ciclo ativo do PWM OC0A (PD6), dutty = aux_pwm/256
		
		sei();
 4d2:	78 94       	sei
				
		nokia_lcd_init();
 4d4:	0e 94 25 04 	call	0x84a	; 0x84a <nokia_lcd_init>
	
	while (1)
	{
		velocidade = 2*3.14*(tamroda/2)/100000*rpm*60; //Comprimento em Km = 2*3.14*(tamroda/2)/100000, como é 1:1 temos rpm*60 (Rotações por Hora)
 4d8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4dc:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4e0:	76 95       	lsr	r23
 4e2:	67 95       	ror	r22
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	0e 94 15 06 	call	0xc2a	; 0xc2a <__floatunsisf>
 4ec:	23 ec       	ldi	r18, 0xC3	; 195
 4ee:	35 ef       	ldi	r19, 0xF5	; 245
 4f0:	48 ec       	ldi	r20, 0xC8	; 200
 4f2:	50 e4       	ldi	r21, 0x40	; 64
 4f4:	0e 94 a3 06 	call	0xd46	; 0xd46 <__mulsf3>
 4f8:	20 e0       	ldi	r18, 0x00	; 0
 4fa:	30 e5       	ldi	r19, 0x50	; 80
 4fc:	43 ec       	ldi	r20, 0xC3	; 195
 4fe:	57 e4       	ldi	r21, 0x47	; 71
 500:	0e 94 74 05 	call	0xae8	; 0xae8 <__divsf3>
 504:	6b 01       	movw	r12, r22
 506:	7c 01       	movw	r14, r24
 508:	60 91 4e 01 	lds	r22, 0x014E	; 0x80014e <rpm>
 50c:	70 91 4f 01 	lds	r23, 0x014F	; 0x80014f <rpm+0x1>
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	0e 94 15 06 	call	0xc2a	; 0xc2a <__floatunsisf>
 518:	a7 01       	movw	r20, r14
 51a:	96 01       	movw	r18, r12
 51c:	0e 94 a3 06 	call	0xd46	; 0xd46 <__mulsf3>
 520:	20 e0       	ldi	r18, 0x00	; 0
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	40 e7       	ldi	r20, 0x70	; 112
 526:	52 e4       	ldi	r21, 0x42	; 66
 528:	0e 94 a3 06 	call	0xd46	; 0xd46 <__mulsf3>
 52c:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__fixunssfsi>
 530:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <velocidade+0x1>
 534:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <velocidade>
		dist = aux_dist*velocidade/3600; // A cada 1s incremeta 1 em aux_dist assim temos X km por segundos
 538:	40 91 44 01 	lds	r20, 0x0144	; 0x800144 <aux_dist>
 53c:	50 91 45 01 	lds	r21, 0x0145	; 0x800145 <aux_dist+0x1>
 540:	46 9f       	mul	r20, r22
 542:	90 01       	movw	r18, r0
 544:	47 9f       	mul	r20, r23
 546:	30 0d       	add	r19, r0
 548:	56 9f       	mul	r21, r22
 54a:	30 0d       	add	r19, r0
 54c:	11 24       	eor	r1, r1
 54e:	c9 01       	movw	r24, r18
 550:	60 e1       	ldi	r22, 0x10	; 16
 552:	7e e0       	ldi	r23, 0x0E	; 14
 554:	0e 94 1c 07 	call	0xe38	; 0xe38 <__udivmodhi4>
 558:	70 93 4d 01 	sts	0x014D, r23	; 0x80014d <dist+0x1>
 55c:	60 93 4c 01 	sts	0x014C, r22	; 0x80014c <dist>
		//aux_pwm = ADC*256/1023; // aux que compara com o estouto de 8 bits
		OCR0A = aux_pwm; //Controle do ciclo ativo do PWM OC0A (PD6), dutty = aux_pwm/256
 560:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <aux_pwm>
 564:	87 bd       	out	0x27, r24	; 39
		
		//nokia_lcd_init();
		nokia_lcd_clear();
 566:	0e 94 7d 04 	call	0x8fa	; 0x8fa <nokia_lcd_clear>
		nokia_lcd_write_string("COMP. DE BORDO",1);
 56a:	61 e0       	ldi	r22, 0x01	; 1
 56c:	82 e0       	ldi	r24, 0x02	; 2
 56e:	91 e0       	ldi	r25, 0x01	; 1
 570:	0e 94 45 05 	call	0xa8a	; 0xa8a <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 10);
 574:	6a e0       	ldi	r22, 0x0A	; 10
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	0e 94 56 05 	call	0xaac	; 0xaac <nokia_lcd_set_cursor>
		nokia_lcd_write_string("Diam(cm):", 1);
 57c:	61 e0       	ldi	r22, 0x01	; 1
 57e:	81 e1       	ldi	r24, 0x11	; 17
 580:	91 e0       	ldi	r25, 0x01	; 1
 582:	0e 94 45 05 	call	0xa8a	; 0xa8a <nokia_lcd_write_string>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 586:	4a e0       	ldi	r20, 0x0A	; 10
 588:	6a e4       	ldi	r22, 0x4A	; 74
 58a:	73 e0       	ldi	r23, 0x03	; 3
 58c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 590:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 594:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__itoa_ncheck>
		itoa(tamroda, &display_string, 10); //chamada da função para converter inteiros em string
		nokia_lcd_set_cursor(55, 10);
 598:	6a e0       	ldi	r22, 0x0A	; 10
 59a:	87 e3       	ldi	r24, 0x37	; 55
 59c:	0e 94 56 05 	call	0xaac	; 0xaac <nokia_lcd_set_cursor>
		nokia_lcd_write_string(display_string, 1);
 5a0:	61 e0       	ldi	r22, 0x01	; 1
 5a2:	8a e4       	ldi	r24, 0x4A	; 74
 5a4:	93 e0       	ldi	r25, 0x03	; 3
 5a6:	0e 94 45 05 	call	0xa8a	; 0xa8a <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 20);
 5aa:	64 e1       	ldi	r22, 0x14	; 20
 5ac:	80 e0       	ldi	r24, 0x00	; 0
 5ae:	0e 94 56 05 	call	0xaac	; 0xaac <nokia_lcd_set_cursor>
		nokia_lcd_write_string("RPM:", 1);
 5b2:	61 e0       	ldi	r22, 0x01	; 1
 5b4:	8b e1       	ldi	r24, 0x1B	; 27
 5b6:	91 e0       	ldi	r25, 0x01	; 1
 5b8:	0e 94 45 05 	call	0xa8a	; 0xa8a <nokia_lcd_write_string>
 5bc:	4a e0       	ldi	r20, 0x0A	; 10
 5be:	6a e4       	ldi	r22, 0x4A	; 74
 5c0:	73 e0       	ldi	r23, 0x03	; 3
 5c2:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <rpm>
 5c6:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <rpm+0x1>
 5ca:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__itoa_ncheck>
		itoa(rpm, &display_string, 10); //chamada da função para converter inteiros em string
		nokia_lcd_set_cursor(30, 20);
 5ce:	64 e1       	ldi	r22, 0x14	; 20
 5d0:	8e e1       	ldi	r24, 0x1E	; 30
 5d2:	0e 94 56 05 	call	0xaac	; 0xaac <nokia_lcd_set_cursor>
		nokia_lcd_write_string(display_string, 1);
 5d6:	61 e0       	ldi	r22, 0x01	; 1
 5d8:	8a e4       	ldi	r24, 0x4A	; 74
 5da:	93 e0       	ldi	r25, 0x03	; 3
 5dc:	0e 94 45 05 	call	0xa8a	; 0xa8a <nokia_lcd_write_string>
 5e0:	4a e0       	ldi	r20, 0x0A	; 10
 5e2:	6a e4       	ldi	r22, 0x4A	; 74
 5e4:	73 e0       	ldi	r23, 0x03	; 3
 5e6:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <dist>
 5ea:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <dist+0x1>
 5ee:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__itoa_ncheck>
		itoa(dist, &display_string, 10); //chamada da função para converter inteiros em string
		nokia_lcd_set_cursor(55, 33);
 5f2:	61 e2       	ldi	r22, 0x21	; 33
 5f4:	87 e3       	ldi	r24, 0x37	; 55
 5f6:	0e 94 56 05 	call	0xaac	; 0xaac <nokia_lcd_set_cursor>
		nokia_lcd_write_string(display_string, 2);
 5fa:	62 e0       	ldi	r22, 0x02	; 2
 5fc:	8a e4       	ldi	r24, 0x4A	; 74
 5fe:	93 e0       	ldi	r25, 0x03	; 3
 600:	0e 94 45 05 	call	0xa8a	; 0xa8a <nokia_lcd_write_string>
		nokia_lcd_set_cursor(73, 35);
 604:	63 e2       	ldi	r22, 0x23	; 35
 606:	89 e4       	ldi	r24, 0x49	; 73
 608:	0e 94 56 05 	call	0xaac	; 0xaac <nokia_lcd_set_cursor>
		nokia_lcd_write_string("Km", 1);
 60c:	61 e0       	ldi	r22, 0x01	; 1
 60e:	80 e2       	ldi	r24, 0x20	; 32
 610:	91 e0       	ldi	r25, 0x01	; 1
 612:	0e 94 45 05 	call	0xa8a	; 0xa8a <nokia_lcd_write_string>
		
		nokia_lcd_set_cursor(0, 30);
 616:	6e e1       	ldi	r22, 0x1E	; 30
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	0e 94 56 05 	call	0xaac	; 0xaac <nokia_lcd_set_cursor>
		nokia_lcd_write_string("ADC:", 1);
 61e:	61 e0       	ldi	r22, 0x01	; 1
 620:	83 e2       	ldi	r24, 0x23	; 35
 622:	91 e0       	ldi	r25, 0x01	; 1
 624:	0e 94 45 05 	call	0xa8a	; 0xa8a <nokia_lcd_write_string>
 628:	4a e0       	ldi	r20, 0x0A	; 10
 62a:	6a e4       	ldi	r22, 0x4A	; 74
 62c:	73 e0       	ldi	r23, 0x03	; 3
 62e:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <leitura_ADC>
 632:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <leitura_ADC+0x1>
 636:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__itoa_ncheck>
		itoa(leitura_ADC, &display_string, 10); //chamada da função para converter inteiros em string
		nokia_lcd_set_cursor(25, 30);
 63a:	6e e1       	ldi	r22, 0x1E	; 30
 63c:	89 e1       	ldi	r24, 0x19	; 25
 63e:	0e 94 56 05 	call	0xaac	; 0xaac <nokia_lcd_set_cursor>
		nokia_lcd_write_string(display_string, 1);
 642:	61 e0       	ldi	r22, 0x01	; 1
 644:	8a e4       	ldi	r24, 0x4A	; 74
 646:	93 e0       	ldi	r25, 0x03	; 3
 648:	0e 94 45 05 	call	0xa8a	; 0xa8a <nokia_lcd_write_string>
				
		/*itoa(pqp, &display_string, 10); //chamada da função para converter inteiros em string
		nokia_lcd_set_cursor(0, 40);
		nokia_lcd_write_string(display_string, 1);*/
		
		if (pqp==5)
 64c:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
 650:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <__data_end+0x1>
 654:	85 30       	cpi	r24, 0x05	; 5
 656:	91 05       	cpc	r25, r1
 658:	51 f4       	brne	.+20     	; 0x66e <main+0x1ee>
		{
			nokia_lcd_set_cursor(0, 40);
 65a:	68 e2       	ldi	r22, 0x28	; 40
 65c:	80 e0       	ldi	r24, 0x00	; 0
 65e:	0e 94 56 05 	call	0xaac	; 0xaac <nokia_lcd_set_cursor>
			nokia_lcd_write_string("Modo:P", 1);
 662:	61 e0       	ldi	r22, 0x01	; 1
 664:	88 e2       	ldi	r24, 0x28	; 40
 666:	91 e0       	ldi	r25, 0x01	; 1
 668:	0e 94 45 05 	call	0xa8a	; 0xa8a <nokia_lcd_write_string>
 66c:	18 c0       	rjmp	.+48     	; 0x69e <main+0x21e>
		}
			else if (pqp==11)
 66e:	8b 30       	cpi	r24, 0x0B	; 11
 670:	91 05       	cpc	r25, r1
 672:	51 f4       	brne	.+20     	; 0x688 <main+0x208>
			{
				nokia_lcd_set_cursor(0, 40);
 674:	68 e2       	ldi	r22, 0x28	; 40
 676:	80 e0       	ldi	r24, 0x00	; 0
 678:	0e 94 56 05 	call	0xaac	; 0xaac <nokia_lcd_set_cursor>
				nokia_lcd_write_string("Modo:D", 1);
 67c:	61 e0       	ldi	r22, 0x01	; 1
 67e:	8f e2       	ldi	r24, 0x2F	; 47
 680:	91 e0       	ldi	r25, 0x01	; 1
 682:	0e 94 45 05 	call	0xa8a	; 0xa8a <nokia_lcd_write_string>
 686:	0b c0       	rjmp	.+22     	; 0x69e <main+0x21e>
			}
			else if (pqp==13)
 688:	0d 97       	sbiw	r24, 0x0d	; 13
 68a:	49 f4       	brne	.+18     	; 0x69e <main+0x21e>
			{
				nokia_lcd_set_cursor(0, 40);
 68c:	68 e2       	ldi	r22, 0x28	; 40
 68e:	80 e0       	ldi	r24, 0x00	; 0
 690:	0e 94 56 05 	call	0xaac	; 0xaac <nokia_lcd_set_cursor>
				nokia_lcd_write_string("Modo:R", 1);
 694:	61 e0       	ldi	r22, 0x01	; 1
 696:	86 e3       	ldi	r24, 0x36	; 54
 698:	91 e0       	ldi	r25, 0x01	; 1
 69a:	0e 94 45 05 	call	0xa8a	; 0xa8a <nokia_lcd_write_string>
			}
				
		nokia_lcd_render();
 69e:	0e 94 5b 05 	call	0xab6	; 0xab6 <nokia_lcd_render>
	
		PORTB &= 0b10000000;		
 6a2:	85 b1       	in	r24, 0x05	; 5
 6a4:	80 78       	andi	r24, 0x80	; 128
 6a6:	85 b9       	out	0x05, r24	; 5
		PORTB |= 0b01100000;
 6a8:	85 b1       	in	r24, 0x05	; 5
 6aa:	80 66       	ori	r24, 0x60	; 96
 6ac:	85 b9       	out	0x05, r24	; 5
		PORTB |= (((velocidade/1)%10) & 0b00001111);
 6ae:	45 b1       	in	r20, 0x05	; 5
 6b0:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <velocidade>
 6b4:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <velocidade+0x1>
 6b8:	9f 01       	movw	r18, r30
 6ba:	ad ec       	ldi	r26, 0xCD	; 205
 6bc:	bc ec       	ldi	r27, 0xCC	; 204
 6be:	0e 94 30 07 	call	0xe60	; 0xe60 <__umulhisi3>
 6c2:	96 95       	lsr	r25
 6c4:	87 95       	ror	r24
 6c6:	96 95       	lsr	r25
 6c8:	87 95       	ror	r24
 6ca:	96 95       	lsr	r25
 6cc:	87 95       	ror	r24
 6ce:	9c 01       	movw	r18, r24
 6d0:	22 0f       	add	r18, r18
 6d2:	33 1f       	adc	r19, r19
 6d4:	88 0f       	add	r24, r24
 6d6:	99 1f       	adc	r25, r25
 6d8:	88 0f       	add	r24, r24
 6da:	99 1f       	adc	r25, r25
 6dc:	88 0f       	add	r24, r24
 6de:	99 1f       	adc	r25, r25
 6e0:	82 0f       	add	r24, r18
 6e2:	93 1f       	adc	r25, r19
 6e4:	9f 01       	movw	r18, r30
 6e6:	28 1b       	sub	r18, r24
 6e8:	39 0b       	sbc	r19, r25
 6ea:	c9 01       	movw	r24, r18
 6ec:	8f 70       	andi	r24, 0x0F	; 15
 6ee:	84 2b       	or	r24, r20
 6f0:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6f2:	8f ed       	ldi	r24, 0xDF	; 223
 6f4:	9e e2       	ldi	r25, 0x2E	; 46
 6f6:	01 97       	sbiw	r24, 0x01	; 1
 6f8:	f1 f7       	brne	.-4      	; 0x6f6 <main+0x276>
 6fa:	00 c0       	rjmp	.+0      	; 0x6fc <main+0x27c>
 6fc:	00 00       	nop
		_delay_ms(tem_delay);
		
		PORTB &= 0b10000000;
 6fe:	85 b1       	in	r24, 0x05	; 5
 700:	80 78       	andi	r24, 0x80	; 128
 702:	85 b9       	out	0x05, r24	; 5
		PORTB |= 0b01010000;
 704:	85 b1       	in	r24, 0x05	; 5
 706:	80 65       	ori	r24, 0x50	; 80
 708:	85 b9       	out	0x05, r24	; 5
		PORTB |= (((velocidade/10)%10) & 0b00001111);
 70a:	45 b1       	in	r20, 0x05	; 5
 70c:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <velocidade>
 710:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <velocidade+0x1>
 714:	0e 94 30 07 	call	0xe60	; 0xe60 <__umulhisi3>
 718:	fc 01       	movw	r30, r24
 71a:	f6 95       	lsr	r31
 71c:	e7 95       	ror	r30
 71e:	f6 95       	lsr	r31
 720:	e7 95       	ror	r30
 722:	f6 95       	lsr	r31
 724:	e7 95       	ror	r30
 726:	9f 01       	movw	r18, r30
 728:	0e 94 30 07 	call	0xe60	; 0xe60 <__umulhisi3>
 72c:	96 95       	lsr	r25
 72e:	87 95       	ror	r24
 730:	96 95       	lsr	r25
 732:	87 95       	ror	r24
 734:	96 95       	lsr	r25
 736:	87 95       	ror	r24
 738:	9c 01       	movw	r18, r24
 73a:	22 0f       	add	r18, r18
 73c:	33 1f       	adc	r19, r19
 73e:	88 0f       	add	r24, r24
 740:	99 1f       	adc	r25, r25
 742:	88 0f       	add	r24, r24
 744:	99 1f       	adc	r25, r25
 746:	88 0f       	add	r24, r24
 748:	99 1f       	adc	r25, r25
 74a:	82 0f       	add	r24, r18
 74c:	93 1f       	adc	r25, r19
 74e:	9f 01       	movw	r18, r30
 750:	28 1b       	sub	r18, r24
 752:	39 0b       	sbc	r19, r25
 754:	c9 01       	movw	r24, r18
 756:	8f 70       	andi	r24, 0x0F	; 15
 758:	84 2b       	or	r24, r20
 75a:	85 b9       	out	0x05, r24	; 5
 75c:	8f ed       	ldi	r24, 0xDF	; 223
 75e:	9e e2       	ldi	r25, 0x2E	; 46
 760:	01 97       	sbiw	r24, 0x01	; 1
 762:	f1 f7       	brne	.-4      	; 0x760 <main+0x2e0>
 764:	00 c0       	rjmp	.+0      	; 0x766 <main+0x2e6>
 766:	00 00       	nop
		_delay_ms(tem_delay);
		
		PORTB &= 0b10000000;
 768:	85 b1       	in	r24, 0x05	; 5
 76a:	80 78       	andi	r24, 0x80	; 128
 76c:	85 b9       	out	0x05, r24	; 5
		PORTB |= 0b00110000;
 76e:	85 b1       	in	r24, 0x05	; 5
 770:	80 63       	ori	r24, 0x30	; 48
 772:	85 b9       	out	0x05, r24	; 5
		PORTB |= (((velocidade/100)%10) & 0b00001111);
 774:	45 b1       	in	r20, 0x05	; 5
 776:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <velocidade>
 77a:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <velocidade+0x1>
 77e:	36 95       	lsr	r19
 780:	27 95       	ror	r18
 782:	36 95       	lsr	r19
 784:	27 95       	ror	r18
 786:	ab e7       	ldi	r26, 0x7B	; 123
 788:	b4 e1       	ldi	r27, 0x14	; 20
 78a:	0e 94 30 07 	call	0xe60	; 0xe60 <__umulhisi3>
 78e:	fc 01       	movw	r30, r24
 790:	f6 95       	lsr	r31
 792:	e7 95       	ror	r30
 794:	9f 01       	movw	r18, r30
 796:	ad ec       	ldi	r26, 0xCD	; 205
 798:	bc ec       	ldi	r27, 0xCC	; 204
 79a:	0e 94 30 07 	call	0xe60	; 0xe60 <__umulhisi3>
 79e:	96 95       	lsr	r25
 7a0:	87 95       	ror	r24
 7a2:	96 95       	lsr	r25
 7a4:	87 95       	ror	r24
 7a6:	96 95       	lsr	r25
 7a8:	87 95       	ror	r24
 7aa:	9c 01       	movw	r18, r24
 7ac:	22 0f       	add	r18, r18
 7ae:	33 1f       	adc	r19, r19
 7b0:	88 0f       	add	r24, r24
 7b2:	99 1f       	adc	r25, r25
 7b4:	88 0f       	add	r24, r24
 7b6:	99 1f       	adc	r25, r25
 7b8:	88 0f       	add	r24, r24
 7ba:	99 1f       	adc	r25, r25
 7bc:	82 0f       	add	r24, r18
 7be:	93 1f       	adc	r25, r19
 7c0:	9f 01       	movw	r18, r30
 7c2:	28 1b       	sub	r18, r24
 7c4:	39 0b       	sbc	r19, r25
 7c6:	c9 01       	movw	r24, r18
 7c8:	8f 70       	andi	r24, 0x0F	; 15
 7ca:	84 2b       	or	r24, r20
 7cc:	85 b9       	out	0x05, r24	; 5
 7ce:	8f ed       	ldi	r24, 0xDF	; 223
 7d0:	9e e2       	ldi	r25, 0x2E	; 46
 7d2:	01 97       	sbiw	r24, 0x01	; 1
 7d4:	f1 f7       	brne	.-4      	; 0x7d2 <main+0x352>
 7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <main+0x358>
 7d8:	00 00       	nop
 7da:	7e ce       	rjmp	.-772    	; 0x4d8 <main+0x58>

000007dc <write>:
		nokia_lcd.screen[i] = 0x00;
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
 7dc:	98 b1       	in	r25, 0x08	; 8
 7de:	9d 7f       	andi	r25, 0xFD	; 253
 7e0:	98 b9       	out	0x08, r25	; 8
 7e2:	66 23       	and	r22, r22
 7e4:	29 f0       	breq	.+10     	; 0x7f0 <write+0x14>
 7e6:	98 b1       	in	r25, 0x08	; 8
 7e8:	98 60       	ori	r25, 0x08	; 8
 7ea:	98 b9       	out	0x08, r25	; 8
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	1f c0       	rjmp	.+62     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 7f0:	98 b1       	in	r25, 0x08	; 8
 7f2:	97 7f       	andi	r25, 0xF7	; 247
 7f4:	98 b9       	out	0x08, r25	; 8
 7f6:	fa cf       	rjmp	.-12     	; 0x7ec <write+0x10>
 7f8:	47 e0       	ldi	r20, 0x07	; 7
 7fa:	50 e0       	ldi	r21, 0x00	; 0
 7fc:	49 1b       	sub	r20, r25
 7fe:	51 09       	sbc	r21, r1
 800:	28 2f       	mov	r18, r24
 802:	30 e0       	ldi	r19, 0x00	; 0
 804:	02 c0       	rjmp	.+4      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 806:	35 95       	asr	r19
 808:	27 95       	ror	r18
 80a:	4a 95       	dec	r20
 80c:	e2 f7       	brpl	.-8      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 80e:	20 ff       	sbrs	r18, 0
 810:	04 c0       	rjmp	.+8      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 812:	28 b1       	in	r18, 0x08	; 8
 814:	20 61       	ori	r18, 0x10	; 16
 816:	28 b9       	out	0x08, r18	; 8
 818:	03 c0       	rjmp	.+6      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 81a:	28 b1       	in	r18, 0x08	; 8
 81c:	2f 7e       	andi	r18, 0xEF	; 239
 81e:	28 b9       	out	0x08, r18	; 8
 820:	28 b1       	in	r18, 0x08	; 8
 822:	20 62       	ori	r18, 0x20	; 32
 824:	28 b9       	out	0x08, r18	; 8
 826:	28 b1       	in	r18, 0x08	; 8
 828:	2f 7d       	andi	r18, 0xDF	; 223
 82a:	28 b9       	out	0x08, r18	; 8
 82c:	9f 5f       	subi	r25, 0xFF	; 255
 82e:	98 30       	cpi	r25, 0x08	; 8
 830:	18 f3       	brcs	.-58     	; 0x7f8 <write+0x1c>
 832:	88 b1       	in	r24, 0x08	; 8
 834:	82 60       	ori	r24, 0x02	; 2
 836:	88 b9       	out	0x08, r24	; 8
 838:	08 95       	ret

0000083a <write_cmd>:
 83a:	60 e0       	ldi	r22, 0x00	; 0
 83c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <write>
 840:	08 95       	ret

00000842 <write_data>:
 842:	61 e0       	ldi	r22, 0x01	; 1
 844:	0e 94 ee 03 	call	0x7dc	; 0x7dc <write>
 848:	08 95       	ret

0000084a <nokia_lcd_init>:
 84a:	cf 93       	push	r28
 84c:	df 93       	push	r29
 84e:	87 b1       	in	r24, 0x07	; 7
 850:	82 60       	ori	r24, 0x02	; 2
 852:	87 b9       	out	0x07, r24	; 7
 854:	87 b1       	in	r24, 0x07	; 7
 856:	84 60       	ori	r24, 0x04	; 4
 858:	87 b9       	out	0x07, r24	; 7
 85a:	87 b1       	in	r24, 0x07	; 7
 85c:	88 60       	ori	r24, 0x08	; 8
 85e:	87 b9       	out	0x07, r24	; 7
 860:	87 b1       	in	r24, 0x07	; 7
 862:	80 61       	ori	r24, 0x10	; 16
 864:	87 b9       	out	0x07, r24	; 7
 866:	87 b1       	in	r24, 0x07	; 7
 868:	80 62       	ori	r24, 0x20	; 32
 86a:	87 b9       	out	0x07, r24	; 7
 86c:	88 b1       	in	r24, 0x08	; 8
 86e:	84 60       	ori	r24, 0x04	; 4
 870:	88 b9       	out	0x08, r24	; 8
 872:	88 b1       	in	r24, 0x08	; 8
 874:	82 60       	ori	r24, 0x02	; 2
 876:	88 b9       	out	0x08, r24	; 8
 878:	83 ec       	ldi	r24, 0xC3	; 195
 87a:	99 e0       	ldi	r25, 0x09	; 9
 87c:	01 97       	sbiw	r24, 0x01	; 1
 87e:	f1 f7       	brne	.-4      	; 0x87c <nokia_lcd_init+0x32>
 880:	00 c0       	rjmp	.+0      	; 0x882 <nokia_lcd_init+0x38>
 882:	00 00       	nop
 884:	88 b1       	in	r24, 0x08	; 8
 886:	8b 7f       	andi	r24, 0xFB	; 251
 888:	88 b9       	out	0x08, r24	; 8
 88a:	8b e5       	ldi	r24, 0x5B	; 91
 88c:	94 e4       	ldi	r25, 0x44	; 68
 88e:	01 97       	sbiw	r24, 0x01	; 1
 890:	f1 f7       	brne	.-4      	; 0x88e <nokia_lcd_init+0x44>
 892:	00 c0       	rjmp	.+0      	; 0x894 <nokia_lcd_init+0x4a>
 894:	00 00       	nop
 896:	88 b1       	in	r24, 0x08	; 8
 898:	84 60       	ori	r24, 0x04	; 4
 89a:	88 b9       	out	0x08, r24	; 8
 89c:	88 b1       	in	r24, 0x08	; 8
 89e:	8d 7f       	andi	r24, 0xFD	; 253
 8a0:	88 b9       	out	0x08, r24	; 8
 8a2:	81 e2       	ldi	r24, 0x21	; 33
 8a4:	0e 94 1d 04 	call	0x83a	; 0x83a <write_cmd>
 8a8:	83 e1       	ldi	r24, 0x13	; 19
 8aa:	0e 94 1d 04 	call	0x83a	; 0x83a <write_cmd>
 8ae:	86 e0       	ldi	r24, 0x06	; 6
 8b0:	0e 94 1d 04 	call	0x83a	; 0x83a <write_cmd>
 8b4:	82 ec       	ldi	r24, 0xC2	; 194
 8b6:	0e 94 1d 04 	call	0x83a	; 0x83a <write_cmd>
 8ba:	80 e2       	ldi	r24, 0x20	; 32
 8bc:	0e 94 1d 04 	call	0x83a	; 0x83a <write_cmd>
 8c0:	89 e0       	ldi	r24, 0x09	; 9
 8c2:	0e 94 1d 04 	call	0x83a	; 0x83a <write_cmd>
 8c6:	80 e8       	ldi	r24, 0x80	; 128
 8c8:	0e 94 1d 04 	call	0x83a	; 0x83a <write_cmd>
 8cc:	80 e4       	ldi	r24, 0x40	; 64
 8ce:	0e 94 1d 04 	call	0x83a	; 0x83a <write_cmd>
 8d2:	c0 e0       	ldi	r28, 0x00	; 0
 8d4:	d0 e0       	ldi	r29, 0x00	; 0
 8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <nokia_lcd_init+0x96>
 8d8:	80 e0       	ldi	r24, 0x00	; 0
 8da:	0e 94 21 04 	call	0x842	; 0x842 <write_data>
 8de:	21 96       	adiw	r28, 0x01	; 1
 8e0:	c8 3f       	cpi	r28, 0xF8	; 248
 8e2:	91 e0       	ldi	r25, 0x01	; 1
 8e4:	d9 07       	cpc	r29, r25
 8e6:	c0 f3       	brcs	.-16     	; 0x8d8 <nokia_lcd_init+0x8e>
 8e8:	88 e0       	ldi	r24, 0x08	; 8
 8ea:	0e 94 1d 04 	call	0x83a	; 0x83a <write_cmd>
 8ee:	8c e0       	ldi	r24, 0x0C	; 12
 8f0:	0e 94 1d 04 	call	0x83a	; 0x83a <write_cmd>
 8f4:	df 91       	pop	r29
 8f6:	cf 91       	pop	r28
 8f8:	08 95       	ret

000008fa <nokia_lcd_clear>:
 8fa:	80 e8       	ldi	r24, 0x80	; 128
 8fc:	0e 94 1d 04 	call	0x83a	; 0x83a <write_cmd>
 900:	80 e4       	ldi	r24, 0x40	; 64
 902:	0e 94 1d 04 	call	0x83a	; 0x83a <write_cmd>
 906:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <nokia_lcd+0x1f8>
 90a:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <nokia_lcd+0x1f9>
 90e:	80 e0       	ldi	r24, 0x00	; 0
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	05 c0       	rjmp	.+10     	; 0x91e <__stack+0x1f>
 914:	fc 01       	movw	r30, r24
 916:	e0 5b       	subi	r30, 0xB0	; 176
 918:	fe 4f       	sbci	r31, 0xFE	; 254
 91a:	10 82       	st	Z, r1
 91c:	01 96       	adiw	r24, 0x01	; 1
 91e:	88 3f       	cpi	r24, 0xF8	; 248
 920:	21 e0       	ldi	r18, 0x01	; 1
 922:	92 07       	cpc	r25, r18
 924:	b8 f3       	brcs	.-18     	; 0x914 <__stack+0x15>
 926:	08 95       	ret

00000928 <nokia_lcd_set_pixel>:
}

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
 928:	26 2f       	mov	r18, r22
 92a:	26 95       	lsr	r18
 92c:	26 95       	lsr	r18
 92e:	26 95       	lsr	r18
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	34 e5       	ldi	r19, 0x54	; 84
 934:	23 9f       	mul	r18, r19
 936:	80 0d       	add	r24, r0
 938:	91 1d       	adc	r25, r1
 93a:	11 24       	eor	r1, r1
	if (value)
 93c:	44 23       	and	r20, r20
 93e:	79 f0       	breq	.+30     	; 0x95e <nokia_lcd_set_pixel+0x36>
		*byte |= (1 << (y % 8));
 940:	67 70       	andi	r22, 0x07	; 7
 942:	21 e0       	ldi	r18, 0x01	; 1
 944:	30 e0       	ldi	r19, 0x00	; 0
 946:	02 c0       	rjmp	.+4      	; 0x94c <nokia_lcd_set_pixel+0x24>
 948:	22 0f       	add	r18, r18
 94a:	33 1f       	adc	r19, r19
 94c:	6a 95       	dec	r22
 94e:	e2 f7       	brpl	.-8      	; 0x948 <nokia_lcd_set_pixel+0x20>
 950:	fc 01       	movw	r30, r24
 952:	e0 5b       	subi	r30, 0xB0	; 176
 954:	fe 4f       	sbci	r31, 0xFE	; 254
 956:	80 81       	ld	r24, Z
 958:	28 2b       	or	r18, r24
 95a:	20 83       	st	Z, r18
 95c:	08 95       	ret
	else
		*byte &= ~(1 << (y %8 ));
 95e:	67 70       	andi	r22, 0x07	; 7
 960:	21 e0       	ldi	r18, 0x01	; 1
 962:	30 e0       	ldi	r19, 0x00	; 0
 964:	02 c0       	rjmp	.+4      	; 0x96a <nokia_lcd_set_pixel+0x42>
 966:	22 0f       	add	r18, r18
 968:	33 1f       	adc	r19, r19
 96a:	6a 95       	dec	r22
 96c:	e2 f7       	brpl	.-8      	; 0x966 <nokia_lcd_set_pixel+0x3e>
 96e:	fc 01       	movw	r30, r24
 970:	e0 5b       	subi	r30, 0xB0	; 176
 972:	fe 4f       	sbci	r31, 0xFE	; 254
 974:	20 95       	com	r18
 976:	80 81       	ld	r24, Z
 978:	28 23       	and	r18, r24
 97a:	20 83       	st	Z, r18
 97c:	08 95       	ret

0000097e <nokia_lcd_write_char>:
}

void nokia_lcd_write_char(char code, uint8_t scale)
{
 97e:	ef 92       	push	r14
 980:	ff 92       	push	r15
 982:	0f 93       	push	r16
 984:	1f 93       	push	r17
 986:	cf 93       	push	r28
 988:	df 93       	push	r29
 98a:	e8 2e       	mov	r14, r24
 98c:	f6 2e       	mov	r15, r22
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
 98e:	00 e0       	ldi	r16, 0x00	; 0
 990:	45 c0       	rjmp	.+138    	; 0xa1c <nokia_lcd_write_char+0x9e>
		for (y = 0; y < 7*scale; y++)
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
 992:	2e 2d       	mov	r18, r14
 994:	30 e0       	ldi	r19, 0x00	; 0
 996:	20 52       	subi	r18, 0x20	; 32
 998:	31 09       	sbc	r19, r1
 99a:	80 2f       	mov	r24, r16
 99c:	6f 2d       	mov	r22, r15
 99e:	0e 94 10 07 	call	0xe20	; 0xe20 <__udivmodqi4>
 9a2:	f9 01       	movw	r30, r18
 9a4:	ee 0f       	add	r30, r30
 9a6:	ff 1f       	adc	r31, r31
 9a8:	ee 0f       	add	r30, r30
 9aa:	ff 1f       	adc	r31, r31
 9ac:	e2 0f       	add	r30, r18
 9ae:	f3 1f       	adc	r31, r19
 9b0:	e8 0f       	add	r30, r24
 9b2:	f1 1d       	adc	r31, r1
 9b4:	e8 59       	subi	r30, 0x98	; 152
 9b6:	ff 4f       	sbci	r31, 0xFF	; 255
 9b8:	e4 91       	lpm	r30, Z
 9ba:	81 2f       	mov	r24, r17
 9bc:	0e 94 10 07 	call	0xe20	; 0xe20 <__udivmodqi4>
 9c0:	f0 e0       	ldi	r31, 0x00	; 0
 9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <nokia_lcd_write_char+0x4a>
 9c4:	f5 95       	asr	r31
 9c6:	e7 95       	ror	r30
 9c8:	8a 95       	dec	r24
 9ca:	e2 f7       	brpl	.-8      	; 0x9c4 <nokia_lcd_write_char+0x46>
 9cc:	e0 ff       	sbrs	r30, 0
 9ce:	0a c0       	rjmp	.+20     	; 0x9e4 <nokia_lcd_write_char+0x66>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
 9d0:	60 91 49 03 	lds	r22, 0x0349	; 0x800349 <nokia_lcd+0x1f9>
 9d4:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <nokia_lcd+0x1f8>
 9d8:	61 0f       	add	r22, r17
 9da:	41 e0       	ldi	r20, 0x01	; 1
 9dc:	80 0f       	add	r24, r16
 9de:	0e 94 94 04 	call	0x928	; 0x928 <nokia_lcd_set_pixel>
 9e2:	09 c0       	rjmp	.+18     	; 0x9f6 <nokia_lcd_write_char+0x78>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
 9e4:	60 91 49 03 	lds	r22, 0x0349	; 0x800349 <nokia_lcd+0x1f9>
 9e8:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <nokia_lcd+0x1f8>
 9ec:	61 0f       	add	r22, r17
 9ee:	40 e0       	ldi	r20, 0x00	; 0
 9f0:	80 0f       	add	r24, r16
 9f2:	0e 94 94 04 	call	0x928	; 0x928 <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
 9f6:	1f 5f       	subi	r17, 0xFF	; 255
 9f8:	01 c0       	rjmp	.+2      	; 0x9fc <nokia_lcd_write_char+0x7e>
 9fa:	10 e0       	ldi	r17, 0x00	; 0
 9fc:	21 2f       	mov	r18, r17
 9fe:	30 e0       	ldi	r19, 0x00	; 0
 a00:	ce 01       	movw	r24, r28
 a02:	88 0f       	add	r24, r24
 a04:	99 1f       	adc	r25, r25
 a06:	88 0f       	add	r24, r24
 a08:	99 1f       	adc	r25, r25
 a0a:	88 0f       	add	r24, r24
 a0c:	99 1f       	adc	r25, r25
 a0e:	8c 1b       	sub	r24, r28
 a10:	9d 0b       	sbc	r25, r29
 a12:	28 17       	cp	r18, r24
 a14:	39 07       	cpc	r19, r25
 a16:	0c f4       	brge	.+2      	; 0xa1a <nokia_lcd_write_char+0x9c>
 a18:	bc cf       	rjmp	.-136    	; 0x992 <nokia_lcd_write_char+0x14>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
 a1a:	0f 5f       	subi	r16, 0xFF	; 255
 a1c:	20 2f       	mov	r18, r16
 a1e:	30 e0       	ldi	r19, 0x00	; 0
 a20:	cf 2d       	mov	r28, r15
 a22:	d0 e0       	ldi	r29, 0x00	; 0
 a24:	ce 01       	movw	r24, r28
 a26:	88 0f       	add	r24, r24
 a28:	99 1f       	adc	r25, r25
 a2a:	88 0f       	add	r24, r24
 a2c:	99 1f       	adc	r25, r25
 a2e:	8c 0f       	add	r24, r28
 a30:	9d 1f       	adc	r25, r29
 a32:	28 17       	cp	r18, r24
 a34:	39 07       	cpc	r19, r25
 a36:	0c f3       	brlt	.-62     	; 0x9fa <nokia_lcd_write_char+0x7c>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
 a38:	e8 e4       	ldi	r30, 0x48	; 72
 a3a:	f3 e0       	ldi	r31, 0x03	; 3
 a3c:	8f 2d       	mov	r24, r15
 a3e:	88 0f       	add	r24, r24
 a40:	88 0f       	add	r24, r24
 a42:	8f 0d       	add	r24, r15
 a44:	90 81       	ld	r25, Z
 a46:	89 0f       	add	r24, r25
 a48:	8f 5f       	subi	r24, 0xFF	; 255
 a4a:	80 83       	st	Z, r24
	if (nokia_lcd.cursor_x >= 84) {
 a4c:	84 35       	cpi	r24, 0x54	; 84
 a4e:	70 f0       	brcs	.+28     	; 0xa6c <nokia_lcd_write_char+0xee>
		nokia_lcd.cursor_x = 0;
 a50:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y += 7*scale + 1;
 a54:	e9 e4       	ldi	r30, 0x49	; 73
 a56:	f3 e0       	ldi	r31, 0x03	; 3
 a58:	8f 2d       	mov	r24, r15
 a5a:	88 0f       	add	r24, r24
 a5c:	88 0f       	add	r24, r24
 a5e:	88 0f       	add	r24, r24
 a60:	98 2f       	mov	r25, r24
 a62:	9f 19       	sub	r25, r15
 a64:	80 81       	ld	r24, Z
 a66:	89 0f       	add	r24, r25
 a68:	8f 5f       	subi	r24, 0xFF	; 255
 a6a:	80 83       	st	Z, r24
	}
	if (nokia_lcd.cursor_y >= 48) {
 a6c:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <nokia_lcd+0x1f9>
 a70:	80 33       	cpi	r24, 0x30	; 48
 a72:	20 f0       	brcs	.+8      	; 0xa7c <nokia_lcd_write_char+0xfe>
		nokia_lcd.cursor_x = 0;
 a74:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y = 0;
 a78:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <nokia_lcd+0x1f9>
	}
}
 a7c:	df 91       	pop	r29
 a7e:	cf 91       	pop	r28
 a80:	1f 91       	pop	r17
 a82:	0f 91       	pop	r16
 a84:	ff 90       	pop	r15
 a86:	ef 90       	pop	r14
 a88:	08 95       	ret

00000a8a <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
 a8a:	1f 93       	push	r17
 a8c:	cf 93       	push	r28
 a8e:	df 93       	push	r29
 a90:	ec 01       	movw	r28, r24
 a92:	16 2f       	mov	r17, r22
	while(*str)
 a94:	04 c0       	rjmp	.+8      	; 0xa9e <nokia_lcd_write_string+0x14>
		nokia_lcd_write_char(*str++, scale);
 a96:	21 96       	adiw	r28, 0x01	; 1
 a98:	61 2f       	mov	r22, r17
 a9a:	0e 94 bf 04 	call	0x97e	; 0x97e <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
 a9e:	88 81       	ld	r24, Y
 aa0:	81 11       	cpse	r24, r1
 aa2:	f9 cf       	rjmp	.-14     	; 0xa96 <nokia_lcd_write_string+0xc>
		nokia_lcd_write_char(*str++, scale);
}
 aa4:	df 91       	pop	r29
 aa6:	cf 91       	pop	r28
 aa8:	1f 91       	pop	r17
 aaa:	08 95       	ret

00000aac <nokia_lcd_set_cursor>:

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
 aac:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <nokia_lcd+0x1f8>
	nokia_lcd.cursor_y = y;
 ab0:	60 93 49 03 	sts	0x0349, r22	; 0x800349 <nokia_lcd+0x1f9>
 ab4:	08 95       	ret

00000ab6 <nokia_lcd_render>:
}

void nokia_lcd_render(void)
{
 ab6:	cf 93       	push	r28
 ab8:	df 93       	push	r29
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
 aba:	80 e8       	ldi	r24, 0x80	; 128
 abc:	0e 94 1d 04 	call	0x83a	; 0x83a <write_cmd>
	write_cmd(0x40);
 ac0:	80 e4       	ldi	r24, 0x40	; 64
 ac2:	0e 94 1d 04 	call	0x83a	; 0x83a <write_cmd>

	/* Write screen to display */
	for (i = 0; i < 504; i++)
 ac6:	c0 e0       	ldi	r28, 0x00	; 0
 ac8:	d0 e0       	ldi	r29, 0x00	; 0
 aca:	07 c0       	rjmp	.+14     	; 0xada <nokia_lcd_render+0x24>
		write_data(nokia_lcd.screen[i]);
 acc:	fe 01       	movw	r30, r28
 ace:	e0 5b       	subi	r30, 0xB0	; 176
 ad0:	fe 4f       	sbci	r31, 0xFE	; 254
 ad2:	80 81       	ld	r24, Z
 ad4:	0e 94 21 04 	call	0x842	; 0x842 <write_data>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
 ad8:	21 96       	adiw	r28, 0x01	; 1
 ada:	c8 3f       	cpi	r28, 0xF8	; 248
 adc:	81 e0       	ldi	r24, 0x01	; 1
 ade:	d8 07       	cpc	r29, r24
 ae0:	a8 f3       	brcs	.-22     	; 0xacc <nokia_lcd_render+0x16>
		write_data(nokia_lcd.screen[i]);
}
 ae2:	df 91       	pop	r29
 ae4:	cf 91       	pop	r28
 ae6:	08 95       	ret

00000ae8 <__divsf3>:
 ae8:	0e 94 88 05 	call	0xb10	; 0xb10 <__divsf3x>
 aec:	0c 94 69 06 	jmp	0xcd2	; 0xcd2 <__fp_round>
 af0:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__fp_pscB>
 af4:	58 f0       	brcs	.+22     	; 0xb0c <__divsf3+0x24>
 af6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__fp_pscA>
 afa:	40 f0       	brcs	.+16     	; 0xb0c <__divsf3+0x24>
 afc:	29 f4       	brne	.+10     	; 0xb08 <__divsf3+0x20>
 afe:	5f 3f       	cpi	r21, 0xFF	; 255
 b00:	29 f0       	breq	.+10     	; 0xb0c <__divsf3+0x24>
 b02:	0c 94 52 06 	jmp	0xca4	; 0xca4 <__fp_inf>
 b06:	51 11       	cpse	r21, r1
 b08:	0c 94 9d 06 	jmp	0xd3a	; 0xd3a <__fp_szero>
 b0c:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__fp_nan>

00000b10 <__divsf3x>:
 b10:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__fp_split3>
 b14:	68 f3       	brcs	.-38     	; 0xaf0 <__divsf3+0x8>

00000b16 <__divsf3_pse>:
 b16:	99 23       	and	r25, r25
 b18:	b1 f3       	breq	.-20     	; 0xb06 <__divsf3+0x1e>
 b1a:	55 23       	and	r21, r21
 b1c:	91 f3       	breq	.-28     	; 0xb02 <__divsf3+0x1a>
 b1e:	95 1b       	sub	r25, r21
 b20:	55 0b       	sbc	r21, r21
 b22:	bb 27       	eor	r27, r27
 b24:	aa 27       	eor	r26, r26
 b26:	62 17       	cp	r22, r18
 b28:	73 07       	cpc	r23, r19
 b2a:	84 07       	cpc	r24, r20
 b2c:	38 f0       	brcs	.+14     	; 0xb3c <__divsf3_pse+0x26>
 b2e:	9f 5f       	subi	r25, 0xFF	; 255
 b30:	5f 4f       	sbci	r21, 0xFF	; 255
 b32:	22 0f       	add	r18, r18
 b34:	33 1f       	adc	r19, r19
 b36:	44 1f       	adc	r20, r20
 b38:	aa 1f       	adc	r26, r26
 b3a:	a9 f3       	breq	.-22     	; 0xb26 <__divsf3_pse+0x10>
 b3c:	35 d0       	rcall	.+106    	; 0xba8 <__divsf3_pse+0x92>
 b3e:	0e 2e       	mov	r0, r30
 b40:	3a f0       	brmi	.+14     	; 0xb50 <__divsf3_pse+0x3a>
 b42:	e0 e8       	ldi	r30, 0x80	; 128
 b44:	32 d0       	rcall	.+100    	; 0xbaa <__divsf3_pse+0x94>
 b46:	91 50       	subi	r25, 0x01	; 1
 b48:	50 40       	sbci	r21, 0x00	; 0
 b4a:	e6 95       	lsr	r30
 b4c:	00 1c       	adc	r0, r0
 b4e:	ca f7       	brpl	.-14     	; 0xb42 <__divsf3_pse+0x2c>
 b50:	2b d0       	rcall	.+86     	; 0xba8 <__divsf3_pse+0x92>
 b52:	fe 2f       	mov	r31, r30
 b54:	29 d0       	rcall	.+82     	; 0xba8 <__divsf3_pse+0x92>
 b56:	66 0f       	add	r22, r22
 b58:	77 1f       	adc	r23, r23
 b5a:	88 1f       	adc	r24, r24
 b5c:	bb 1f       	adc	r27, r27
 b5e:	26 17       	cp	r18, r22
 b60:	37 07       	cpc	r19, r23
 b62:	48 07       	cpc	r20, r24
 b64:	ab 07       	cpc	r26, r27
 b66:	b0 e8       	ldi	r27, 0x80	; 128
 b68:	09 f0       	breq	.+2      	; 0xb6c <__divsf3_pse+0x56>
 b6a:	bb 0b       	sbc	r27, r27
 b6c:	80 2d       	mov	r24, r0
 b6e:	bf 01       	movw	r22, r30
 b70:	ff 27       	eor	r31, r31
 b72:	93 58       	subi	r25, 0x83	; 131
 b74:	5f 4f       	sbci	r21, 0xFF	; 255
 b76:	3a f0       	brmi	.+14     	; 0xb86 <__divsf3_pse+0x70>
 b78:	9e 3f       	cpi	r25, 0xFE	; 254
 b7a:	51 05       	cpc	r21, r1
 b7c:	78 f0       	brcs	.+30     	; 0xb9c <__divsf3_pse+0x86>
 b7e:	0c 94 52 06 	jmp	0xca4	; 0xca4 <__fp_inf>
 b82:	0c 94 9d 06 	jmp	0xd3a	; 0xd3a <__fp_szero>
 b86:	5f 3f       	cpi	r21, 0xFF	; 255
 b88:	e4 f3       	brlt	.-8      	; 0xb82 <__divsf3_pse+0x6c>
 b8a:	98 3e       	cpi	r25, 0xE8	; 232
 b8c:	d4 f3       	brlt	.-12     	; 0xb82 <__divsf3_pse+0x6c>
 b8e:	86 95       	lsr	r24
 b90:	77 95       	ror	r23
 b92:	67 95       	ror	r22
 b94:	b7 95       	ror	r27
 b96:	f7 95       	ror	r31
 b98:	9f 5f       	subi	r25, 0xFF	; 255
 b9a:	c9 f7       	brne	.-14     	; 0xb8e <__divsf3_pse+0x78>
 b9c:	88 0f       	add	r24, r24
 b9e:	91 1d       	adc	r25, r1
 ba0:	96 95       	lsr	r25
 ba2:	87 95       	ror	r24
 ba4:	97 f9       	bld	r25, 7
 ba6:	08 95       	ret
 ba8:	e1 e0       	ldi	r30, 0x01	; 1
 baa:	66 0f       	add	r22, r22
 bac:	77 1f       	adc	r23, r23
 bae:	88 1f       	adc	r24, r24
 bb0:	bb 1f       	adc	r27, r27
 bb2:	62 17       	cp	r22, r18
 bb4:	73 07       	cpc	r23, r19
 bb6:	84 07       	cpc	r24, r20
 bb8:	ba 07       	cpc	r27, r26
 bba:	20 f0       	brcs	.+8      	; 0xbc4 <__divsf3_pse+0xae>
 bbc:	62 1b       	sub	r22, r18
 bbe:	73 0b       	sbc	r23, r19
 bc0:	84 0b       	sbc	r24, r20
 bc2:	ba 0b       	sbc	r27, r26
 bc4:	ee 1f       	adc	r30, r30
 bc6:	88 f7       	brcc	.-30     	; 0xbaa <__divsf3_pse+0x94>
 bc8:	e0 95       	com	r30
 bca:	08 95       	ret

00000bcc <__fixunssfsi>:
 bcc:	0e 94 82 06 	call	0xd04	; 0xd04 <__fp_splitA>
 bd0:	88 f0       	brcs	.+34     	; 0xbf4 <__fixunssfsi+0x28>
 bd2:	9f 57       	subi	r25, 0x7F	; 127
 bd4:	98 f0       	brcs	.+38     	; 0xbfc <__fixunssfsi+0x30>
 bd6:	b9 2f       	mov	r27, r25
 bd8:	99 27       	eor	r25, r25
 bda:	b7 51       	subi	r27, 0x17	; 23
 bdc:	b0 f0       	brcs	.+44     	; 0xc0a <__fixunssfsi+0x3e>
 bde:	e1 f0       	breq	.+56     	; 0xc18 <__fixunssfsi+0x4c>
 be0:	66 0f       	add	r22, r22
 be2:	77 1f       	adc	r23, r23
 be4:	88 1f       	adc	r24, r24
 be6:	99 1f       	adc	r25, r25
 be8:	1a f0       	brmi	.+6      	; 0xbf0 <__fixunssfsi+0x24>
 bea:	ba 95       	dec	r27
 bec:	c9 f7       	brne	.-14     	; 0xbe0 <__fixunssfsi+0x14>
 bee:	14 c0       	rjmp	.+40     	; 0xc18 <__fixunssfsi+0x4c>
 bf0:	b1 30       	cpi	r27, 0x01	; 1
 bf2:	91 f0       	breq	.+36     	; 0xc18 <__fixunssfsi+0x4c>
 bf4:	0e 94 9c 06 	call	0xd38	; 0xd38 <__fp_zero>
 bf8:	b1 e0       	ldi	r27, 0x01	; 1
 bfa:	08 95       	ret
 bfc:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <__fp_zero>
 c00:	67 2f       	mov	r22, r23
 c02:	78 2f       	mov	r23, r24
 c04:	88 27       	eor	r24, r24
 c06:	b8 5f       	subi	r27, 0xF8	; 248
 c08:	39 f0       	breq	.+14     	; 0xc18 <__fixunssfsi+0x4c>
 c0a:	b9 3f       	cpi	r27, 0xF9	; 249
 c0c:	cc f3       	brlt	.-14     	; 0xc00 <__fixunssfsi+0x34>
 c0e:	86 95       	lsr	r24
 c10:	77 95       	ror	r23
 c12:	67 95       	ror	r22
 c14:	b3 95       	inc	r27
 c16:	d9 f7       	brne	.-10     	; 0xc0e <__fixunssfsi+0x42>
 c18:	3e f4       	brtc	.+14     	; 0xc28 <__fixunssfsi+0x5c>
 c1a:	90 95       	com	r25
 c1c:	80 95       	com	r24
 c1e:	70 95       	com	r23
 c20:	61 95       	neg	r22
 c22:	7f 4f       	sbci	r23, 0xFF	; 255
 c24:	8f 4f       	sbci	r24, 0xFF	; 255
 c26:	9f 4f       	sbci	r25, 0xFF	; 255
 c28:	08 95       	ret

00000c2a <__floatunsisf>:
 c2a:	e8 94       	clt
 c2c:	09 c0       	rjmp	.+18     	; 0xc40 <__floatsisf+0x12>

00000c2e <__floatsisf>:
 c2e:	97 fb       	bst	r25, 7
 c30:	3e f4       	brtc	.+14     	; 0xc40 <__floatsisf+0x12>
 c32:	90 95       	com	r25
 c34:	80 95       	com	r24
 c36:	70 95       	com	r23
 c38:	61 95       	neg	r22
 c3a:	7f 4f       	sbci	r23, 0xFF	; 255
 c3c:	8f 4f       	sbci	r24, 0xFF	; 255
 c3e:	9f 4f       	sbci	r25, 0xFF	; 255
 c40:	99 23       	and	r25, r25
 c42:	a9 f0       	breq	.+42     	; 0xc6e <__floatsisf+0x40>
 c44:	f9 2f       	mov	r31, r25
 c46:	96 e9       	ldi	r25, 0x96	; 150
 c48:	bb 27       	eor	r27, r27
 c4a:	93 95       	inc	r25
 c4c:	f6 95       	lsr	r31
 c4e:	87 95       	ror	r24
 c50:	77 95       	ror	r23
 c52:	67 95       	ror	r22
 c54:	b7 95       	ror	r27
 c56:	f1 11       	cpse	r31, r1
 c58:	f8 cf       	rjmp	.-16     	; 0xc4a <__floatsisf+0x1c>
 c5a:	fa f4       	brpl	.+62     	; 0xc9a <__floatsisf+0x6c>
 c5c:	bb 0f       	add	r27, r27
 c5e:	11 f4       	brne	.+4      	; 0xc64 <__floatsisf+0x36>
 c60:	60 ff       	sbrs	r22, 0
 c62:	1b c0       	rjmp	.+54     	; 0xc9a <__floatsisf+0x6c>
 c64:	6f 5f       	subi	r22, 0xFF	; 255
 c66:	7f 4f       	sbci	r23, 0xFF	; 255
 c68:	8f 4f       	sbci	r24, 0xFF	; 255
 c6a:	9f 4f       	sbci	r25, 0xFF	; 255
 c6c:	16 c0       	rjmp	.+44     	; 0xc9a <__floatsisf+0x6c>
 c6e:	88 23       	and	r24, r24
 c70:	11 f0       	breq	.+4      	; 0xc76 <__floatsisf+0x48>
 c72:	96 e9       	ldi	r25, 0x96	; 150
 c74:	11 c0       	rjmp	.+34     	; 0xc98 <__floatsisf+0x6a>
 c76:	77 23       	and	r23, r23
 c78:	21 f0       	breq	.+8      	; 0xc82 <__floatsisf+0x54>
 c7a:	9e e8       	ldi	r25, 0x8E	; 142
 c7c:	87 2f       	mov	r24, r23
 c7e:	76 2f       	mov	r23, r22
 c80:	05 c0       	rjmp	.+10     	; 0xc8c <__floatsisf+0x5e>
 c82:	66 23       	and	r22, r22
 c84:	71 f0       	breq	.+28     	; 0xca2 <__floatsisf+0x74>
 c86:	96 e8       	ldi	r25, 0x86	; 134
 c88:	86 2f       	mov	r24, r22
 c8a:	70 e0       	ldi	r23, 0x00	; 0
 c8c:	60 e0       	ldi	r22, 0x00	; 0
 c8e:	2a f0       	brmi	.+10     	; 0xc9a <__floatsisf+0x6c>
 c90:	9a 95       	dec	r25
 c92:	66 0f       	add	r22, r22
 c94:	77 1f       	adc	r23, r23
 c96:	88 1f       	adc	r24, r24
 c98:	da f7       	brpl	.-10     	; 0xc90 <__floatsisf+0x62>
 c9a:	88 0f       	add	r24, r24
 c9c:	96 95       	lsr	r25
 c9e:	87 95       	ror	r24
 ca0:	97 f9       	bld	r25, 7
 ca2:	08 95       	ret

00000ca4 <__fp_inf>:
 ca4:	97 f9       	bld	r25, 7
 ca6:	9f 67       	ori	r25, 0x7F	; 127
 ca8:	80 e8       	ldi	r24, 0x80	; 128
 caa:	70 e0       	ldi	r23, 0x00	; 0
 cac:	60 e0       	ldi	r22, 0x00	; 0
 cae:	08 95       	ret

00000cb0 <__fp_nan>:
 cb0:	9f ef       	ldi	r25, 0xFF	; 255
 cb2:	80 ec       	ldi	r24, 0xC0	; 192
 cb4:	08 95       	ret

00000cb6 <__fp_pscA>:
 cb6:	00 24       	eor	r0, r0
 cb8:	0a 94       	dec	r0
 cba:	16 16       	cp	r1, r22
 cbc:	17 06       	cpc	r1, r23
 cbe:	18 06       	cpc	r1, r24
 cc0:	09 06       	cpc	r0, r25
 cc2:	08 95       	ret

00000cc4 <__fp_pscB>:
 cc4:	00 24       	eor	r0, r0
 cc6:	0a 94       	dec	r0
 cc8:	12 16       	cp	r1, r18
 cca:	13 06       	cpc	r1, r19
 ccc:	14 06       	cpc	r1, r20
 cce:	05 06       	cpc	r0, r21
 cd0:	08 95       	ret

00000cd2 <__fp_round>:
 cd2:	09 2e       	mov	r0, r25
 cd4:	03 94       	inc	r0
 cd6:	00 0c       	add	r0, r0
 cd8:	11 f4       	brne	.+4      	; 0xcde <__fp_round+0xc>
 cda:	88 23       	and	r24, r24
 cdc:	52 f0       	brmi	.+20     	; 0xcf2 <__fp_round+0x20>
 cde:	bb 0f       	add	r27, r27
 ce0:	40 f4       	brcc	.+16     	; 0xcf2 <__fp_round+0x20>
 ce2:	bf 2b       	or	r27, r31
 ce4:	11 f4       	brne	.+4      	; 0xcea <__fp_round+0x18>
 ce6:	60 ff       	sbrs	r22, 0
 ce8:	04 c0       	rjmp	.+8      	; 0xcf2 <__fp_round+0x20>
 cea:	6f 5f       	subi	r22, 0xFF	; 255
 cec:	7f 4f       	sbci	r23, 0xFF	; 255
 cee:	8f 4f       	sbci	r24, 0xFF	; 255
 cf0:	9f 4f       	sbci	r25, 0xFF	; 255
 cf2:	08 95       	ret

00000cf4 <__fp_split3>:
 cf4:	57 fd       	sbrc	r21, 7
 cf6:	90 58       	subi	r25, 0x80	; 128
 cf8:	44 0f       	add	r20, r20
 cfa:	55 1f       	adc	r21, r21
 cfc:	59 f0       	breq	.+22     	; 0xd14 <__fp_splitA+0x10>
 cfe:	5f 3f       	cpi	r21, 0xFF	; 255
 d00:	71 f0       	breq	.+28     	; 0xd1e <__fp_splitA+0x1a>
 d02:	47 95       	ror	r20

00000d04 <__fp_splitA>:
 d04:	88 0f       	add	r24, r24
 d06:	97 fb       	bst	r25, 7
 d08:	99 1f       	adc	r25, r25
 d0a:	61 f0       	breq	.+24     	; 0xd24 <__fp_splitA+0x20>
 d0c:	9f 3f       	cpi	r25, 0xFF	; 255
 d0e:	79 f0       	breq	.+30     	; 0xd2e <__fp_splitA+0x2a>
 d10:	87 95       	ror	r24
 d12:	08 95       	ret
 d14:	12 16       	cp	r1, r18
 d16:	13 06       	cpc	r1, r19
 d18:	14 06       	cpc	r1, r20
 d1a:	55 1f       	adc	r21, r21
 d1c:	f2 cf       	rjmp	.-28     	; 0xd02 <__fp_split3+0xe>
 d1e:	46 95       	lsr	r20
 d20:	f1 df       	rcall	.-30     	; 0xd04 <__fp_splitA>
 d22:	08 c0       	rjmp	.+16     	; 0xd34 <__fp_splitA+0x30>
 d24:	16 16       	cp	r1, r22
 d26:	17 06       	cpc	r1, r23
 d28:	18 06       	cpc	r1, r24
 d2a:	99 1f       	adc	r25, r25
 d2c:	f1 cf       	rjmp	.-30     	; 0xd10 <__fp_splitA+0xc>
 d2e:	86 95       	lsr	r24
 d30:	71 05       	cpc	r23, r1
 d32:	61 05       	cpc	r22, r1
 d34:	08 94       	sec
 d36:	08 95       	ret

00000d38 <__fp_zero>:
 d38:	e8 94       	clt

00000d3a <__fp_szero>:
 d3a:	bb 27       	eor	r27, r27
 d3c:	66 27       	eor	r22, r22
 d3e:	77 27       	eor	r23, r23
 d40:	cb 01       	movw	r24, r22
 d42:	97 f9       	bld	r25, 7
 d44:	08 95       	ret

00000d46 <__mulsf3>:
 d46:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__mulsf3x>
 d4a:	0c 94 69 06 	jmp	0xcd2	; 0xcd2 <__fp_round>
 d4e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__fp_pscA>
 d52:	38 f0       	brcs	.+14     	; 0xd62 <__mulsf3+0x1c>
 d54:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__fp_pscB>
 d58:	20 f0       	brcs	.+8      	; 0xd62 <__mulsf3+0x1c>
 d5a:	95 23       	and	r25, r21
 d5c:	11 f0       	breq	.+4      	; 0xd62 <__mulsf3+0x1c>
 d5e:	0c 94 52 06 	jmp	0xca4	; 0xca4 <__fp_inf>
 d62:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__fp_nan>
 d66:	11 24       	eor	r1, r1
 d68:	0c 94 9d 06 	jmp	0xd3a	; 0xd3a <__fp_szero>

00000d6c <__mulsf3x>:
 d6c:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__fp_split3>
 d70:	70 f3       	brcs	.-36     	; 0xd4e <__mulsf3+0x8>

00000d72 <__mulsf3_pse>:
 d72:	95 9f       	mul	r25, r21
 d74:	c1 f3       	breq	.-16     	; 0xd66 <__mulsf3+0x20>
 d76:	95 0f       	add	r25, r21
 d78:	50 e0       	ldi	r21, 0x00	; 0
 d7a:	55 1f       	adc	r21, r21
 d7c:	62 9f       	mul	r22, r18
 d7e:	f0 01       	movw	r30, r0
 d80:	72 9f       	mul	r23, r18
 d82:	bb 27       	eor	r27, r27
 d84:	f0 0d       	add	r31, r0
 d86:	b1 1d       	adc	r27, r1
 d88:	63 9f       	mul	r22, r19
 d8a:	aa 27       	eor	r26, r26
 d8c:	f0 0d       	add	r31, r0
 d8e:	b1 1d       	adc	r27, r1
 d90:	aa 1f       	adc	r26, r26
 d92:	64 9f       	mul	r22, r20
 d94:	66 27       	eor	r22, r22
 d96:	b0 0d       	add	r27, r0
 d98:	a1 1d       	adc	r26, r1
 d9a:	66 1f       	adc	r22, r22
 d9c:	82 9f       	mul	r24, r18
 d9e:	22 27       	eor	r18, r18
 da0:	b0 0d       	add	r27, r0
 da2:	a1 1d       	adc	r26, r1
 da4:	62 1f       	adc	r22, r18
 da6:	73 9f       	mul	r23, r19
 da8:	b0 0d       	add	r27, r0
 daa:	a1 1d       	adc	r26, r1
 dac:	62 1f       	adc	r22, r18
 dae:	83 9f       	mul	r24, r19
 db0:	a0 0d       	add	r26, r0
 db2:	61 1d       	adc	r22, r1
 db4:	22 1f       	adc	r18, r18
 db6:	74 9f       	mul	r23, r20
 db8:	33 27       	eor	r19, r19
 dba:	a0 0d       	add	r26, r0
 dbc:	61 1d       	adc	r22, r1
 dbe:	23 1f       	adc	r18, r19
 dc0:	84 9f       	mul	r24, r20
 dc2:	60 0d       	add	r22, r0
 dc4:	21 1d       	adc	r18, r1
 dc6:	82 2f       	mov	r24, r18
 dc8:	76 2f       	mov	r23, r22
 dca:	6a 2f       	mov	r22, r26
 dcc:	11 24       	eor	r1, r1
 dce:	9f 57       	subi	r25, 0x7F	; 127
 dd0:	50 40       	sbci	r21, 0x00	; 0
 dd2:	9a f0       	brmi	.+38     	; 0xdfa <__mulsf3_pse+0x88>
 dd4:	f1 f0       	breq	.+60     	; 0xe12 <__mulsf3_pse+0xa0>
 dd6:	88 23       	and	r24, r24
 dd8:	4a f0       	brmi	.+18     	; 0xdec <__mulsf3_pse+0x7a>
 dda:	ee 0f       	add	r30, r30
 ddc:	ff 1f       	adc	r31, r31
 dde:	bb 1f       	adc	r27, r27
 de0:	66 1f       	adc	r22, r22
 de2:	77 1f       	adc	r23, r23
 de4:	88 1f       	adc	r24, r24
 de6:	91 50       	subi	r25, 0x01	; 1
 de8:	50 40       	sbci	r21, 0x00	; 0
 dea:	a9 f7       	brne	.-22     	; 0xdd6 <__mulsf3_pse+0x64>
 dec:	9e 3f       	cpi	r25, 0xFE	; 254
 dee:	51 05       	cpc	r21, r1
 df0:	80 f0       	brcs	.+32     	; 0xe12 <__mulsf3_pse+0xa0>
 df2:	0c 94 52 06 	jmp	0xca4	; 0xca4 <__fp_inf>
 df6:	0c 94 9d 06 	jmp	0xd3a	; 0xd3a <__fp_szero>
 dfa:	5f 3f       	cpi	r21, 0xFF	; 255
 dfc:	e4 f3       	brlt	.-8      	; 0xdf6 <__mulsf3_pse+0x84>
 dfe:	98 3e       	cpi	r25, 0xE8	; 232
 e00:	d4 f3       	brlt	.-12     	; 0xdf6 <__mulsf3_pse+0x84>
 e02:	86 95       	lsr	r24
 e04:	77 95       	ror	r23
 e06:	67 95       	ror	r22
 e08:	b7 95       	ror	r27
 e0a:	f7 95       	ror	r31
 e0c:	e7 95       	ror	r30
 e0e:	9f 5f       	subi	r25, 0xFF	; 255
 e10:	c1 f7       	brne	.-16     	; 0xe02 <__mulsf3_pse+0x90>
 e12:	fe 2b       	or	r31, r30
 e14:	88 0f       	add	r24, r24
 e16:	91 1d       	adc	r25, r1
 e18:	96 95       	lsr	r25
 e1a:	87 95       	ror	r24
 e1c:	97 f9       	bld	r25, 7
 e1e:	08 95       	ret

00000e20 <__udivmodqi4>:
 e20:	99 1b       	sub	r25, r25
 e22:	79 e0       	ldi	r23, 0x09	; 9
 e24:	04 c0       	rjmp	.+8      	; 0xe2e <__udivmodqi4_ep>

00000e26 <__udivmodqi4_loop>:
 e26:	99 1f       	adc	r25, r25
 e28:	96 17       	cp	r25, r22
 e2a:	08 f0       	brcs	.+2      	; 0xe2e <__udivmodqi4_ep>
 e2c:	96 1b       	sub	r25, r22

00000e2e <__udivmodqi4_ep>:
 e2e:	88 1f       	adc	r24, r24
 e30:	7a 95       	dec	r23
 e32:	c9 f7       	brne	.-14     	; 0xe26 <__udivmodqi4_loop>
 e34:	80 95       	com	r24
 e36:	08 95       	ret

00000e38 <__udivmodhi4>:
 e38:	aa 1b       	sub	r26, r26
 e3a:	bb 1b       	sub	r27, r27
 e3c:	51 e1       	ldi	r21, 0x11	; 17
 e3e:	07 c0       	rjmp	.+14     	; 0xe4e <__udivmodhi4_ep>

00000e40 <__udivmodhi4_loop>:
 e40:	aa 1f       	adc	r26, r26
 e42:	bb 1f       	adc	r27, r27
 e44:	a6 17       	cp	r26, r22
 e46:	b7 07       	cpc	r27, r23
 e48:	10 f0       	brcs	.+4      	; 0xe4e <__udivmodhi4_ep>
 e4a:	a6 1b       	sub	r26, r22
 e4c:	b7 0b       	sbc	r27, r23

00000e4e <__udivmodhi4_ep>:
 e4e:	88 1f       	adc	r24, r24
 e50:	99 1f       	adc	r25, r25
 e52:	5a 95       	dec	r21
 e54:	a9 f7       	brne	.-22     	; 0xe40 <__udivmodhi4_loop>
 e56:	80 95       	com	r24
 e58:	90 95       	com	r25
 e5a:	bc 01       	movw	r22, r24
 e5c:	cd 01       	movw	r24, r26
 e5e:	08 95       	ret

00000e60 <__umulhisi3>:
 e60:	a2 9f       	mul	r26, r18
 e62:	b0 01       	movw	r22, r0
 e64:	b3 9f       	mul	r27, r19
 e66:	c0 01       	movw	r24, r0
 e68:	a3 9f       	mul	r26, r19
 e6a:	70 0d       	add	r23, r0
 e6c:	81 1d       	adc	r24, r1
 e6e:	11 24       	eor	r1, r1
 e70:	91 1d       	adc	r25, r1
 e72:	b2 9f       	mul	r27, r18
 e74:	70 0d       	add	r23, r0
 e76:	81 1d       	adc	r24, r1
 e78:	11 24       	eor	r1, r1
 e7a:	91 1d       	adc	r25, r1
 e7c:	08 95       	ret

00000e7e <__itoa_ncheck>:
 e7e:	bb 27       	eor	r27, r27
 e80:	4a 30       	cpi	r20, 0x0A	; 10
 e82:	31 f4       	brne	.+12     	; 0xe90 <__itoa_ncheck+0x12>
 e84:	99 23       	and	r25, r25
 e86:	22 f4       	brpl	.+8      	; 0xe90 <__itoa_ncheck+0x12>
 e88:	bd e2       	ldi	r27, 0x2D	; 45
 e8a:	90 95       	com	r25
 e8c:	81 95       	neg	r24
 e8e:	9f 4f       	sbci	r25, 0xFF	; 255
 e90:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <__utoa_common>

00000e94 <__utoa_ncheck>:
 e94:	bb 27       	eor	r27, r27

00000e96 <__utoa_common>:
 e96:	fb 01       	movw	r30, r22
 e98:	55 27       	eor	r21, r21
 e9a:	aa 27       	eor	r26, r26
 e9c:	88 0f       	add	r24, r24
 e9e:	99 1f       	adc	r25, r25
 ea0:	aa 1f       	adc	r26, r26
 ea2:	a4 17       	cp	r26, r20
 ea4:	10 f0       	brcs	.+4      	; 0xeaa <__utoa_common+0x14>
 ea6:	a4 1b       	sub	r26, r20
 ea8:	83 95       	inc	r24
 eaa:	50 51       	subi	r21, 0x10	; 16
 eac:	b9 f7       	brne	.-18     	; 0xe9c <__utoa_common+0x6>
 eae:	a0 5d       	subi	r26, 0xD0	; 208
 eb0:	aa 33       	cpi	r26, 0x3A	; 58
 eb2:	08 f0       	brcs	.+2      	; 0xeb6 <__utoa_common+0x20>
 eb4:	a9 5d       	subi	r26, 0xD9	; 217
 eb6:	a1 93       	st	Z+, r26
 eb8:	00 97       	sbiw	r24, 0x00	; 0
 eba:	79 f7       	brne	.-34     	; 0xe9a <__utoa_common+0x4>
 ebc:	b1 11       	cpse	r27, r1
 ebe:	b1 93       	st	Z+, r27
 ec0:	11 92       	st	Z+, r1
 ec2:	cb 01       	movw	r24, r22
 ec4:	0c 94 64 07 	jmp	0xec8	; 0xec8 <strrev>

00000ec8 <strrev>:
 ec8:	dc 01       	movw	r26, r24
 eca:	fc 01       	movw	r30, r24
 ecc:	67 2f       	mov	r22, r23
 ece:	71 91       	ld	r23, Z+
 ed0:	77 23       	and	r23, r23
 ed2:	e1 f7       	brne	.-8      	; 0xecc <strrev+0x4>
 ed4:	32 97       	sbiw	r30, 0x02	; 2
 ed6:	04 c0       	rjmp	.+8      	; 0xee0 <strrev+0x18>
 ed8:	7c 91       	ld	r23, X
 eda:	6d 93       	st	X+, r22
 edc:	70 83       	st	Z, r23
 ede:	62 91       	ld	r22, -Z
 ee0:	ae 17       	cp	r26, r30
 ee2:	bf 07       	cpc	r27, r31
 ee4:	c8 f3       	brcs	.-14     	; 0xed8 <strrev+0x10>
 ee6:	08 95       	ret

00000ee8 <_exit>:
 ee8:	f8 94       	cli

00000eea <__stop_program>:
 eea:	ff cf       	rjmp	.-2      	; 0xeea <__stop_program>
